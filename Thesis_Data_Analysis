{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM2qo7w9oyLzeI081C6e3h2",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/javeriiaaa/Thesis/blob/main/Thesis_Data_Analysis\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "k7oAM0oJ0GxQ"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_csv('sales_train_validation.csv.zip')"
      ],
      "metadata": {
        "id": "l-0Iexz30Ryn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(15)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 569
        },
        "id": "jaZrhstC1Ei_",
        "outputId": "676ae8ec-3081-4257-929b-c6405812e8b8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                               id        item_id    dept_id   cat_id store_id  \\\n",
              "0   HOBBIES_1_001_CA_1_validation  HOBBIES_1_001  HOBBIES_1  HOBBIES     CA_1   \n",
              "1   HOBBIES_1_002_CA_1_validation  HOBBIES_1_002  HOBBIES_1  HOBBIES     CA_1   \n",
              "2   HOBBIES_1_003_CA_1_validation  HOBBIES_1_003  HOBBIES_1  HOBBIES     CA_1   \n",
              "3   HOBBIES_1_004_CA_1_validation  HOBBIES_1_004  HOBBIES_1  HOBBIES     CA_1   \n",
              "4   HOBBIES_1_005_CA_1_validation  HOBBIES_1_005  HOBBIES_1  HOBBIES     CA_1   \n",
              "5   HOBBIES_1_006_CA_1_validation  HOBBIES_1_006  HOBBIES_1  HOBBIES     CA_1   \n",
              "6   HOBBIES_1_007_CA_1_validation  HOBBIES_1_007  HOBBIES_1  HOBBIES     CA_1   \n",
              "7   HOBBIES_1_008_CA_1_validation  HOBBIES_1_008  HOBBIES_1  HOBBIES     CA_1   \n",
              "8   HOBBIES_1_009_CA_1_validation  HOBBIES_1_009  HOBBIES_1  HOBBIES     CA_1   \n",
              "9   HOBBIES_1_010_CA_1_validation  HOBBIES_1_010  HOBBIES_1  HOBBIES     CA_1   \n",
              "10  HOBBIES_1_011_CA_1_validation  HOBBIES_1_011  HOBBIES_1  HOBBIES     CA_1   \n",
              "11  HOBBIES_1_012_CA_1_validation  HOBBIES_1_012  HOBBIES_1  HOBBIES     CA_1   \n",
              "12  HOBBIES_1_013_CA_1_validation  HOBBIES_1_013  HOBBIES_1  HOBBIES     CA_1   \n",
              "13  HOBBIES_1_014_CA_1_validation  HOBBIES_1_014  HOBBIES_1  HOBBIES     CA_1   \n",
              "14  HOBBIES_1_015_CA_1_validation  HOBBIES_1_015  HOBBIES_1  HOBBIES     CA_1   \n",
              "\n",
              "   state_id  d_1  d_2  d_3  d_4  ...  d_1904  d_1905  d_1906  d_1907  d_1908  \\\n",
              "0        CA    0    0    0    0  ...       1       3       0       1       1   \n",
              "1        CA    0    0    0    0  ...       0       0       0       0       0   \n",
              "2        CA    0    0    0    0  ...       2       1       2       1       1   \n",
              "3        CA    0    0    0    0  ...       1       0       5       4       1   \n",
              "4        CA    0    0    0    0  ...       2       1       1       0       1   \n",
              "5        CA    0    0    0    0  ...       0       1       0       1       0   \n",
              "6        CA    0    0    0    0  ...       0       0       0       1       0   \n",
              "7        CA   12   15    0    0  ...       0       0       1      37       3   \n",
              "8        CA    2    0    7    3  ...       0       0       1       1       6   \n",
              "9        CA    0    0    1    0  ...       1       0       0       0       0   \n",
              "10       CA    0    0    0    0  ...       0       0       1       0       0   \n",
              "11       CA    0    2    0    0  ...       0       0       1       0       0   \n",
              "12       CA    0    0    0    0  ...       2       0       2       1       0   \n",
              "13       CA    0    0    0    0  ...       0       2       2       1       2   \n",
              "14       CA    4    0    0    5  ...       1       4       2       2       1   \n",
              "\n",
              "    d_1909  d_1910  d_1911  d_1912  d_1913  \n",
              "0        1       3       0       1       1  \n",
              "1        1       0       0       0       0  \n",
              "2        1       0       1       1       1  \n",
              "3        0       1       3       7       2  \n",
              "4        1       2       2       2       4  \n",
              "5        0       0       2       0       0  \n",
              "6        1       0       0       1       1  \n",
              "7        4       6       3       2       1  \n",
              "8        0       0       0       0       0  \n",
              "9        0       0       2       0       2  \n",
              "10       0       0       0       0       0  \n",
              "11       0       1       0       0       0  \n",
              "12       0       0       0       1       1  \n",
              "13       0       0       3       1       1  \n",
              "14       0       0       2       5       4  \n",
              "\n",
              "[15 rows x 1919 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-eb98b5e0-5e0d-4227-9cd3-3474d8ae047f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>item_id</th>\n",
              "      <th>dept_id</th>\n",
              "      <th>cat_id</th>\n",
              "      <th>store_id</th>\n",
              "      <th>state_id</th>\n",
              "      <th>d_1</th>\n",
              "      <th>d_2</th>\n",
              "      <th>d_3</th>\n",
              "      <th>d_4</th>\n",
              "      <th>...</th>\n",
              "      <th>d_1904</th>\n",
              "      <th>d_1905</th>\n",
              "      <th>d_1906</th>\n",
              "      <th>d_1907</th>\n",
              "      <th>d_1908</th>\n",
              "      <th>d_1909</th>\n",
              "      <th>d_1910</th>\n",
              "      <th>d_1911</th>\n",
              "      <th>d_1912</th>\n",
              "      <th>d_1913</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>HOBBIES_1_001_CA_1_validation</td>\n",
              "      <td>HOBBIES_1_001</td>\n",
              "      <td>HOBBIES_1</td>\n",
              "      <td>HOBBIES</td>\n",
              "      <td>CA_1</td>\n",
              "      <td>CA</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>HOBBIES_1_002_CA_1_validation</td>\n",
              "      <td>HOBBIES_1_002</td>\n",
              "      <td>HOBBIES_1</td>\n",
              "      <td>HOBBIES</td>\n",
              "      <td>CA_1</td>\n",
              "      <td>CA</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>HOBBIES_1_003_CA_1_validation</td>\n",
              "      <td>HOBBIES_1_003</td>\n",
              "      <td>HOBBIES_1</td>\n",
              "      <td>HOBBIES</td>\n",
              "      <td>CA_1</td>\n",
              "      <td>CA</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>HOBBIES_1_004_CA_1_validation</td>\n",
              "      <td>HOBBIES_1_004</td>\n",
              "      <td>HOBBIES_1</td>\n",
              "      <td>HOBBIES</td>\n",
              "      <td>CA_1</td>\n",
              "      <td>CA</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>HOBBIES_1_005_CA_1_validation</td>\n",
              "      <td>HOBBIES_1_005</td>\n",
              "      <td>HOBBIES_1</td>\n",
              "      <td>HOBBIES</td>\n",
              "      <td>CA_1</td>\n",
              "      <td>CA</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>HOBBIES_1_006_CA_1_validation</td>\n",
              "      <td>HOBBIES_1_006</td>\n",
              "      <td>HOBBIES_1</td>\n",
              "      <td>HOBBIES</td>\n",
              "      <td>CA_1</td>\n",
              "      <td>CA</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>HOBBIES_1_007_CA_1_validation</td>\n",
              "      <td>HOBBIES_1_007</td>\n",
              "      <td>HOBBIES_1</td>\n",
              "      <td>HOBBIES</td>\n",
              "      <td>CA_1</td>\n",
              "      <td>CA</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>HOBBIES_1_008_CA_1_validation</td>\n",
              "      <td>HOBBIES_1_008</td>\n",
              "      <td>HOBBIES_1</td>\n",
              "      <td>HOBBIES</td>\n",
              "      <td>CA_1</td>\n",
              "      <td>CA</td>\n",
              "      <td>12</td>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>37</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>HOBBIES_1_009_CA_1_validation</td>\n",
              "      <td>HOBBIES_1_009</td>\n",
              "      <td>HOBBIES_1</td>\n",
              "      <td>HOBBIES</td>\n",
              "      <td>CA_1</td>\n",
              "      <td>CA</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>HOBBIES_1_010_CA_1_validation</td>\n",
              "      <td>HOBBIES_1_010</td>\n",
              "      <td>HOBBIES_1</td>\n",
              "      <td>HOBBIES</td>\n",
              "      <td>CA_1</td>\n",
              "      <td>CA</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>HOBBIES_1_011_CA_1_validation</td>\n",
              "      <td>HOBBIES_1_011</td>\n",
              "      <td>HOBBIES_1</td>\n",
              "      <td>HOBBIES</td>\n",
              "      <td>CA_1</td>\n",
              "      <td>CA</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>HOBBIES_1_012_CA_1_validation</td>\n",
              "      <td>HOBBIES_1_012</td>\n",
              "      <td>HOBBIES_1</td>\n",
              "      <td>HOBBIES</td>\n",
              "      <td>CA_1</td>\n",
              "      <td>CA</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>HOBBIES_1_013_CA_1_validation</td>\n",
              "      <td>HOBBIES_1_013</td>\n",
              "      <td>HOBBIES_1</td>\n",
              "      <td>HOBBIES</td>\n",
              "      <td>CA_1</td>\n",
              "      <td>CA</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>HOBBIES_1_014_CA_1_validation</td>\n",
              "      <td>HOBBIES_1_014</td>\n",
              "      <td>HOBBIES_1</td>\n",
              "      <td>HOBBIES</td>\n",
              "      <td>CA_1</td>\n",
              "      <td>CA</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>HOBBIES_1_015_CA_1_validation</td>\n",
              "      <td>HOBBIES_1_015</td>\n",
              "      <td>HOBBIES_1</td>\n",
              "      <td>HOBBIES</td>\n",
              "      <td>CA_1</td>\n",
              "      <td>CA</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>15 rows × 1919 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eb98b5e0-5e0d-4227-9cd3-3474d8ae047f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-eb98b5e0-5e0d-4227-9cd3-3474d8ae047f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-eb98b5e0-5e0d-4227-9cd3-3474d8ae047f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-edfbc58b-4b4b-4bf7-92de-935d53d670f2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-edfbc58b-4b4b-4bf7-92de-935d53d670f2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-edfbc58b-4b4b-4bf7-92de-935d53d670f2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2=pd.read_csv('calendar.csv')"
      ],
      "metadata": {
        "id": "ynVD_tF11H3f"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df2.head(15)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 520
        },
        "id": "GsglkXa-JWKd",
        "outputId": "89953b6f-6936-4196-f4e3-d9fd1252bd1a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          date  wm_yr_wk    weekday  wday  month  year     d event_name_1  \\\n",
              "0   2011-01-29     11101   Saturday     1      1  2011   d_1          NaN   \n",
              "1   2011-01-30     11101     Sunday     2      1  2011   d_2          NaN   \n",
              "2   2011-01-31     11101     Monday     3      1  2011   d_3          NaN   \n",
              "3   2011-02-01     11101    Tuesday     4      2  2011   d_4          NaN   \n",
              "4   2011-02-02     11101  Wednesday     5      2  2011   d_5          NaN   \n",
              "5   2011-02-03     11101   Thursday     6      2  2011   d_6          NaN   \n",
              "6   2011-02-04     11101     Friday     7      2  2011   d_7          NaN   \n",
              "7   2011-02-05     11102   Saturday     1      2  2011   d_8          NaN   \n",
              "8   2011-02-06     11102     Sunday     2      2  2011   d_9    SuperBowl   \n",
              "9   2011-02-07     11102     Monday     3      2  2011  d_10          NaN   \n",
              "10  2011-02-08     11102    Tuesday     4      2  2011  d_11          NaN   \n",
              "11  2011-02-09     11102  Wednesday     5      2  2011  d_12          NaN   \n",
              "12  2011-02-10     11102   Thursday     6      2  2011  d_13          NaN   \n",
              "13  2011-02-11     11102     Friday     7      2  2011  d_14          NaN   \n",
              "14  2011-02-12     11103   Saturday     1      2  2011  d_15          NaN   \n",
              "\n",
              "   event_type_1 event_name_2 event_type_2  snap_CA  snap_TX  snap_WI  \n",
              "0           NaN          NaN          NaN        0        0        0  \n",
              "1           NaN          NaN          NaN        0        0        0  \n",
              "2           NaN          NaN          NaN        0        0        0  \n",
              "3           NaN          NaN          NaN        1        1        0  \n",
              "4           NaN          NaN          NaN        1        0        1  \n",
              "5           NaN          NaN          NaN        1        1        1  \n",
              "6           NaN          NaN          NaN        1        0        0  \n",
              "7           NaN          NaN          NaN        1        1        1  \n",
              "8      Sporting          NaN          NaN        1        1        1  \n",
              "9           NaN          NaN          NaN        1        1        0  \n",
              "10          NaN          NaN          NaN        1        0        1  \n",
              "11          NaN          NaN          NaN        1        1        1  \n",
              "12          NaN          NaN          NaN        1        0        0  \n",
              "13          NaN          NaN          NaN        0        1        1  \n",
              "14          NaN          NaN          NaN        0        1        1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-354aa9fa-112b-4faa-abda-03066495cf72\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>wm_yr_wk</th>\n",
              "      <th>weekday</th>\n",
              "      <th>wday</th>\n",
              "      <th>month</th>\n",
              "      <th>year</th>\n",
              "      <th>d</th>\n",
              "      <th>event_name_1</th>\n",
              "      <th>event_type_1</th>\n",
              "      <th>event_name_2</th>\n",
              "      <th>event_type_2</th>\n",
              "      <th>snap_CA</th>\n",
              "      <th>snap_TX</th>\n",
              "      <th>snap_WI</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2011-01-29</td>\n",
              "      <td>11101</td>\n",
              "      <td>Saturday</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2011-01-30</td>\n",
              "      <td>11101</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2011-01-31</td>\n",
              "      <td>11101</td>\n",
              "      <td>Monday</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2011-02-01</td>\n",
              "      <td>11101</td>\n",
              "      <td>Tuesday</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2011-02-02</td>\n",
              "      <td>11101</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2011-02-03</td>\n",
              "      <td>11101</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>2</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2011-02-04</td>\n",
              "      <td>11101</td>\n",
              "      <td>Friday</td>\n",
              "      <td>7</td>\n",
              "      <td>2</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2011-02-05</td>\n",
              "      <td>11102</td>\n",
              "      <td>Saturday</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2011-02-06</td>\n",
              "      <td>11102</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_9</td>\n",
              "      <td>SuperBowl</td>\n",
              "      <td>Sporting</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2011-02-07</td>\n",
              "      <td>11102</td>\n",
              "      <td>Monday</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_10</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>2011-02-08</td>\n",
              "      <td>11102</td>\n",
              "      <td>Tuesday</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_11</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>2011-02-09</td>\n",
              "      <td>11102</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_12</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>2011-02-10</td>\n",
              "      <td>11102</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>2</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_13</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>2011-02-11</td>\n",
              "      <td>11102</td>\n",
              "      <td>Friday</td>\n",
              "      <td>7</td>\n",
              "      <td>2</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_14</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>2011-02-12</td>\n",
              "      <td>11103</td>\n",
              "      <td>Saturday</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_15</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-354aa9fa-112b-4faa-abda-03066495cf72')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-354aa9fa-112b-4faa-abda-03066495cf72 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-354aa9fa-112b-4faa-abda-03066495cf72');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6a985193-26b1-420f-a6d8-ab7562249ede\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6a985193-26b1-420f-a6d8-ab7562249ede')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6a985193-26b1-420f-a6d8-ab7562249ede button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df2",
              "summary": "{\n  \"name\": \"df2\",\n  \"rows\": 1969,\n  \"fields\": [\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1969,\n        \"samples\": [\n          \"2013-02-19\",\n          \"2013-03-04\",\n          \"2015-08-10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wm_yr_wk\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 155,\n        \"min\": 11101,\n        \"max\": 11621,\n        \"num_unique_values\": 282,\n        \"samples\": [\n          11241,\n          11242,\n          11423\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weekday\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Saturday\",\n          \"Sunday\",\n          \"Thursday\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          2,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 12,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          11,\n          10,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2011,\n        \"max\": 2016,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2011,\n          2012,\n          2016\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"d\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1969,\n        \"samples\": [\n          \"d_753\",\n          \"d_766\",\n          \"d_1655\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"event_name_1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"OrthodoxChristmas\",\n          \"IndependenceDay\",\n          \"Thanksgiving\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"event_type_1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Cultural\",\n          \"Religious\",\n          \"Sporting\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"event_name_2\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Cinco De Mayo\",\n          \"Father's day\",\n          \"Easter\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"event_type_2\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Religious\",\n          \"Cultural\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"snap_CA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"snap_TX\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"snap_WI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 523
        },
        "id": "dEPc9MJYQa20",
        "outputId": "6664c129-4e27-44fe-fe29-2e7bd4c3f74b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "date            object\n",
              "wm_yr_wk         int64\n",
              "weekday         object\n",
              "wday             int64\n",
              "month            int64\n",
              "year             int64\n",
              "d               object\n",
              "event_name_1    object\n",
              "event_type_1    object\n",
              "event_name_2    object\n",
              "event_type_2    object\n",
              "snap_CA          int64\n",
              "snap_TX          int64\n",
              "snap_WI          int64\n",
              "dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>date</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>wm_yr_wk</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>weekday</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>wday</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>month</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>year</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>d</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>event_name_1</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>event_type_1</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>event_name_2</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>event_type_2</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>snap_CA</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>snap_TX</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>snap_WI</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df3=pd.read_csv('sell_prices.csv.zip')"
      ],
      "metadata": {
        "id": "BfVfW_bIJvt9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df3.head(15)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 520
        },
        "id": "LpnS_cp9JwM8",
        "outputId": "bba09922-a5db-4cc8-bdfb-e5537a098d0e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   store_id        item_id  wm_yr_wk  sell_price\n",
              "0      CA_1  HOBBIES_1_001     11325        9.58\n",
              "1      CA_1  HOBBIES_1_001     11326        9.58\n",
              "2      CA_1  HOBBIES_1_001     11327        8.26\n",
              "3      CA_1  HOBBIES_1_001     11328        8.26\n",
              "4      CA_1  HOBBIES_1_001     11329        8.26\n",
              "5      CA_1  HOBBIES_1_001     11330        8.26\n",
              "6      CA_1  HOBBIES_1_001     11331        8.26\n",
              "7      CA_1  HOBBIES_1_001     11332        8.26\n",
              "8      CA_1  HOBBIES_1_001     11333        8.26\n",
              "9      CA_1  HOBBIES_1_001     11334        8.26\n",
              "10     CA_1  HOBBIES_1_001     11335        8.26\n",
              "11     CA_1  HOBBIES_1_001     11336        8.26\n",
              "12     CA_1  HOBBIES_1_001     11337        8.26\n",
              "13     CA_1  HOBBIES_1_001     11338        8.26\n",
              "14     CA_1  HOBBIES_1_001     11339        8.26"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b042a96b-ae4d-421f-a31d-7474dc06627b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>store_id</th>\n",
              "      <th>item_id</th>\n",
              "      <th>wm_yr_wk</th>\n",
              "      <th>sell_price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>CA_1</td>\n",
              "      <td>HOBBIES_1_001</td>\n",
              "      <td>11325</td>\n",
              "      <td>9.58</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>CA_1</td>\n",
              "      <td>HOBBIES_1_001</td>\n",
              "      <td>11326</td>\n",
              "      <td>9.58</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>CA_1</td>\n",
              "      <td>HOBBIES_1_001</td>\n",
              "      <td>11327</td>\n",
              "      <td>8.26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>CA_1</td>\n",
              "      <td>HOBBIES_1_001</td>\n",
              "      <td>11328</td>\n",
              "      <td>8.26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>CA_1</td>\n",
              "      <td>HOBBIES_1_001</td>\n",
              "      <td>11329</td>\n",
              "      <td>8.26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>CA_1</td>\n",
              "      <td>HOBBIES_1_001</td>\n",
              "      <td>11330</td>\n",
              "      <td>8.26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>CA_1</td>\n",
              "      <td>HOBBIES_1_001</td>\n",
              "      <td>11331</td>\n",
              "      <td>8.26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>CA_1</td>\n",
              "      <td>HOBBIES_1_001</td>\n",
              "      <td>11332</td>\n",
              "      <td>8.26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>CA_1</td>\n",
              "      <td>HOBBIES_1_001</td>\n",
              "      <td>11333</td>\n",
              "      <td>8.26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>CA_1</td>\n",
              "      <td>HOBBIES_1_001</td>\n",
              "      <td>11334</td>\n",
              "      <td>8.26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>CA_1</td>\n",
              "      <td>HOBBIES_1_001</td>\n",
              "      <td>11335</td>\n",
              "      <td>8.26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>CA_1</td>\n",
              "      <td>HOBBIES_1_001</td>\n",
              "      <td>11336</td>\n",
              "      <td>8.26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>CA_1</td>\n",
              "      <td>HOBBIES_1_001</td>\n",
              "      <td>11337</td>\n",
              "      <td>8.26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>CA_1</td>\n",
              "      <td>HOBBIES_1_001</td>\n",
              "      <td>11338</td>\n",
              "      <td>8.26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>CA_1</td>\n",
              "      <td>HOBBIES_1_001</td>\n",
              "      <td>11339</td>\n",
              "      <td>8.26</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b042a96b-ae4d-421f-a31d-7474dc06627b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b042a96b-ae4d-421f-a31d-7474dc06627b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b042a96b-ae4d-421f-a31d-7474dc06627b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9326d3bd-f294-4b32-90c9-a84af99ce461\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9326d3bd-f294-4b32-90c9-a84af99ce461')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9326d3bd-f294-4b32-90c9-a84af99ce461 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df3"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.count()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "lwY07KaqNUa1",
        "outputId": "b906934d-5e4c-431c-b14f-3ee5e11032c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id          30490\n",
              "item_id     30490\n",
              "dept_id     30490\n",
              "cat_id      30490\n",
              "store_id    30490\n",
              "            ...  \n",
              "d_1909      30490\n",
              "d_1910      30490\n",
              "d_1911      30490\n",
              "d_1912      30490\n",
              "d_1913      30490\n",
              "Length: 1919, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>id</th>\n",
              "      <td>30490</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>item_id</th>\n",
              "      <td>30490</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dept_id</th>\n",
              "      <td>30490</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cat_id</th>\n",
              "      <td>30490</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>store_id</th>\n",
              "      <td>30490</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>d_1909</th>\n",
              "      <td>30490</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>d_1910</th>\n",
              "      <td>30490</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>d_1911</th>\n",
              "      <td>30490</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>d_1912</th>\n",
              "      <td>30490</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>d_1913</th>\n",
              "      <td>30490</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1919 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df3.count()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 210
        },
        "id": "5IOHIrnhNcJF",
        "outputId": "1b4aa18f-2ffb-4eeb-8530-5b3a5bf33cae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "store_id      6841121\n",
              "item_id       6841121\n",
              "wm_yr_wk      6841121\n",
              "sell_price    6841121\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>store_id</th>\n",
              "      <td>6841121</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>item_id</th>\n",
              "      <td>6841121</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>wm_yr_wk</th>\n",
              "      <td>6841121</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sell_price</th>\n",
              "      <td>6841121</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfidk=pd.read_csv('sample_submission.csv.zip')"
      ],
      "metadata": {
        "id": "HSgzxeFrv3hv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfidk.head(15)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 549
        },
        "id": "0fpqVdT1wEYZ",
        "outputId": "d6c06992-ac03-41dd-8a56-94683af44840"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                               id  F1  F2  F3  F4  F5  F6  F7  F8  F9  ...  \\\n",
              "0   HOBBIES_1_001_CA_1_validation   0   0   0   0   0   0   0   0   0  ...   \n",
              "1   HOBBIES_1_002_CA_1_validation   0   0   0   0   0   0   0   0   0  ...   \n",
              "2   HOBBIES_1_003_CA_1_validation   0   0   0   0   0   0   0   0   0  ...   \n",
              "3   HOBBIES_1_004_CA_1_validation   0   0   0   0   0   0   0   0   0  ...   \n",
              "4   HOBBIES_1_005_CA_1_validation   0   0   0   0   0   0   0   0   0  ...   \n",
              "5   HOBBIES_1_006_CA_1_validation   0   0   0   0   0   0   0   0   0  ...   \n",
              "6   HOBBIES_1_007_CA_1_validation   0   0   0   0   0   0   0   0   0  ...   \n",
              "7   HOBBIES_1_008_CA_1_validation   0   0   0   0   0   0   0   0   0  ...   \n",
              "8   HOBBIES_1_009_CA_1_validation   0   0   0   0   0   0   0   0   0  ...   \n",
              "9   HOBBIES_1_010_CA_1_validation   0   0   0   0   0   0   0   0   0  ...   \n",
              "10  HOBBIES_1_011_CA_1_validation   0   0   0   0   0   0   0   0   0  ...   \n",
              "11  HOBBIES_1_012_CA_1_validation   0   0   0   0   0   0   0   0   0  ...   \n",
              "12  HOBBIES_1_013_CA_1_validation   0   0   0   0   0   0   0   0   0  ...   \n",
              "13  HOBBIES_1_014_CA_1_validation   0   0   0   0   0   0   0   0   0  ...   \n",
              "14  HOBBIES_1_015_CA_1_validation   0   0   0   0   0   0   0   0   0  ...   \n",
              "\n",
              "    F19  F20  F21  F22  F23  F24  F25  F26  F27  F28  \n",
              "0     0    0    0    0    0    0    0    0    0    0  \n",
              "1     0    0    0    0    0    0    0    0    0    0  \n",
              "2     0    0    0    0    0    0    0    0    0    0  \n",
              "3     0    0    0    0    0    0    0    0    0    0  \n",
              "4     0    0    0    0    0    0    0    0    0    0  \n",
              "5     0    0    0    0    0    0    0    0    0    0  \n",
              "6     0    0    0    0    0    0    0    0    0    0  \n",
              "7     0    0    0    0    0    0    0    0    0    0  \n",
              "8     0    0    0    0    0    0    0    0    0    0  \n",
              "9     0    0    0    0    0    0    0    0    0    0  \n",
              "10    0    0    0    0    0    0    0    0    0    0  \n",
              "11    0    0    0    0    0    0    0    0    0    0  \n",
              "12    0    0    0    0    0    0    0    0    0    0  \n",
              "13    0    0    0    0    0    0    0    0    0    0  \n",
              "14    0    0    0    0    0    0    0    0    0    0  \n",
              "\n",
              "[15 rows x 29 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-51dbd1a5-1f8a-42cc-8d68-6ccbbb8782a5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>F1</th>\n",
              "      <th>F2</th>\n",
              "      <th>F3</th>\n",
              "      <th>F4</th>\n",
              "      <th>F5</th>\n",
              "      <th>F6</th>\n",
              "      <th>F7</th>\n",
              "      <th>F8</th>\n",
              "      <th>F9</th>\n",
              "      <th>...</th>\n",
              "      <th>F19</th>\n",
              "      <th>F20</th>\n",
              "      <th>F21</th>\n",
              "      <th>F22</th>\n",
              "      <th>F23</th>\n",
              "      <th>F24</th>\n",
              "      <th>F25</th>\n",
              "      <th>F26</th>\n",
              "      <th>F27</th>\n",
              "      <th>F28</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>HOBBIES_1_001_CA_1_validation</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>HOBBIES_1_002_CA_1_validation</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>HOBBIES_1_003_CA_1_validation</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>HOBBIES_1_004_CA_1_validation</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>HOBBIES_1_005_CA_1_validation</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>HOBBIES_1_006_CA_1_validation</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>HOBBIES_1_007_CA_1_validation</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>HOBBIES_1_008_CA_1_validation</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>HOBBIES_1_009_CA_1_validation</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>HOBBIES_1_010_CA_1_validation</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>HOBBIES_1_011_CA_1_validation</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>HOBBIES_1_012_CA_1_validation</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>HOBBIES_1_013_CA_1_validation</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>HOBBIES_1_014_CA_1_validation</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>HOBBIES_1_015_CA_1_validation</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>15 rows × 29 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-51dbd1a5-1f8a-42cc-8d68-6ccbbb8782a5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-51dbd1a5-1f8a-42cc-8d68-6ccbbb8782a5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-51dbd1a5-1f8a-42cc-8d68-6ccbbb8782a5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9e56a27d-bc3d-4375-be81-fa73c2b9e82f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9e56a27d-bc3d-4375-be81-fa73c2b9e82f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9e56a27d-bc3d-4375-be81-fa73c2b9e82f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfidk"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2015-2016"
      ],
      "metadata": {
        "id": "yX9lZai7RIg9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fifteen=df2.loc[df2['year'] >= 2015]"
      ],
      "metadata": {
        "id": "yd14NUuWN9DU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fifteen.head(15)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 520
        },
        "id": "1cTBMsb8SxjU",
        "outputId": "0a24ec63-ef57-4fb6-d6a2-b5f99592ff1a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            date  wm_yr_wk    weekday  wday  month  year       d  \\\n",
              "1433  2015-01-01     11448   Thursday     6      1  2015  d_1434   \n",
              "1434  2015-01-02     11448     Friday     7      1  2015  d_1435   \n",
              "1435  2015-01-03     11449   Saturday     1      1  2015  d_1436   \n",
              "1436  2015-01-04     11449     Sunday     2      1  2015  d_1437   \n",
              "1437  2015-01-05     11449     Monday     3      1  2015  d_1438   \n",
              "1438  2015-01-06     11449    Tuesday     4      1  2015  d_1439   \n",
              "1439  2015-01-07     11449  Wednesday     5      1  2015  d_1440   \n",
              "1440  2015-01-08     11449   Thursday     6      1  2015  d_1441   \n",
              "1441  2015-01-09     11449     Friday     7      1  2015  d_1442   \n",
              "1442  2015-01-10     11450   Saturday     1      1  2015  d_1443   \n",
              "1443  2015-01-11     11450     Sunday     2      1  2015  d_1444   \n",
              "1444  2015-01-12     11450     Monday     3      1  2015  d_1445   \n",
              "1445  2015-01-13     11450    Tuesday     4      1  2015  d_1446   \n",
              "1446  2015-01-14     11450  Wednesday     5      1  2015  d_1447   \n",
              "1447  2015-01-15     11450   Thursday     6      1  2015  d_1448   \n",
              "\n",
              "           event_name_1 event_type_1 event_name_2 event_type_2  snap_CA  \\\n",
              "1433            NewYear     National          NaN          NaN        1   \n",
              "1434                NaN          NaN          NaN          NaN        1   \n",
              "1435                NaN          NaN          NaN          NaN        1   \n",
              "1436                NaN          NaN          NaN          NaN        1   \n",
              "1437                NaN          NaN          NaN          NaN        1   \n",
              "1438                NaN          NaN          NaN          NaN        1   \n",
              "1439  OrthodoxChristmas    Religious          NaN          NaN        1   \n",
              "1440                NaN          NaN          NaN          NaN        1   \n",
              "1441                NaN          NaN          NaN          NaN        1   \n",
              "1442                NaN          NaN          NaN          NaN        1   \n",
              "1443                NaN          NaN          NaN          NaN        0   \n",
              "1444                NaN          NaN          NaN          NaN        0   \n",
              "1445                NaN          NaN          NaN          NaN        0   \n",
              "1446                NaN          NaN          NaN          NaN        0   \n",
              "1447                NaN          NaN          NaN          NaN        0   \n",
              "\n",
              "      snap_TX  snap_WI  \n",
              "1433        1        0  \n",
              "1434        0        1  \n",
              "1435        1        1  \n",
              "1436        0        0  \n",
              "1437        1        1  \n",
              "1438        1        1  \n",
              "1439        1        0  \n",
              "1440        0        1  \n",
              "1441        1        1  \n",
              "1442        0        0  \n",
              "1443        1        1  \n",
              "1444        1        1  \n",
              "1445        1        0  \n",
              "1446        0        1  \n",
              "1447        1        1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4f204c4f-4cb3-42fa-99b2-a07b5ac428cb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>wm_yr_wk</th>\n",
              "      <th>weekday</th>\n",
              "      <th>wday</th>\n",
              "      <th>month</th>\n",
              "      <th>year</th>\n",
              "      <th>d</th>\n",
              "      <th>event_name_1</th>\n",
              "      <th>event_type_1</th>\n",
              "      <th>event_name_2</th>\n",
              "      <th>event_type_2</th>\n",
              "      <th>snap_CA</th>\n",
              "      <th>snap_TX</th>\n",
              "      <th>snap_WI</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1433</th>\n",
              "      <td>2015-01-01</td>\n",
              "      <td>11448</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1434</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1434</th>\n",
              "      <td>2015-01-02</td>\n",
              "      <td>11448</td>\n",
              "      <td>Friday</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1435</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1435</th>\n",
              "      <td>2015-01-03</td>\n",
              "      <td>11449</td>\n",
              "      <td>Saturday</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1436</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1436</th>\n",
              "      <td>2015-01-04</td>\n",
              "      <td>11449</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1437</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1437</th>\n",
              "      <td>2015-01-05</td>\n",
              "      <td>11449</td>\n",
              "      <td>Monday</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1438</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1438</th>\n",
              "      <td>2015-01-06</td>\n",
              "      <td>11449</td>\n",
              "      <td>Tuesday</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1439</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1439</th>\n",
              "      <td>2015-01-07</td>\n",
              "      <td>11449</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1440</td>\n",
              "      <td>OrthodoxChristmas</td>\n",
              "      <td>Religious</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1440</th>\n",
              "      <td>2015-01-08</td>\n",
              "      <td>11449</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1441</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1441</th>\n",
              "      <td>2015-01-09</td>\n",
              "      <td>11449</td>\n",
              "      <td>Friday</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1442</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1442</th>\n",
              "      <td>2015-01-10</td>\n",
              "      <td>11450</td>\n",
              "      <td>Saturday</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1443</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1443</th>\n",
              "      <td>2015-01-11</td>\n",
              "      <td>11450</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1444</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1444</th>\n",
              "      <td>2015-01-12</td>\n",
              "      <td>11450</td>\n",
              "      <td>Monday</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1445</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1445</th>\n",
              "      <td>2015-01-13</td>\n",
              "      <td>11450</td>\n",
              "      <td>Tuesday</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1446</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1446</th>\n",
              "      <td>2015-01-14</td>\n",
              "      <td>11450</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1447</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1447</th>\n",
              "      <td>2015-01-15</td>\n",
              "      <td>11450</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1448</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4f204c4f-4cb3-42fa-99b2-a07b5ac428cb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4f204c4f-4cb3-42fa-99b2-a07b5ac428cb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4f204c4f-4cb3-42fa-99b2-a07b5ac428cb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b12140f4-da5b-488c-a4f5-e49e54c5d975\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b12140f4-da5b-488c-a4f5-e49e54c5d975')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b12140f4-da5b-488c-a4f5-e49e54c5d975 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "fifteen",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Special events in 2015-2016**"
      ],
      "metadata": {
        "id": "pHZPFYnvSfSc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "special_events_15=fifteen.dropna(subset=['event_name_1'])"
      ],
      "metadata": {
        "id": "6yIIzHYpSWRc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "special_events_15"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "UDhWxbNxUije",
        "outputId": "aa99a9ed-78c8-4cf5-e54f-4b377c960895"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            date  wm_yr_wk    weekday  wday  month  year       d  \\\n",
              "1433  2015-01-01     11448   Thursday     6      1  2015  d_1434   \n",
              "1439  2015-01-07     11449  Wednesday     5      1  2015  d_1440   \n",
              "1451  2015-01-19     11451     Monday     3      1  2015  d_1452   \n",
              "1464  2015-02-01     11501     Sunday     2      2  2015  d_1465   \n",
              "1477  2015-02-14     11503   Saturday     1      2  2015  d_1478   \n",
              "1479  2015-02-16     11503     Monday     3      2  2015  d_1480   \n",
              "1481  2015-02-18     11503  Wednesday     5      2  2015  d_1482   \n",
              "1488  2015-02-25     11504  Wednesday     5      2  2015  d_1489   \n",
              "1496  2015-03-05     11505   Thursday     6      3  2015  d_1497   \n",
              "1508  2015-03-17     11507    Tuesday     4      3  2015  d_1509   \n",
              "1527  2015-04-05     11510     Sunday     2      4  2015  d_1528   \n",
              "1533  2015-04-11     11511   Saturday     1      4  2015  d_1534   \n",
              "1534  2015-04-12     11511     Sunday     2      4  2015  d_1535   \n",
              "1557  2015-05-05     11514    Tuesday     4      5  2015  d_1558   \n",
              "1562  2015-05-10     11515     Sunday     2      5  2015  d_1563   \n",
              "1577  2015-05-25     11517     Monday     3      5  2015  d_1578   \n",
              "1587  2015-06-04     11518   Thursday     6      6  2015  d_1588   \n",
              "1599  2015-06-16     11520    Tuesday     4      6  2015  d_1600   \n",
              "1601  2015-06-18     11520   Thursday     6      6  2015  d_1602   \n",
              "1604  2015-06-21     11521     Sunday     2      6  2015  d_1605   \n",
              "1617  2015-07-04     11523   Saturday     1      7  2015  d_1618   \n",
              "1631  2015-07-18     11525   Saturday     1      7  2015  d_1632   \n",
              "1682  2015-09-07     11532     Monday     3      9  2015  d_1683   \n",
              "1699  2015-09-24     11534   Thursday     6      9  2015  d_1700   \n",
              "1717  2015-10-12     11537     Monday     3     10  2015  d_1718   \n",
              "1736  2015-10-31     11540   Saturday     1     10  2015  d_1737   \n",
              "1747  2015-11-11     11541  Wednesday     5     11  2015  d_1748   \n",
              "1762  2015-11-26     11543   Thursday     6     11  2015  d_1763   \n",
              "1780  2015-12-14     11546     Monday     3     12  2015  d_1781   \n",
              "1791  2015-12-25     11547     Friday     7     12  2015  d_1792   \n",
              "1798  2016-01-01     11548     Friday     7      1  2016  d_1799   \n",
              "1804  2016-01-07     11549   Thursday     6      1  2016  d_1805   \n",
              "1815  2016-01-18     11551     Monday     3      1  2016  d_1816   \n",
              "1835  2016-02-07     11602     Sunday     2      2  2016  d_1836   \n",
              "1838  2016-02-10     11602  Wednesday     5      2  2016  d_1839   \n",
              "1842  2016-02-14     11603     Sunday     2      2  2016  d_1843   \n",
              "1843  2016-02-15     11603     Monday     3      2  2016  d_1844   \n",
              "1845  2016-02-17     11603  Wednesday     5      2  2016  d_1846   \n",
              "1874  2016-03-17     11607   Thursday     6      3  2016  d_1875   \n",
              "1881  2016-03-24     11608   Thursday     6      3  2016  d_1882   \n",
              "1884  2016-03-27     11609     Sunday     2      3  2016  d_1885   \n",
              "1918  2016-04-30     11614   Saturday     1      4  2016  d_1919   \n",
              "1919  2016-05-01     11614     Sunday     2      5  2016  d_1920   \n",
              "1923  2016-05-05     11614   Thursday     6      5  2016  d_1924   \n",
              "1926  2016-05-08     11615     Sunday     2      5  2016  d_1927   \n",
              "1948  2016-05-30     11618     Monday     3      5  2016  d_1949   \n",
              "1951  2016-06-02     11618   Thursday     6      6  2016  d_1952   \n",
              "1956  2016-06-07     11619    Tuesday     4      6  2016  d_1957   \n",
              "1968  2016-06-19     11621     Sunday     2      6  2016  d_1969   \n",
              "\n",
              "             event_name_1 event_type_1  event_name_2 event_type_2  snap_CA  \\\n",
              "1433              NewYear     National           NaN          NaN        1   \n",
              "1439    OrthodoxChristmas    Religious           NaN          NaN        1   \n",
              "1451  MartinLutherKingDay     National           NaN          NaN        0   \n",
              "1464            SuperBowl     Sporting           NaN          NaN        1   \n",
              "1477        ValentinesDay     Cultural           NaN          NaN        0   \n",
              "1479        PresidentsDay     National           NaN          NaN        0   \n",
              "1481            LentStart    Religious           NaN          NaN        0   \n",
              "1488            LentWeek2    Religious           NaN          NaN        0   \n",
              "1496            Purim End    Religious           NaN          NaN        1   \n",
              "1508        StPatricksDay     Cultural           NaN          NaN        0   \n",
              "1527               Easter     Cultural           NaN          NaN        1   \n",
              "1533           Pesach End    Religious           NaN          NaN        0   \n",
              "1534       OrthodoxEaster    Religious           NaN          NaN        0   \n",
              "1557        Cinco De Mayo     Cultural           NaN          NaN        1   \n",
              "1562         Mother's day     Cultural           NaN          NaN        1   \n",
              "1577          MemorialDay     National           NaN          NaN        0   \n",
              "1587       NBAFinalsStart     Sporting           NaN          NaN        1   \n",
              "1599         NBAFinalsEnd     Sporting           NaN          NaN        0   \n",
              "1601       Ramadan starts    Religious           NaN          NaN        0   \n",
              "1604         Father's day     Cultural           NaN          NaN        0   \n",
              "1617      IndependenceDay     National           NaN          NaN        1   \n",
              "1631          Eid al-Fitr    Religious           NaN          NaN        0   \n",
              "1682             LaborDay     National           NaN          NaN        1   \n",
              "1699            EidAlAdha    Religious           NaN          NaN        0   \n",
              "1717          ColumbusDay     National           NaN          NaN        0   \n",
              "1736            Halloween     Cultural           NaN          NaN        0   \n",
              "1747          VeteransDay     National           NaN          NaN        0   \n",
              "1762         Thanksgiving     National           NaN          NaN        0   \n",
              "1780         Chanukah End    Religious           NaN          NaN        0   \n",
              "1791            Christmas     National           NaN          NaN        0   \n",
              "1798              NewYear     National           NaN          NaN        1   \n",
              "1804    OrthodoxChristmas    Religious           NaN          NaN        1   \n",
              "1815  MartinLutherKingDay     National           NaN          NaN        0   \n",
              "1835            SuperBowl     Sporting           NaN          NaN        1   \n",
              "1838            LentStart    Religious           NaN          NaN        1   \n",
              "1842        ValentinesDay     Cultural           NaN          NaN        0   \n",
              "1843        PresidentsDay     National           NaN          NaN        0   \n",
              "1845            LentWeek2    Religious           NaN          NaN        0   \n",
              "1874        StPatricksDay     Cultural           NaN          NaN        0   \n",
              "1881            Purim End    Religious           NaN          NaN        0   \n",
              "1884               Easter     Cultural           NaN          NaN        0   \n",
              "1918           Pesach End    Religious           NaN          NaN        0   \n",
              "1919       OrthodoxEaster    Religious           NaN          NaN        1   \n",
              "1923        Cinco De Mayo     Cultural           NaN          NaN        1   \n",
              "1926         Mother's day     Cultural           NaN          NaN        1   \n",
              "1948          MemorialDay     National           NaN          NaN        0   \n",
              "1951       NBAFinalsStart     Sporting           NaN          NaN        1   \n",
              "1956       Ramadan starts    Religious           NaN          NaN        1   \n",
              "1968         NBAFinalsEnd     Sporting  Father's day     Cultural        0   \n",
              "\n",
              "      snap_TX  snap_WI  \n",
              "1433        1        0  \n",
              "1439        1        0  \n",
              "1451        0        0  \n",
              "1464        1        0  \n",
              "1477        0        1  \n",
              "1479        0        0  \n",
              "1481        0        0  \n",
              "1488        0        0  \n",
              "1496        1        1  \n",
              "1508        0        0  \n",
              "1527        1        1  \n",
              "1533        1        1  \n",
              "1534        1        1  \n",
              "1557        1        1  \n",
              "1562        0        0  \n",
              "1577        0        0  \n",
              "1587        0        0  \n",
              "1599        0        0  \n",
              "1601        0        0  \n",
              "1604        0        0  \n",
              "1617        0        0  \n",
              "1631        0        0  \n",
              "1682        1        0  \n",
              "1699        0        0  \n",
              "1717        1        1  \n",
              "1736        0        0  \n",
              "1747        1        1  \n",
              "1762        0        0  \n",
              "1780        0        1  \n",
              "1791        0        0  \n",
              "1798        1        0  \n",
              "1804        1        0  \n",
              "1815        0        0  \n",
              "1835        1        0  \n",
              "1838        0        0  \n",
              "1842        0        1  \n",
              "1843        1        1  \n",
              "1845        0        0  \n",
              "1874        0        0  \n",
              "1881        0        0  \n",
              "1884        0        0  \n",
              "1918        0        0  \n",
              "1919        1        0  \n",
              "1923        1        1  \n",
              "1926        0        1  \n",
              "1948        0        0  \n",
              "1951        0        1  \n",
              "1956        1        0  \n",
              "1968        0        0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-49783f3c-6fe1-4b32-9ad6-dbd5e2e3ff69\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>wm_yr_wk</th>\n",
              "      <th>weekday</th>\n",
              "      <th>wday</th>\n",
              "      <th>month</th>\n",
              "      <th>year</th>\n",
              "      <th>d</th>\n",
              "      <th>event_name_1</th>\n",
              "      <th>event_type_1</th>\n",
              "      <th>event_name_2</th>\n",
              "      <th>event_type_2</th>\n",
              "      <th>snap_CA</th>\n",
              "      <th>snap_TX</th>\n",
              "      <th>snap_WI</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1433</th>\n",
              "      <td>2015-01-01</td>\n",
              "      <td>11448</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1434</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1439</th>\n",
              "      <td>2015-01-07</td>\n",
              "      <td>11449</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1440</td>\n",
              "      <td>OrthodoxChristmas</td>\n",
              "      <td>Religious</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1451</th>\n",
              "      <td>2015-01-19</td>\n",
              "      <td>11451</td>\n",
              "      <td>Monday</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1452</td>\n",
              "      <td>MartinLutherKingDay</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1464</th>\n",
              "      <td>2015-02-01</td>\n",
              "      <td>11501</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1465</td>\n",
              "      <td>SuperBowl</td>\n",
              "      <td>Sporting</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1477</th>\n",
              "      <td>2015-02-14</td>\n",
              "      <td>11503</td>\n",
              "      <td>Saturday</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1478</td>\n",
              "      <td>ValentinesDay</td>\n",
              "      <td>Cultural</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1479</th>\n",
              "      <td>2015-02-16</td>\n",
              "      <td>11503</td>\n",
              "      <td>Monday</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1480</td>\n",
              "      <td>PresidentsDay</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1481</th>\n",
              "      <td>2015-02-18</td>\n",
              "      <td>11503</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1482</td>\n",
              "      <td>LentStart</td>\n",
              "      <td>Religious</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1488</th>\n",
              "      <td>2015-02-25</td>\n",
              "      <td>11504</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1489</td>\n",
              "      <td>LentWeek2</td>\n",
              "      <td>Religious</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1496</th>\n",
              "      <td>2015-03-05</td>\n",
              "      <td>11505</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1497</td>\n",
              "      <td>Purim End</td>\n",
              "      <td>Religious</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1508</th>\n",
              "      <td>2015-03-17</td>\n",
              "      <td>11507</td>\n",
              "      <td>Tuesday</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1509</td>\n",
              "      <td>StPatricksDay</td>\n",
              "      <td>Cultural</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1527</th>\n",
              "      <td>2015-04-05</td>\n",
              "      <td>11510</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1528</td>\n",
              "      <td>Easter</td>\n",
              "      <td>Cultural</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1533</th>\n",
              "      <td>2015-04-11</td>\n",
              "      <td>11511</td>\n",
              "      <td>Saturday</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1534</td>\n",
              "      <td>Pesach End</td>\n",
              "      <td>Religious</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1534</th>\n",
              "      <td>2015-04-12</td>\n",
              "      <td>11511</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1535</td>\n",
              "      <td>OrthodoxEaster</td>\n",
              "      <td>Religious</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1557</th>\n",
              "      <td>2015-05-05</td>\n",
              "      <td>11514</td>\n",
              "      <td>Tuesday</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1558</td>\n",
              "      <td>Cinco De Mayo</td>\n",
              "      <td>Cultural</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1562</th>\n",
              "      <td>2015-05-10</td>\n",
              "      <td>11515</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1563</td>\n",
              "      <td>Mother's day</td>\n",
              "      <td>Cultural</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1577</th>\n",
              "      <td>2015-05-25</td>\n",
              "      <td>11517</td>\n",
              "      <td>Monday</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1578</td>\n",
              "      <td>MemorialDay</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1587</th>\n",
              "      <td>2015-06-04</td>\n",
              "      <td>11518</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1588</td>\n",
              "      <td>NBAFinalsStart</td>\n",
              "      <td>Sporting</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1599</th>\n",
              "      <td>2015-06-16</td>\n",
              "      <td>11520</td>\n",
              "      <td>Tuesday</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1600</td>\n",
              "      <td>NBAFinalsEnd</td>\n",
              "      <td>Sporting</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1601</th>\n",
              "      <td>2015-06-18</td>\n",
              "      <td>11520</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1602</td>\n",
              "      <td>Ramadan starts</td>\n",
              "      <td>Religious</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1604</th>\n",
              "      <td>2015-06-21</td>\n",
              "      <td>11521</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1605</td>\n",
              "      <td>Father's day</td>\n",
              "      <td>Cultural</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1617</th>\n",
              "      <td>2015-07-04</td>\n",
              "      <td>11523</td>\n",
              "      <td>Saturday</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1618</td>\n",
              "      <td>IndependenceDay</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1631</th>\n",
              "      <td>2015-07-18</td>\n",
              "      <td>11525</td>\n",
              "      <td>Saturday</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1632</td>\n",
              "      <td>Eid al-Fitr</td>\n",
              "      <td>Religious</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1682</th>\n",
              "      <td>2015-09-07</td>\n",
              "      <td>11532</td>\n",
              "      <td>Monday</td>\n",
              "      <td>3</td>\n",
              "      <td>9</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1683</td>\n",
              "      <td>LaborDay</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1699</th>\n",
              "      <td>2015-09-24</td>\n",
              "      <td>11534</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>9</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1700</td>\n",
              "      <td>EidAlAdha</td>\n",
              "      <td>Religious</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1717</th>\n",
              "      <td>2015-10-12</td>\n",
              "      <td>11537</td>\n",
              "      <td>Monday</td>\n",
              "      <td>3</td>\n",
              "      <td>10</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1718</td>\n",
              "      <td>ColumbusDay</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1736</th>\n",
              "      <td>2015-10-31</td>\n",
              "      <td>11540</td>\n",
              "      <td>Saturday</td>\n",
              "      <td>1</td>\n",
              "      <td>10</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1737</td>\n",
              "      <td>Halloween</td>\n",
              "      <td>Cultural</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1747</th>\n",
              "      <td>2015-11-11</td>\n",
              "      <td>11541</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>5</td>\n",
              "      <td>11</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1748</td>\n",
              "      <td>VeteransDay</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1762</th>\n",
              "      <td>2015-11-26</td>\n",
              "      <td>11543</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>11</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1763</td>\n",
              "      <td>Thanksgiving</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1780</th>\n",
              "      <td>2015-12-14</td>\n",
              "      <td>11546</td>\n",
              "      <td>Monday</td>\n",
              "      <td>3</td>\n",
              "      <td>12</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1781</td>\n",
              "      <td>Chanukah End</td>\n",
              "      <td>Religious</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1791</th>\n",
              "      <td>2015-12-25</td>\n",
              "      <td>11547</td>\n",
              "      <td>Friday</td>\n",
              "      <td>7</td>\n",
              "      <td>12</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1792</td>\n",
              "      <td>Christmas</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1798</th>\n",
              "      <td>2016-01-01</td>\n",
              "      <td>11548</td>\n",
              "      <td>Friday</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1799</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1804</th>\n",
              "      <td>2016-01-07</td>\n",
              "      <td>11549</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1805</td>\n",
              "      <td>OrthodoxChristmas</td>\n",
              "      <td>Religious</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1815</th>\n",
              "      <td>2016-01-18</td>\n",
              "      <td>11551</td>\n",
              "      <td>Monday</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1816</td>\n",
              "      <td>MartinLutherKingDay</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1835</th>\n",
              "      <td>2016-02-07</td>\n",
              "      <td>11602</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1836</td>\n",
              "      <td>SuperBowl</td>\n",
              "      <td>Sporting</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1838</th>\n",
              "      <td>2016-02-10</td>\n",
              "      <td>11602</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1839</td>\n",
              "      <td>LentStart</td>\n",
              "      <td>Religious</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1842</th>\n",
              "      <td>2016-02-14</td>\n",
              "      <td>11603</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1843</td>\n",
              "      <td>ValentinesDay</td>\n",
              "      <td>Cultural</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1843</th>\n",
              "      <td>2016-02-15</td>\n",
              "      <td>11603</td>\n",
              "      <td>Monday</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1844</td>\n",
              "      <td>PresidentsDay</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1845</th>\n",
              "      <td>2016-02-17</td>\n",
              "      <td>11603</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1846</td>\n",
              "      <td>LentWeek2</td>\n",
              "      <td>Religious</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1874</th>\n",
              "      <td>2016-03-17</td>\n",
              "      <td>11607</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1875</td>\n",
              "      <td>StPatricksDay</td>\n",
              "      <td>Cultural</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1881</th>\n",
              "      <td>2016-03-24</td>\n",
              "      <td>11608</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1882</td>\n",
              "      <td>Purim End</td>\n",
              "      <td>Religious</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1884</th>\n",
              "      <td>2016-03-27</td>\n",
              "      <td>11609</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1885</td>\n",
              "      <td>Easter</td>\n",
              "      <td>Cultural</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1918</th>\n",
              "      <td>2016-04-30</td>\n",
              "      <td>11614</td>\n",
              "      <td>Saturday</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1919</td>\n",
              "      <td>Pesach End</td>\n",
              "      <td>Religious</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1919</th>\n",
              "      <td>2016-05-01</td>\n",
              "      <td>11614</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1920</td>\n",
              "      <td>OrthodoxEaster</td>\n",
              "      <td>Religious</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1923</th>\n",
              "      <td>2016-05-05</td>\n",
              "      <td>11614</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1924</td>\n",
              "      <td>Cinco De Mayo</td>\n",
              "      <td>Cultural</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1926</th>\n",
              "      <td>2016-05-08</td>\n",
              "      <td>11615</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1927</td>\n",
              "      <td>Mother's day</td>\n",
              "      <td>Cultural</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1948</th>\n",
              "      <td>2016-05-30</td>\n",
              "      <td>11618</td>\n",
              "      <td>Monday</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1949</td>\n",
              "      <td>MemorialDay</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1951</th>\n",
              "      <td>2016-06-02</td>\n",
              "      <td>11618</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1952</td>\n",
              "      <td>NBAFinalsStart</td>\n",
              "      <td>Sporting</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1956</th>\n",
              "      <td>2016-06-07</td>\n",
              "      <td>11619</td>\n",
              "      <td>Tuesday</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1957</td>\n",
              "      <td>Ramadan starts</td>\n",
              "      <td>Religious</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1968</th>\n",
              "      <td>2016-06-19</td>\n",
              "      <td>11621</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1969</td>\n",
              "      <td>NBAFinalsEnd</td>\n",
              "      <td>Sporting</td>\n",
              "      <td>Father's day</td>\n",
              "      <td>Cultural</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-49783f3c-6fe1-4b32-9ad6-dbd5e2e3ff69')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-49783f3c-6fe1-4b32-9ad6-dbd5e2e3ff69 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-49783f3c-6fe1-4b32-9ad6-dbd5e2e3ff69');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a5a02fa7-6e03-44b0-ba74-93bf2b723f70\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a5a02fa7-6e03-44b0-ba74-93bf2b723f70')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a5a02fa7-6e03-44b0-ba74-93bf2b723f70 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_61bb5b7d-80f2-40d8-b204-22200f886c75\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('special_events_15')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_61bb5b7d-80f2-40d8-b204-22200f886c75 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('special_events_15');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "special_events_15",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***What type of events seem to get the largest sales***"
      ],
      "metadata": {
        "id": "IfHXWuNcUvc1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df4=pd.read_csv('sales_train_evaluation.csv.zip')"
      ],
      "metadata": {
        "id": "sWhxZHniTTq3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df4"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 444
        },
        "id": "pfKtvciVVvct",
        "outputId": "319752a0-f15d-4996-b8cf-a566ea206276"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                  id        item_id    dept_id   cat_id  \\\n",
              "0      HOBBIES_1_001_CA_1_evaluation  HOBBIES_1_001  HOBBIES_1  HOBBIES   \n",
              "1      HOBBIES_1_002_CA_1_evaluation  HOBBIES_1_002  HOBBIES_1  HOBBIES   \n",
              "2      HOBBIES_1_003_CA_1_evaluation  HOBBIES_1_003  HOBBIES_1  HOBBIES   \n",
              "3      HOBBIES_1_004_CA_1_evaluation  HOBBIES_1_004  HOBBIES_1  HOBBIES   \n",
              "4      HOBBIES_1_005_CA_1_evaluation  HOBBIES_1_005  HOBBIES_1  HOBBIES   \n",
              "...                              ...            ...        ...      ...   \n",
              "30485    FOODS_3_823_WI_3_evaluation    FOODS_3_823    FOODS_3    FOODS   \n",
              "30486    FOODS_3_824_WI_3_evaluation    FOODS_3_824    FOODS_3    FOODS   \n",
              "30487    FOODS_3_825_WI_3_evaluation    FOODS_3_825    FOODS_3    FOODS   \n",
              "30488    FOODS_3_826_WI_3_evaluation    FOODS_3_826    FOODS_3    FOODS   \n",
              "30489    FOODS_3_827_WI_3_evaluation    FOODS_3_827    FOODS_3    FOODS   \n",
              "\n",
              "      store_id state_id  d_1  d_2  d_3  d_4  ...  d_1932  d_1933  d_1934  \\\n",
              "0         CA_1       CA    0    0    0    0  ...       2       4       0   \n",
              "1         CA_1       CA    0    0    0    0  ...       0       1       2   \n",
              "2         CA_1       CA    0    0    0    0  ...       1       0       2   \n",
              "3         CA_1       CA    0    0    0    0  ...       1       1       0   \n",
              "4         CA_1       CA    0    0    0    0  ...       0       0       0   \n",
              "...        ...      ...  ...  ...  ...  ...  ...     ...     ...     ...   \n",
              "30485     WI_3       WI    0    0    2    2  ...       1       0       3   \n",
              "30486     WI_3       WI    0    0    0    0  ...       0       0       0   \n",
              "30487     WI_3       WI    0    6    0    2  ...       0       0       1   \n",
              "30488     WI_3       WI    0    0    0    0  ...       1       1       1   \n",
              "30489     WI_3       WI    0    0    0    0  ...       1       2       0   \n",
              "\n",
              "       d_1935  d_1936  d_1937  d_1938  d_1939  d_1940  d_1941  \n",
              "0           0       0       0       3       3       0       1  \n",
              "1           1       1       0       0       0       0       0  \n",
              "2           0       0       0       2       3       0       1  \n",
              "3           4       0       1       3       0       2       6  \n",
              "4           2       1       0       0       2       1       0  \n",
              "...       ...     ...     ...     ...     ...     ...     ...  \n",
              "30485       0       1       1       0       0       1       1  \n",
              "30486       0       0       0       1       0       1       0  \n",
              "30487       2       0       1       0       1       0       2  \n",
              "30488       4       6       0       1       1       1       0  \n",
              "30489       5       4       0       2       2       5       1  \n",
              "\n",
              "[30490 rows x 1947 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-299c2c2c-d03a-4443-805e-8fdf0fe35873\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>item_id</th>\n",
              "      <th>dept_id</th>\n",
              "      <th>cat_id</th>\n",
              "      <th>store_id</th>\n",
              "      <th>state_id</th>\n",
              "      <th>d_1</th>\n",
              "      <th>d_2</th>\n",
              "      <th>d_3</th>\n",
              "      <th>d_4</th>\n",
              "      <th>...</th>\n",
              "      <th>d_1932</th>\n",
              "      <th>d_1933</th>\n",
              "      <th>d_1934</th>\n",
              "      <th>d_1935</th>\n",
              "      <th>d_1936</th>\n",
              "      <th>d_1937</th>\n",
              "      <th>d_1938</th>\n",
              "      <th>d_1939</th>\n",
              "      <th>d_1940</th>\n",
              "      <th>d_1941</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>HOBBIES_1_001_CA_1_evaluation</td>\n",
              "      <td>HOBBIES_1_001</td>\n",
              "      <td>HOBBIES_1</td>\n",
              "      <td>HOBBIES</td>\n",
              "      <td>CA_1</td>\n",
              "      <td>CA</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>HOBBIES_1_002_CA_1_evaluation</td>\n",
              "      <td>HOBBIES_1_002</td>\n",
              "      <td>HOBBIES_1</td>\n",
              "      <td>HOBBIES</td>\n",
              "      <td>CA_1</td>\n",
              "      <td>CA</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>HOBBIES_1_003_CA_1_evaluation</td>\n",
              "      <td>HOBBIES_1_003</td>\n",
              "      <td>HOBBIES_1</td>\n",
              "      <td>HOBBIES</td>\n",
              "      <td>CA_1</td>\n",
              "      <td>CA</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>HOBBIES_1_004_CA_1_evaluation</td>\n",
              "      <td>HOBBIES_1_004</td>\n",
              "      <td>HOBBIES_1</td>\n",
              "      <td>HOBBIES</td>\n",
              "      <td>CA_1</td>\n",
              "      <td>CA</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>HOBBIES_1_005_CA_1_evaluation</td>\n",
              "      <td>HOBBIES_1_005</td>\n",
              "      <td>HOBBIES_1</td>\n",
              "      <td>HOBBIES</td>\n",
              "      <td>CA_1</td>\n",
              "      <td>CA</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30485</th>\n",
              "      <td>FOODS_3_823_WI_3_evaluation</td>\n",
              "      <td>FOODS_3_823</td>\n",
              "      <td>FOODS_3</td>\n",
              "      <td>FOODS</td>\n",
              "      <td>WI_3</td>\n",
              "      <td>WI</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30486</th>\n",
              "      <td>FOODS_3_824_WI_3_evaluation</td>\n",
              "      <td>FOODS_3_824</td>\n",
              "      <td>FOODS_3</td>\n",
              "      <td>FOODS</td>\n",
              "      <td>WI_3</td>\n",
              "      <td>WI</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30487</th>\n",
              "      <td>FOODS_3_825_WI_3_evaluation</td>\n",
              "      <td>FOODS_3_825</td>\n",
              "      <td>FOODS_3</td>\n",
              "      <td>FOODS</td>\n",
              "      <td>WI_3</td>\n",
              "      <td>WI</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30488</th>\n",
              "      <td>FOODS_3_826_WI_3_evaluation</td>\n",
              "      <td>FOODS_3_826</td>\n",
              "      <td>FOODS_3</td>\n",
              "      <td>FOODS</td>\n",
              "      <td>WI_3</td>\n",
              "      <td>WI</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30489</th>\n",
              "      <td>FOODS_3_827_WI_3_evaluation</td>\n",
              "      <td>FOODS_3_827</td>\n",
              "      <td>FOODS_3</td>\n",
              "      <td>FOODS</td>\n",
              "      <td>WI_3</td>\n",
              "      <td>WI</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>30490 rows × 1947 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-299c2c2c-d03a-4443-805e-8fdf0fe35873')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-299c2c2c-d03a-4443-805e-8fdf0fe35873 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-299c2c2c-d03a-4443-805e-8fdf0fe35873');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7068a0cb-edf2-45a0-9ef1-359045e790fb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7068a0cb-edf2-45a0-9ef1-359045e790fb')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7068a0cb-edf2-45a0-9ef1-359045e790fb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_fceddc02-8341-4757-9347-95cde6fe9caf\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df4')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_fceddc02-8341-4757-9347-95cde6fe9caf button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df4');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df4"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sales_df=df4['item_id']"
      ],
      "metadata": {
        "id": "Q67ghDaGYtb9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "csag7aZZatlq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "most sold product in any category"
      ],
      "metadata": {
        "id": "kaKAQNHBWhCt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df4['sales']=df4.iloc[:,6:1947].sum(axis=1)"
      ],
      "metadata": {
        "id": "FoVQggvEWf_U"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df4.count()"
      ],
      "metadata": {
        "id": "_8x5aWvQckbo",
        "outputId": "bf6787e5-499a-43c5-997f-be46869945f5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id          30490\n",
              "item_id     30490\n",
              "dept_id     30490\n",
              "cat_id      30490\n",
              "store_id    30490\n",
              "            ...  \n",
              "d_1938      30490\n",
              "d_1939      30490\n",
              "d_1940      30490\n",
              "d_1941      30490\n",
              "sales       30490\n",
              "Length: 1948, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>id</th>\n",
              "      <td>30490</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>item_id</th>\n",
              "      <td>30490</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dept_id</th>\n",
              "      <td>30490</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cat_id</th>\n",
              "      <td>30490</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>store_id</th>\n",
              "      <td>30490</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>d_1938</th>\n",
              "      <td>30490</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>d_1939</th>\n",
              "      <td>30490</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>d_1940</th>\n",
              "      <td>30490</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>d_1941</th>\n",
              "      <td>30490</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sales</th>\n",
              "      <td>30490</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1948 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sales = df4[['item_id', 'sales']]"
      ],
      "metadata": {
        "id": "LLWYUganbMas"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "What are sales of each item on specific day?\n",
        "\n",
        "Are there any effects of special events?\n",
        "\n",
        "What is sales of sprots category item on an avergae day?\n",
        "\n",
        "What is sales of the same category item on sport event day\n",
        "\n",
        "What would be sales of new sales category item if its launched on average day?\n",
        "If its launched on sports event day  "
      ],
      "metadata": {
        "id": "1FDIuAgEjLKO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sales"
      ],
      "metadata": {
        "id": "hBZ5o61Lcm0f",
        "outputId": "4f9041ed-cebd-4562-a302-706a871e9acf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             item_id  sales\n",
              "0      HOBBIES_1_001    633\n",
              "1      HOBBIES_1_002    500\n",
              "2      HOBBIES_1_003    309\n",
              "3      HOBBIES_1_004   3337\n",
              "4      HOBBIES_1_005   1888\n",
              "...              ...    ...\n",
              "30485    FOODS_3_823   1040\n",
              "30486    FOODS_3_824    728\n",
              "30487    FOODS_3_825   1734\n",
              "30488    FOODS_3_826    739\n",
              "30489    FOODS_3_827   1364\n",
              "\n",
              "[30490 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5a652173-08b3-4be5-9700-6acd133c62db\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>item_id</th>\n",
              "      <th>sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>HOBBIES_1_001</td>\n",
              "      <td>633</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>HOBBIES_1_002</td>\n",
              "      <td>500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>HOBBIES_1_003</td>\n",
              "      <td>309</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>HOBBIES_1_004</td>\n",
              "      <td>3337</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>HOBBIES_1_005</td>\n",
              "      <td>1888</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30485</th>\n",
              "      <td>FOODS_3_823</td>\n",
              "      <td>1040</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30486</th>\n",
              "      <td>FOODS_3_824</td>\n",
              "      <td>728</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30487</th>\n",
              "      <td>FOODS_3_825</td>\n",
              "      <td>1734</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30488</th>\n",
              "      <td>FOODS_3_826</td>\n",
              "      <td>739</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30489</th>\n",
              "      <td>FOODS_3_827</td>\n",
              "      <td>1364</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>30490 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5a652173-08b3-4be5-9700-6acd133c62db')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5a652173-08b3-4be5-9700-6acd133c62db button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5a652173-08b3-4be5-9700-6acd133c62db');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-42ca2d11-6369-4ea6-acac-b63a00f2044e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-42ca2d11-6369-4ea6-acac-b63a00f2044e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-42ca2d11-6369-4ea6-acac-b63a00f2044e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_08f1b0a2-3519-45f4-97c7-6f67bc1be0c9\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('sales')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_08f1b0a2-3519-45f4-97c7-6f67bc1be0c9 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('sales');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "sales",
              "summary": "{\n  \"name\": \"sales\",\n  \"rows\": 30490,\n  \"fields\": [\n    {\n      \"column\": \"item_id\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3049,\n        \"samples\": [\n          \"HOUSEHOLD_2_422\",\n          \"FOODS_3_145\",\n          \"FOODS_2_135\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sales\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5290,\n        \"min\": 15,\n        \"max\": 253859,\n        \"num_unique_values\": 6777,\n        \"samples\": [\n          21203,\n          3230,\n          745\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "household_sales = sales[sales['item_id'].str.startswith('HOUSEHOLD')]\n",
        "household_sales\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "CFBn3R-PrzFS",
        "outputId": "37f454dc-930d-4606-b978-35004accfab2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               item_id  sales\n",
              "565    HOUSEHOLD_1_001    678\n",
              "566    HOUSEHOLD_1_002    540\n",
              "567    HOUSEHOLD_1_003   1122\n",
              "568    HOUSEHOLD_1_004   2639\n",
              "569    HOUSEHOLD_1_005   2322\n",
              "...                ...    ...\n",
              "29048  HOUSEHOLD_2_512    609\n",
              "29049  HOUSEHOLD_2_513    608\n",
              "29050  HOUSEHOLD_2_514    209\n",
              "29051  HOUSEHOLD_2_515    120\n",
              "29052  HOUSEHOLD_2_516    247\n",
              "\n",
              "[10470 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6e7e0916-62c5-4bd0-a40f-23c795e340ca\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>item_id</th>\n",
              "      <th>sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>565</th>\n",
              "      <td>HOUSEHOLD_1_001</td>\n",
              "      <td>678</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>566</th>\n",
              "      <td>HOUSEHOLD_1_002</td>\n",
              "      <td>540</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>567</th>\n",
              "      <td>HOUSEHOLD_1_003</td>\n",
              "      <td>1122</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>568</th>\n",
              "      <td>HOUSEHOLD_1_004</td>\n",
              "      <td>2639</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>569</th>\n",
              "      <td>HOUSEHOLD_1_005</td>\n",
              "      <td>2322</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29048</th>\n",
              "      <td>HOUSEHOLD_2_512</td>\n",
              "      <td>609</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29049</th>\n",
              "      <td>HOUSEHOLD_2_513</td>\n",
              "      <td>608</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29050</th>\n",
              "      <td>HOUSEHOLD_2_514</td>\n",
              "      <td>209</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29051</th>\n",
              "      <td>HOUSEHOLD_2_515</td>\n",
              "      <td>120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29052</th>\n",
              "      <td>HOUSEHOLD_2_516</td>\n",
              "      <td>247</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10470 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6e7e0916-62c5-4bd0-a40f-23c795e340ca')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6e7e0916-62c5-4bd0-a40f-23c795e340ca button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6e7e0916-62c5-4bd0-a40f-23c795e340ca');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-81ed5965-0448-42d9-ae23-d04c236272c3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-81ed5965-0448-42d9-ae23-d04c236272c3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-81ed5965-0448-42d9-ae23-d04c236272c3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_65dd1d75-e44c-449b-9447-8a6abd7f278f\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('household_sales')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_65dd1d75-e44c-449b-9447-8a6abd7f278f button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('household_sales');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "household_sales",
              "summary": "{\n  \"name\": \"household_sales\",\n  \"rows\": 10470,\n  \"fields\": [\n    {\n      \"column\": \"item_id\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1047,\n        \"samples\": [\n          \"HOUSEHOLD_1_360\",\n          \"HOUSEHOLD_2_029\",\n          \"HOUSEHOLD_2_344\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sales\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2511,\n        \"min\": 23,\n        \"max\": 44018,\n        \"num_unique_values\": 3342,\n        \"samples\": [\n          655,\n          2335,\n          457\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "household_sales[household_sales['sales'] == household_sales['sales'].max()]\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "YuWxUrLPpzik",
        "outputId": "3dce7f22-7d5a-46f5-a2c7-43785a239328"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              item_id  sales\n",
              "6776  HOUSEHOLD_1_118  44018"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1617764d-02c2-48df-9cc0-67ebe050c6cd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>item_id</th>\n",
              "      <th>sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>6776</th>\n",
              "      <td>HOUSEHOLD_1_118</td>\n",
              "      <td>44018</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1617764d-02c2-48df-9cc0-67ebe050c6cd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1617764d-02c2-48df-9cc0-67ebe050c6cd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1617764d-02c2-48df-9cc0-67ebe050c6cd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"household_sales[household_sales['sales'] == household_sales['sales']\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"item_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"HOUSEHOLD_1_118\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sales\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 44018,\n        \"max\": 44018,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          44018\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "household_1_118_records = df[df['item_id'] == 'HOUSEHOLD_1_118']\n",
        "\n",
        "household_1_118_records"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 412
        },
        "id": "Sp6ftPoPUEc0",
        "outputId": "ce7d8986-baed-4c32-a748-b6aa5bb017ad"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                    id          item_id      dept_id  \\\n",
              "678    HOUSEHOLD_1_118_CA_1_validation  HOUSEHOLD_1_118  HOUSEHOLD_1   \n",
              "3727   HOUSEHOLD_1_118_CA_2_validation  HOUSEHOLD_1_118  HOUSEHOLD_1   \n",
              "6776   HOUSEHOLD_1_118_CA_3_validation  HOUSEHOLD_1_118  HOUSEHOLD_1   \n",
              "9825   HOUSEHOLD_1_118_CA_4_validation  HOUSEHOLD_1_118  HOUSEHOLD_1   \n",
              "12874  HOUSEHOLD_1_118_TX_1_validation  HOUSEHOLD_1_118  HOUSEHOLD_1   \n",
              "15923  HOUSEHOLD_1_118_TX_2_validation  HOUSEHOLD_1_118  HOUSEHOLD_1   \n",
              "18972  HOUSEHOLD_1_118_TX_3_validation  HOUSEHOLD_1_118  HOUSEHOLD_1   \n",
              "22021  HOUSEHOLD_1_118_WI_1_validation  HOUSEHOLD_1_118  HOUSEHOLD_1   \n",
              "25070  HOUSEHOLD_1_118_WI_2_validation  HOUSEHOLD_1_118  HOUSEHOLD_1   \n",
              "28119  HOUSEHOLD_1_118_WI_3_validation  HOUSEHOLD_1_118  HOUSEHOLD_1   \n",
              "\n",
              "          cat_id store_id state_id  d_1  d_2  d_3  d_4  ...  d_1904  d_1905  \\\n",
              "678    HOUSEHOLD     CA_1       CA    3   12    6    5  ...       4       8   \n",
              "3727   HOUSEHOLD     CA_2       CA    8    4    4    3  ...       4       7   \n",
              "6776   HOUSEHOLD     CA_3       CA   17   27   28   32  ...      21      20   \n",
              "9825   HOUSEHOLD     CA_4       CA    0    3    0    0  ...       0       2   \n",
              "12874  HOUSEHOLD     TX_1       TX    2    6    1    7  ...       6       5   \n",
              "15923  HOUSEHOLD     TX_2       TX    1    7    7    3  ...       8       5   \n",
              "18972  HOUSEHOLD     TX_3       TX    3   14    3    5  ...       4       9   \n",
              "22021  HOUSEHOLD     WI_1       WI    0    0    0    0  ...       0       0   \n",
              "25070  HOUSEHOLD     WI_2       WI    0    0    0    0  ...       0       0   \n",
              "28119  HOUSEHOLD     WI_3       WI   17   13    6    3  ...       1       8   \n",
              "\n",
              "       d_1906  d_1907  d_1908  d_1909  d_1910  d_1911  d_1912  d_1913  \n",
              "678        21      11       7      15       7       1      10       9  \n",
              "3727        5       5       2       6       4       2       6       6  \n",
              "6776       38      13      22      19      52      14      25      31  \n",
              "9825        0       1       0       3       1       1       2       5  \n",
              "12874       4       1       3       3       4       3       1       7  \n",
              "15923       7       2       1       4       4       4       1       6  \n",
              "18972       5       5      10       6       5       3       5      11  \n",
              "22021       1       2       0       0       1       0       0       1  \n",
              "25070       0       0       0       0       2       0       0       0  \n",
              "28119      11       7       9       8       2       6       2       5  \n",
              "\n",
              "[10 rows x 1919 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7143d612-7c4f-4fa4-8ee6-49c7299a37bf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>item_id</th>\n",
              "      <th>dept_id</th>\n",
              "      <th>cat_id</th>\n",
              "      <th>store_id</th>\n",
              "      <th>state_id</th>\n",
              "      <th>d_1</th>\n",
              "      <th>d_2</th>\n",
              "      <th>d_3</th>\n",
              "      <th>d_4</th>\n",
              "      <th>...</th>\n",
              "      <th>d_1904</th>\n",
              "      <th>d_1905</th>\n",
              "      <th>d_1906</th>\n",
              "      <th>d_1907</th>\n",
              "      <th>d_1908</th>\n",
              "      <th>d_1909</th>\n",
              "      <th>d_1910</th>\n",
              "      <th>d_1911</th>\n",
              "      <th>d_1912</th>\n",
              "      <th>d_1913</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>678</th>\n",
              "      <td>HOUSEHOLD_1_118_CA_1_validation</td>\n",
              "      <td>HOUSEHOLD_1_118</td>\n",
              "      <td>HOUSEHOLD_1</td>\n",
              "      <td>HOUSEHOLD</td>\n",
              "      <td>CA_1</td>\n",
              "      <td>CA</td>\n",
              "      <td>3</td>\n",
              "      <td>12</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>4</td>\n",
              "      <td>8</td>\n",
              "      <td>21</td>\n",
              "      <td>11</td>\n",
              "      <td>7</td>\n",
              "      <td>15</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>10</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3727</th>\n",
              "      <td>HOUSEHOLD_1_118_CA_2_validation</td>\n",
              "      <td>HOUSEHOLD_1_118</td>\n",
              "      <td>HOUSEHOLD_1</td>\n",
              "      <td>HOUSEHOLD</td>\n",
              "      <td>CA_2</td>\n",
              "      <td>CA</td>\n",
              "      <td>8</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>...</td>\n",
              "      <td>4</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6776</th>\n",
              "      <td>HOUSEHOLD_1_118_CA_3_validation</td>\n",
              "      <td>HOUSEHOLD_1_118</td>\n",
              "      <td>HOUSEHOLD_1</td>\n",
              "      <td>HOUSEHOLD</td>\n",
              "      <td>CA_3</td>\n",
              "      <td>CA</td>\n",
              "      <td>17</td>\n",
              "      <td>27</td>\n",
              "      <td>28</td>\n",
              "      <td>32</td>\n",
              "      <td>...</td>\n",
              "      <td>21</td>\n",
              "      <td>20</td>\n",
              "      <td>38</td>\n",
              "      <td>13</td>\n",
              "      <td>22</td>\n",
              "      <td>19</td>\n",
              "      <td>52</td>\n",
              "      <td>14</td>\n",
              "      <td>25</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9825</th>\n",
              "      <td>HOUSEHOLD_1_118_CA_4_validation</td>\n",
              "      <td>HOUSEHOLD_1_118</td>\n",
              "      <td>HOUSEHOLD_1</td>\n",
              "      <td>HOUSEHOLD</td>\n",
              "      <td>CA_4</td>\n",
              "      <td>CA</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12874</th>\n",
              "      <td>HOUSEHOLD_1_118_TX_1_validation</td>\n",
              "      <td>HOUSEHOLD_1_118</td>\n",
              "      <td>HOUSEHOLD_1</td>\n",
              "      <td>HOUSEHOLD</td>\n",
              "      <td>TX_1</td>\n",
              "      <td>TX</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>...</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15923</th>\n",
              "      <td>HOUSEHOLD_1_118_TX_2_validation</td>\n",
              "      <td>HOUSEHOLD_1_118</td>\n",
              "      <td>HOUSEHOLD_1</td>\n",
              "      <td>HOUSEHOLD</td>\n",
              "      <td>TX_2</td>\n",
              "      <td>TX</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>...</td>\n",
              "      <td>8</td>\n",
              "      <td>5</td>\n",
              "      <td>7</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18972</th>\n",
              "      <td>HOUSEHOLD_1_118_TX_3_validation</td>\n",
              "      <td>HOUSEHOLD_1_118</td>\n",
              "      <td>HOUSEHOLD_1</td>\n",
              "      <td>HOUSEHOLD</td>\n",
              "      <td>TX_3</td>\n",
              "      <td>TX</td>\n",
              "      <td>3</td>\n",
              "      <td>14</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>4</td>\n",
              "      <td>9</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22021</th>\n",
              "      <td>HOUSEHOLD_1_118_WI_1_validation</td>\n",
              "      <td>HOUSEHOLD_1_118</td>\n",
              "      <td>HOUSEHOLD_1</td>\n",
              "      <td>HOUSEHOLD</td>\n",
              "      <td>WI_1</td>\n",
              "      <td>WI</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25070</th>\n",
              "      <td>HOUSEHOLD_1_118_WI_2_validation</td>\n",
              "      <td>HOUSEHOLD_1_118</td>\n",
              "      <td>HOUSEHOLD_1</td>\n",
              "      <td>HOUSEHOLD</td>\n",
              "      <td>WI_2</td>\n",
              "      <td>WI</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28119</th>\n",
              "      <td>HOUSEHOLD_1_118_WI_3_validation</td>\n",
              "      <td>HOUSEHOLD_1_118</td>\n",
              "      <td>HOUSEHOLD_1</td>\n",
              "      <td>HOUSEHOLD</td>\n",
              "      <td>WI_3</td>\n",
              "      <td>WI</td>\n",
              "      <td>17</td>\n",
              "      <td>13</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>11</td>\n",
              "      <td>7</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10 rows × 1919 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7143d612-7c4f-4fa4-8ee6-49c7299a37bf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7143d612-7c4f-4fa4-8ee6-49c7299a37bf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7143d612-7c4f-4fa4-8ee6-49c7299a37bf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3539a38d-83c7-4d0f-a7fe-8e08af1d48d4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3539a38d-83c7-4d0f-a7fe-8e08af1d48d4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3539a38d-83c7-4d0f-a7fe-8e08af1d48d4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_4e430619-f837-4f40-9fed-0271160d09dc\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('household_1_118_records')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_4e430619-f837-4f40-9fed-0271160d09dc button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('household_1_118_records');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "household_1_118_records"
            }
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# SUM OF SALES OF ALL HOUSEHOLD_1_118 ITEMS\n",
        "\n",
        "household_1_118_sales = df4[df4['item_id'].str.startswith('HOUSEHOLD_1_118')]\n",
        "total_sales_household_1_118 = household_1_118_sales.iloc[:, 6:].sum().sum()\n",
        "print(total_sales_household_1_118)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jQGj3WohTtLS",
        "outputId": "6b13827b-1b42-4133-9eaa-ea032e7cb509"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "242674\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "household_sales_sorted = household_sales.sort_values('sales', ascending=False).head(10)\n",
        "household_sales_sorted = household_sales_sorted.reset_index(drop=True)\n",
        "\n",
        "# Apply bold to the first row\n",
        "household_sales_sorted_html = household_sales_sorted.style.set_properties(**{'font-weight': 'bold'}, subset=pd.IndexSlice[0, :])\n",
        "\n",
        "# Display the table\n",
        "household_sales_sorted_html\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "LSnRB2L4Uops",
        "outputId": "f3f8f647-a27f-43f0-edd1-ff9c5b6ed23c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7aa31f2b8a60>"
            ],
            "text/html": [
              "<style type=\"text/css\">\n",
              "#T_cd5c5_row0_col0, #T_cd5c5_row0_col1 {\n",
              "  font-weight: bold;\n",
              "}\n",
              "</style>\n",
              "<table id=\"T_cd5c5\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th class=\"blank level0\" >&nbsp;</th>\n",
              "      <th id=\"T_cd5c5_level0_col0\" class=\"col_heading level0 col0\" >item_id</th>\n",
              "      <th id=\"T_cd5c5_level0_col1\" class=\"col_heading level0 col1\" >sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th id=\"T_cd5c5_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
              "      <td id=\"T_cd5c5_row0_col0\" class=\"data row0 col0\" >HOUSEHOLD_1_118</td>\n",
              "      <td id=\"T_cd5c5_row0_col1\" class=\"data row0 col1\" >44018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_cd5c5_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
              "      <td id=\"T_cd5c5_row1_col0\" class=\"data row1 col0\" >HOUSEHOLD_1_459</td>\n",
              "      <td id=\"T_cd5c5_row1_col1\" class=\"data row1 col1\" >37392</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_cd5c5_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
              "      <td id=\"T_cd5c5_row2_col0\" class=\"data row2 col0\" >HOUSEHOLD_1_334</td>\n",
              "      <td id=\"T_cd5c5_row2_col1\" class=\"data row2 col1\" >37226</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_cd5c5_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
              "      <td id=\"T_cd5c5_row3_col0\" class=\"data row3 col0\" >HOUSEHOLD_1_303</td>\n",
              "      <td id=\"T_cd5c5_row3_col1\" class=\"data row3 col1\" >35226</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_cd5c5_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
              "      <td id=\"T_cd5c5_row4_col0\" class=\"data row4 col0\" >HOUSEHOLD_1_521</td>\n",
              "      <td id=\"T_cd5c5_row4_col1\" class=\"data row4 col1\" >30484</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_cd5c5_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
              "      <td id=\"T_cd5c5_row5_col0\" class=\"data row5 col0\" >HOUSEHOLD_1_459</td>\n",
              "      <td id=\"T_cd5c5_row5_col1\" class=\"data row5 col1\" >30291</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_cd5c5_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
              "      <td id=\"T_cd5c5_row6_col0\" class=\"data row6 col0\" >HOUSEHOLD_1_465</td>\n",
              "      <td id=\"T_cd5c5_row6_col1\" class=\"data row6 col1\" >29999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_cd5c5_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
              "      <td id=\"T_cd5c5_row7_col0\" class=\"data row7 col0\" >HOUSEHOLD_1_351</td>\n",
              "      <td id=\"T_cd5c5_row7_col1\" class=\"data row7 col1\" >28882</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_cd5c5_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
              "      <td id=\"T_cd5c5_row8_col0\" class=\"data row8 col0\" >HOUSEHOLD_1_019</td>\n",
              "      <td id=\"T_cd5c5_row8_col1\" class=\"data row8 col1\" >28669</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_cd5c5_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
              "      <td id=\"T_cd5c5_row9_col0\" class=\"data row9 col0\" >HOUSEHOLD_1_110</td>\n",
              "      <td id=\"T_cd5c5_row9_col1\" class=\"data row9 col1\" >28545</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "source": [
        "from matplotlib import pyplot as plt\n",
        "_df_0['sales'].plot(kind='hist', bins=20, title='sales')\n",
        "plt.gca().spines[['top', 'right',]].set_visible(False)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 176
        },
        "id": "PbLgT5KNVPsX",
        "outputId": "37c177fe-cec3-42e3-a4f5-a297bd48dcde"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name '_df_0' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-29-b38b860ec6d8>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mmatplotlib\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0m_df_0\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'sales'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'hist'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtitle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'sales'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgca\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mspines\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'top'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'right'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_visible\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name '_df_0' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "household_sales['sales'].sum()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X_WawyiAS7lH",
        "outputId": "68320c24-aae6-49dc-8d4f-cce955604fc7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "14764090"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "T_dfzANETJDr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "household_1_118 = df4[df4['item_id'] == 'HOUSEHOLD_1_118']\n",
        "household_1_118\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 412
        },
        "id": "r8leqkmgtu-6",
        "outputId": "b59072a2-00e3-4a19-8bb2-22a5eea57571"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                    id          item_id      dept_id  \\\n",
              "678    HOUSEHOLD_1_118_CA_1_evaluation  HOUSEHOLD_1_118  HOUSEHOLD_1   \n",
              "3727   HOUSEHOLD_1_118_CA_2_evaluation  HOUSEHOLD_1_118  HOUSEHOLD_1   \n",
              "6776   HOUSEHOLD_1_118_CA_3_evaluation  HOUSEHOLD_1_118  HOUSEHOLD_1   \n",
              "9825   HOUSEHOLD_1_118_CA_4_evaluation  HOUSEHOLD_1_118  HOUSEHOLD_1   \n",
              "12874  HOUSEHOLD_1_118_TX_1_evaluation  HOUSEHOLD_1_118  HOUSEHOLD_1   \n",
              "15923  HOUSEHOLD_1_118_TX_2_evaluation  HOUSEHOLD_1_118  HOUSEHOLD_1   \n",
              "18972  HOUSEHOLD_1_118_TX_3_evaluation  HOUSEHOLD_1_118  HOUSEHOLD_1   \n",
              "22021  HOUSEHOLD_1_118_WI_1_evaluation  HOUSEHOLD_1_118  HOUSEHOLD_1   \n",
              "25070  HOUSEHOLD_1_118_WI_2_evaluation  HOUSEHOLD_1_118  HOUSEHOLD_1   \n",
              "28119  HOUSEHOLD_1_118_WI_3_evaluation  HOUSEHOLD_1_118  HOUSEHOLD_1   \n",
              "\n",
              "          cat_id store_id state_id  d_1  d_2  d_3  d_4  ...  d_1933  d_1934  \\\n",
              "678    HOUSEHOLD     CA_1       CA    3   12    6    5  ...      19      17   \n",
              "3727   HOUSEHOLD     CA_2       CA    8    4    4    3  ...       5       5   \n",
              "6776   HOUSEHOLD     CA_3       CA   17   27   28   32  ...      25      39   \n",
              "9825   HOUSEHOLD     CA_4       CA    0    3    0    0  ...       2       0   \n",
              "12874  HOUSEHOLD     TX_1       TX    2    6    1    7  ...       2       2   \n",
              "15923  HOUSEHOLD     TX_2       TX    1    7    7    3  ...       4       5   \n",
              "18972  HOUSEHOLD     TX_3       TX    3   14    3    5  ...       6      14   \n",
              "22021  HOUSEHOLD     WI_1       WI    0    0    0    0  ...       0       2   \n",
              "25070  HOUSEHOLD     WI_2       WI    0    0    0    0  ...       0       0   \n",
              "28119  HOUSEHOLD     WI_3       WI   17   13    6    3  ...       8      16   \n",
              "\n",
              "       d_1935  d_1936  d_1937  d_1938  d_1939  d_1940  d_1941  sales  \n",
              "678        12       8       3      10       6      12      16  14842  \n",
              "3727        7       3       2       4       1      22       6   8172  \n",
              "6776       45      18      26      30      25      29      28  44018  \n",
              "9825        3       2       0       0       0       3       2   3518  \n",
              "12874       2       8      13       2       4       3       9   8482  \n",
              "15923       5       5       3       2       4       3       6   9984  \n",
              "18972      14      10       1       8       4       7       9  17209  \n",
              "22021       0       0       0       2       3       2       1    677  \n",
              "25070       0       0       0       0       0       0       1    386  \n",
              "28119       9      14       8       5       0      10      12  14049  \n",
              "\n",
              "[10 rows x 1948 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a9fceee9-e64e-4245-aacb-41e6f92ea1fb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>item_id</th>\n",
              "      <th>dept_id</th>\n",
              "      <th>cat_id</th>\n",
              "      <th>store_id</th>\n",
              "      <th>state_id</th>\n",
              "      <th>d_1</th>\n",
              "      <th>d_2</th>\n",
              "      <th>d_3</th>\n",
              "      <th>d_4</th>\n",
              "      <th>...</th>\n",
              "      <th>d_1933</th>\n",
              "      <th>d_1934</th>\n",
              "      <th>d_1935</th>\n",
              "      <th>d_1936</th>\n",
              "      <th>d_1937</th>\n",
              "      <th>d_1938</th>\n",
              "      <th>d_1939</th>\n",
              "      <th>d_1940</th>\n",
              "      <th>d_1941</th>\n",
              "      <th>sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>678</th>\n",
              "      <td>HOUSEHOLD_1_118_CA_1_evaluation</td>\n",
              "      <td>HOUSEHOLD_1_118</td>\n",
              "      <td>HOUSEHOLD_1</td>\n",
              "      <td>HOUSEHOLD</td>\n",
              "      <td>CA_1</td>\n",
              "      <td>CA</td>\n",
              "      <td>3</td>\n",
              "      <td>12</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>19</td>\n",
              "      <td>17</td>\n",
              "      <td>12</td>\n",
              "      <td>8</td>\n",
              "      <td>3</td>\n",
              "      <td>10</td>\n",
              "      <td>6</td>\n",
              "      <td>12</td>\n",
              "      <td>16</td>\n",
              "      <td>14842</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3727</th>\n",
              "      <td>HOUSEHOLD_1_118_CA_2_evaluation</td>\n",
              "      <td>HOUSEHOLD_1_118</td>\n",
              "      <td>HOUSEHOLD_1</td>\n",
              "      <td>HOUSEHOLD</td>\n",
              "      <td>CA_2</td>\n",
              "      <td>CA</td>\n",
              "      <td>8</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>...</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>22</td>\n",
              "      <td>6</td>\n",
              "      <td>8172</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6776</th>\n",
              "      <td>HOUSEHOLD_1_118_CA_3_evaluation</td>\n",
              "      <td>HOUSEHOLD_1_118</td>\n",
              "      <td>HOUSEHOLD_1</td>\n",
              "      <td>HOUSEHOLD</td>\n",
              "      <td>CA_3</td>\n",
              "      <td>CA</td>\n",
              "      <td>17</td>\n",
              "      <td>27</td>\n",
              "      <td>28</td>\n",
              "      <td>32</td>\n",
              "      <td>...</td>\n",
              "      <td>25</td>\n",
              "      <td>39</td>\n",
              "      <td>45</td>\n",
              "      <td>18</td>\n",
              "      <td>26</td>\n",
              "      <td>30</td>\n",
              "      <td>25</td>\n",
              "      <td>29</td>\n",
              "      <td>28</td>\n",
              "      <td>44018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9825</th>\n",
              "      <td>HOUSEHOLD_1_118_CA_4_evaluation</td>\n",
              "      <td>HOUSEHOLD_1_118</td>\n",
              "      <td>HOUSEHOLD_1</td>\n",
              "      <td>HOUSEHOLD</td>\n",
              "      <td>CA_4</td>\n",
              "      <td>CA</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>3518</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12874</th>\n",
              "      <td>HOUSEHOLD_1_118_TX_1_evaluation</td>\n",
              "      <td>HOUSEHOLD_1_118</td>\n",
              "      <td>HOUSEHOLD_1</td>\n",
              "      <td>HOUSEHOLD</td>\n",
              "      <td>TX_1</td>\n",
              "      <td>TX</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>13</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>9</td>\n",
              "      <td>8482</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15923</th>\n",
              "      <td>HOUSEHOLD_1_118_TX_2_evaluation</td>\n",
              "      <td>HOUSEHOLD_1_118</td>\n",
              "      <td>HOUSEHOLD_1</td>\n",
              "      <td>HOUSEHOLD</td>\n",
              "      <td>TX_2</td>\n",
              "      <td>TX</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>...</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>9984</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18972</th>\n",
              "      <td>HOUSEHOLD_1_118_TX_3_evaluation</td>\n",
              "      <td>HOUSEHOLD_1_118</td>\n",
              "      <td>HOUSEHOLD_1</td>\n",
              "      <td>HOUSEHOLD</td>\n",
              "      <td>TX_3</td>\n",
              "      <td>TX</td>\n",
              "      <td>3</td>\n",
              "      <td>14</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>6</td>\n",
              "      <td>14</td>\n",
              "      <td>14</td>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>4</td>\n",
              "      <td>7</td>\n",
              "      <td>9</td>\n",
              "      <td>17209</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22021</th>\n",
              "      <td>HOUSEHOLD_1_118_WI_1_evaluation</td>\n",
              "      <td>HOUSEHOLD_1_118</td>\n",
              "      <td>HOUSEHOLD_1</td>\n",
              "      <td>HOUSEHOLD</td>\n",
              "      <td>WI_1</td>\n",
              "      <td>WI</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>677</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25070</th>\n",
              "      <td>HOUSEHOLD_1_118_WI_2_evaluation</td>\n",
              "      <td>HOUSEHOLD_1_118</td>\n",
              "      <td>HOUSEHOLD_1</td>\n",
              "      <td>HOUSEHOLD</td>\n",
              "      <td>WI_2</td>\n",
              "      <td>WI</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>386</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28119</th>\n",
              "      <td>HOUSEHOLD_1_118_WI_3_evaluation</td>\n",
              "      <td>HOUSEHOLD_1_118</td>\n",
              "      <td>HOUSEHOLD_1</td>\n",
              "      <td>HOUSEHOLD</td>\n",
              "      <td>WI_3</td>\n",
              "      <td>WI</td>\n",
              "      <td>17</td>\n",
              "      <td>13</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>...</td>\n",
              "      <td>8</td>\n",
              "      <td>16</td>\n",
              "      <td>9</td>\n",
              "      <td>14</td>\n",
              "      <td>8</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>12</td>\n",
              "      <td>14049</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10 rows × 1948 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a9fceee9-e64e-4245-aacb-41e6f92ea1fb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a9fceee9-e64e-4245-aacb-41e6f92ea1fb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a9fceee9-e64e-4245-aacb-41e6f92ea1fb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f3bf4e4f-2ca8-4a10-8d8b-f5e48549ea48\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f3bf4e4f-2ca8-4a10-8d8b-f5e48549ea48')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f3bf4e4f-2ca8-4a10-8d8b-f5e48549ea48 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_f2e9a70f-22f5-4199-9d2a-564a526b3652\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('household_1_118')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f2e9a70f-22f5-4199-9d2a-564a526b3652 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('household_1_118');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "household_1_118"
            }
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "d_values = household_1_118.columns[household_1_118.columns.str.startswith('d_')]\n",
        "\n",
        "result_df = df2[df2['d'].isin(d_values)]\n",
        "result_df\n",
        "result_df_Accuracy_copy=result_df\n",
        "result_df\n",
        "\n"
      ],
      "metadata": {
        "id": "Pvh0m2Rbviag",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "3484d21e-4d37-4132-9d7b-5da1a5e02e81"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            date  wm_yr_wk    weekday  wday  month  year       d event_name_1  \\\n",
              "0     2011-01-29     11101   Saturday     1      1  2011     d_1          NaN   \n",
              "1     2011-01-30     11101     Sunday     2      1  2011     d_2          NaN   \n",
              "2     2011-01-31     11101     Monday     3      1  2011     d_3          NaN   \n",
              "3     2011-02-01     11101    Tuesday     4      2  2011     d_4          NaN   \n",
              "4     2011-02-02     11101  Wednesday     5      2  2011     d_5          NaN   \n",
              "...          ...       ...        ...   ...    ...   ...     ...          ...   \n",
              "1936  2016-05-18     11616  Wednesday     5      5  2016  d_1937          NaN   \n",
              "1937  2016-05-19     11616   Thursday     6      5  2016  d_1938          NaN   \n",
              "1938  2016-05-20     11616     Friday     7      5  2016  d_1939          NaN   \n",
              "1939  2016-05-21     11617   Saturday     1      5  2016  d_1940          NaN   \n",
              "1940  2016-05-22     11617     Sunday     2      5  2016  d_1941          NaN   \n",
              "\n",
              "     event_type_1 event_name_2 event_type_2  snap_CA  snap_TX  snap_WI  \n",
              "0             NaN          NaN          NaN        0        0        0  \n",
              "1             NaN          NaN          NaN        0        0        0  \n",
              "2             NaN          NaN          NaN        0        0        0  \n",
              "3             NaN          NaN          NaN        1        1        0  \n",
              "4             NaN          NaN          NaN        1        0        1  \n",
              "...           ...          ...          ...      ...      ...      ...  \n",
              "1936          NaN          NaN          NaN        0        0        0  \n",
              "1937          NaN          NaN          NaN        0        0        0  \n",
              "1938          NaN          NaN          NaN        0        0        0  \n",
              "1939          NaN          NaN          NaN        0        0        0  \n",
              "1940          NaN          NaN          NaN        0        0        0  \n",
              "\n",
              "[1941 rows x 14 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c28917ab-ce7f-495c-9649-10bc1a18a5a3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>wm_yr_wk</th>\n",
              "      <th>weekday</th>\n",
              "      <th>wday</th>\n",
              "      <th>month</th>\n",
              "      <th>year</th>\n",
              "      <th>d</th>\n",
              "      <th>event_name_1</th>\n",
              "      <th>event_type_1</th>\n",
              "      <th>event_name_2</th>\n",
              "      <th>event_type_2</th>\n",
              "      <th>snap_CA</th>\n",
              "      <th>snap_TX</th>\n",
              "      <th>snap_WI</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2011-01-29</td>\n",
              "      <td>11101</td>\n",
              "      <td>Saturday</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2011-01-30</td>\n",
              "      <td>11101</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2011-01-31</td>\n",
              "      <td>11101</td>\n",
              "      <td>Monday</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2011-02-01</td>\n",
              "      <td>11101</td>\n",
              "      <td>Tuesday</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2011-02-02</td>\n",
              "      <td>11101</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1936</th>\n",
              "      <td>2016-05-18</td>\n",
              "      <td>11616</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1937</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1937</th>\n",
              "      <td>2016-05-19</td>\n",
              "      <td>11616</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1938</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1938</th>\n",
              "      <td>2016-05-20</td>\n",
              "      <td>11616</td>\n",
              "      <td>Friday</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1939</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1939</th>\n",
              "      <td>2016-05-21</td>\n",
              "      <td>11617</td>\n",
              "      <td>Saturday</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1940</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1940</th>\n",
              "      <td>2016-05-22</td>\n",
              "      <td>11617</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1941</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1941 rows × 14 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c28917ab-ce7f-495c-9649-10bc1a18a5a3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c28917ab-ce7f-495c-9649-10bc1a18a5a3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c28917ab-ce7f-495c-9649-10bc1a18a5a3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cf5289fc-4e8e-4282-aa52-745bd348f417\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cf5289fc-4e8e-4282-aa52-745bd348f417')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cf5289fc-4e8e-4282-aa52-745bd348f417 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_081394ff-04f4-4d2d-90eb-5ea230f2d5ea\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('result_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_081394ff-04f4-4d2d-90eb-5ea230f2d5ea button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('result_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "result_df",
              "summary": "{\n  \"name\": \"result_df\",\n  \"rows\": 1941,\n  \"fields\": [\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1941,\n        \"samples\": [\n          \"2015-06-22\",\n          \"2015-03-11\",\n          \"2011-04-09\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wm_yr_wk\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 152,\n        \"min\": 11101,\n        \"max\": 11617,\n        \"num_unique_values\": 278,\n        \"samples\": [\n          11131,\n          11323,\n          11443\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weekday\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Saturday\",\n          \"Sunday\",\n          \"Thursday\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          2,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 12,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          11,\n          10,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2011,\n        \"max\": 2016,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2011,\n          2012,\n          2016\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"d\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1941,\n        \"samples\": [\n          \"d_1606\",\n          \"d_1503\",\n          \"d_71\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"event_name_1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"OrthodoxChristmas\",\n          \"IndependenceDay\",\n          \"Thanksgiving\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"event_type_1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Cultural\",\n          \"Religious\",\n          \"Sporting\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"event_name_2\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Cinco De Mayo\",\n          \"Father's day\",\n          \"Easter\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"event_type_2\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Religious\",\n          \"Cultural\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"snap_CA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"snap_TX\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"snap_WI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#total columns in result_df\n",
        "\n",
        "result_df.shape[1]\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8CMuo2yZvvhb",
        "outputId": "2718a32e-4838-4409-d41b-66820da0ff04"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "14"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " search calendar where value of 'd' (department #) exists in any column starting with d in household_1_118"
      ],
      "metadata": {
        "id": "9eWmvKg69CYV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "for d_value in d_values:\n",
        "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
        "\n",
        "result_df\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Sh9yL4s9xPS4",
        "outputId": "f4364ce0-4304-4846-fa64-5182880c438e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[1;30;43mStreaming output truncated to the last 5000 lines.\u001b[0m\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n",
            "<ipython-input-34-6bfe0a733e62>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[d_value] = result_df['d'].apply(lambda x: household_1_118[d_value].values[0] if x == d_value else 0)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            date  wm_yr_wk    weekday  wday  month  year       d event_name_1  \\\n",
              "0     2011-01-29     11101   Saturday     1      1  2011     d_1          NaN   \n",
              "1     2011-01-30     11101     Sunday     2      1  2011     d_2          NaN   \n",
              "2     2011-01-31     11101     Monday     3      1  2011     d_3          NaN   \n",
              "3     2011-02-01     11101    Tuesday     4      2  2011     d_4          NaN   \n",
              "4     2011-02-02     11101  Wednesday     5      2  2011     d_5          NaN   \n",
              "...          ...       ...        ...   ...    ...   ...     ...          ...   \n",
              "1936  2016-05-18     11616  Wednesday     5      5  2016  d_1937          NaN   \n",
              "1937  2016-05-19     11616   Thursday     6      5  2016  d_1938          NaN   \n",
              "1938  2016-05-20     11616     Friday     7      5  2016  d_1939          NaN   \n",
              "1939  2016-05-21     11617   Saturday     1      5  2016  d_1940          NaN   \n",
              "1940  2016-05-22     11617     Sunday     2      5  2016  d_1941          NaN   \n",
              "\n",
              "     event_type_1 event_name_2  ... d_1932  d_1933  d_1934  d_1935  d_1936  \\\n",
              "0             NaN          NaN  ...      0       0       0       0       0   \n",
              "1             NaN          NaN  ...      0       0       0       0       0   \n",
              "2             NaN          NaN  ...      0       0       0       0       0   \n",
              "3             NaN          NaN  ...      0       0       0       0       0   \n",
              "4             NaN          NaN  ...      0       0       0       0       0   \n",
              "...           ...          ...  ...    ...     ...     ...     ...     ...   \n",
              "1936          NaN          NaN  ...      0       0       0       0       0   \n",
              "1937          NaN          NaN  ...      0       0       0       0       0   \n",
              "1938          NaN          NaN  ...      0       0       0       0       0   \n",
              "1939          NaN          NaN  ...      0       0       0       0       0   \n",
              "1940          NaN          NaN  ...      0       0       0       0       0   \n",
              "\n",
              "      d_1937  d_1938  d_1939  d_1940  d_1941  \n",
              "0          0       0       0       0       0  \n",
              "1          0       0       0       0       0  \n",
              "2          0       0       0       0       0  \n",
              "3          0       0       0       0       0  \n",
              "4          0       0       0       0       0  \n",
              "...      ...     ...     ...     ...     ...  \n",
              "1936       3       0       0       0       0  \n",
              "1937       0      10       0       0       0  \n",
              "1938       0       0       6       0       0  \n",
              "1939       0       0       0      12       0  \n",
              "1940       0       0       0       0      16  \n",
              "\n",
              "[1941 rows x 1955 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7727d781-6d2d-4185-84a3-d1141395dffd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>wm_yr_wk</th>\n",
              "      <th>weekday</th>\n",
              "      <th>wday</th>\n",
              "      <th>month</th>\n",
              "      <th>year</th>\n",
              "      <th>d</th>\n",
              "      <th>event_name_1</th>\n",
              "      <th>event_type_1</th>\n",
              "      <th>event_name_2</th>\n",
              "      <th>...</th>\n",
              "      <th>d_1932</th>\n",
              "      <th>d_1933</th>\n",
              "      <th>d_1934</th>\n",
              "      <th>d_1935</th>\n",
              "      <th>d_1936</th>\n",
              "      <th>d_1937</th>\n",
              "      <th>d_1938</th>\n",
              "      <th>d_1939</th>\n",
              "      <th>d_1940</th>\n",
              "      <th>d_1941</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2011-01-29</td>\n",
              "      <td>11101</td>\n",
              "      <td>Saturday</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2011-01-30</td>\n",
              "      <td>11101</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2011-01-31</td>\n",
              "      <td>11101</td>\n",
              "      <td>Monday</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2011-02-01</td>\n",
              "      <td>11101</td>\n",
              "      <td>Tuesday</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2011-02-02</td>\n",
              "      <td>11101</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1936</th>\n",
              "      <td>2016-05-18</td>\n",
              "      <td>11616</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1937</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1937</th>\n",
              "      <td>2016-05-19</td>\n",
              "      <td>11616</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1938</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1938</th>\n",
              "      <td>2016-05-20</td>\n",
              "      <td>11616</td>\n",
              "      <td>Friday</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1939</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1939</th>\n",
              "      <td>2016-05-21</td>\n",
              "      <td>11617</td>\n",
              "      <td>Saturday</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1940</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1940</th>\n",
              "      <td>2016-05-22</td>\n",
              "      <td>11617</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1941</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1941 rows × 1955 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7727d781-6d2d-4185-84a3-d1141395dffd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7727d781-6d2d-4185-84a3-d1141395dffd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7727d781-6d2d-4185-84a3-d1141395dffd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b55f2934-681f-4a5d-bd6f-8b51f39caf1d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b55f2934-681f-4a5d-bd6f-8b51f39caf1d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b55f2934-681f-4a5d-bd6f-8b51f39caf1d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_276efc8c-5d5f-474d-94ca-9ca9c7cdd7a1\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('result_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_276efc8c-5d5f-474d-94ca-9ca9c7cdd7a1 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('result_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "result_df"
            }
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "result_df[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"] = result_df.loc[:, result_df.columns.str.startswith('d_')].sum(axis=1)\n",
        "\n",
        "result_df\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 826
        },
        "id": "7WS85SkX0Gg1",
        "outputId": "9dc23b6c-b4df-4bc5-8385-73eedb217a26"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-35-ef6056ce8fb3>:1: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"] = result_df.loc[:, result_df.columns.str.startswith('d_')].sum(axis=1)\n",
            "<ipython-input-35-ef6056ce8fb3>:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"] = result_df.loc[:, result_df.columns.str.startswith('d_')].sum(axis=1)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            date  wm_yr_wk    weekday  wday  month  year       d event_name_1  \\\n",
              "0     2011-01-29     11101   Saturday     1      1  2011     d_1          NaN   \n",
              "1     2011-01-30     11101     Sunday     2      1  2011     d_2          NaN   \n",
              "2     2011-01-31     11101     Monday     3      1  2011     d_3          NaN   \n",
              "3     2011-02-01     11101    Tuesday     4      2  2011     d_4          NaN   \n",
              "4     2011-02-02     11101  Wednesday     5      2  2011     d_5          NaN   \n",
              "...          ...       ...        ...   ...    ...   ...     ...          ...   \n",
              "1936  2016-05-18     11616  Wednesday     5      5  2016  d_1937          NaN   \n",
              "1937  2016-05-19     11616   Thursday     6      5  2016  d_1938          NaN   \n",
              "1938  2016-05-20     11616     Friday     7      5  2016  d_1939          NaN   \n",
              "1939  2016-05-21     11617   Saturday     1      5  2016  d_1940          NaN   \n",
              "1940  2016-05-22     11617     Sunday     2      5  2016  d_1941          NaN   \n",
              "\n",
              "     event_type_1 event_name_2  ... d_1933  d_1934  d_1935  d_1936  d_1937  \\\n",
              "0             NaN          NaN  ...      0       0       0       0       0   \n",
              "1             NaN          NaN  ...      0       0       0       0       0   \n",
              "2             NaN          NaN  ...      0       0       0       0       0   \n",
              "3             NaN          NaN  ...      0       0       0       0       0   \n",
              "4             NaN          NaN  ...      0       0       0       0       0   \n",
              "...           ...          ...  ...    ...     ...     ...     ...     ...   \n",
              "1936          NaN          NaN  ...      0       0       0       0       3   \n",
              "1937          NaN          NaN  ...      0       0       0       0       0   \n",
              "1938          NaN          NaN  ...      0       0       0       0       0   \n",
              "1939          NaN          NaN  ...      0       0       0       0       0   \n",
              "1940          NaN          NaN  ...      0       0       0       0       0   \n",
              "\n",
              "      d_1938  d_1939  d_1940  d_1941  \\\n",
              "0          0       0       0       0   \n",
              "1          0       0       0       0   \n",
              "2          0       0       0       0   \n",
              "3          0       0       0       0   \n",
              "4          0       0       0       0   \n",
              "...      ...     ...     ...     ...   \n",
              "1936       0       0       0       0   \n",
              "1937      10       0       0       0   \n",
              "1938       0       6       0       0   \n",
              "1939       0       0      12       0   \n",
              "1940       0       0       0      16   \n",
              "\n",
              "      aggregate department sales countrywide for HOUSEHOLD_1_118  \n",
              "0                                                     3           \n",
              "1                                                    12           \n",
              "2                                                     6           \n",
              "3                                                     5           \n",
              "4                                                     6           \n",
              "...                                                 ...           \n",
              "1936                                                  3           \n",
              "1937                                                 10           \n",
              "1938                                                  6           \n",
              "1939                                                 12           \n",
              "1940                                                 16           \n",
              "\n",
              "[1941 rows x 1956 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9a74b9b5-e2ab-4a1a-ab47-8edc2b42713f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>wm_yr_wk</th>\n",
              "      <th>weekday</th>\n",
              "      <th>wday</th>\n",
              "      <th>month</th>\n",
              "      <th>year</th>\n",
              "      <th>d</th>\n",
              "      <th>event_name_1</th>\n",
              "      <th>event_type_1</th>\n",
              "      <th>event_name_2</th>\n",
              "      <th>...</th>\n",
              "      <th>d_1933</th>\n",
              "      <th>d_1934</th>\n",
              "      <th>d_1935</th>\n",
              "      <th>d_1936</th>\n",
              "      <th>d_1937</th>\n",
              "      <th>d_1938</th>\n",
              "      <th>d_1939</th>\n",
              "      <th>d_1940</th>\n",
              "      <th>d_1941</th>\n",
              "      <th>aggregate department sales countrywide for HOUSEHOLD_1_118</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2011-01-29</td>\n",
              "      <td>11101</td>\n",
              "      <td>Saturday</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2011-01-30</td>\n",
              "      <td>11101</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2011-01-31</td>\n",
              "      <td>11101</td>\n",
              "      <td>Monday</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2011-02-01</td>\n",
              "      <td>11101</td>\n",
              "      <td>Tuesday</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2011-02-02</td>\n",
              "      <td>11101</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1936</th>\n",
              "      <td>2016-05-18</td>\n",
              "      <td>11616</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1937</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1937</th>\n",
              "      <td>2016-05-19</td>\n",
              "      <td>11616</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1938</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1938</th>\n",
              "      <td>2016-05-20</td>\n",
              "      <td>11616</td>\n",
              "      <td>Friday</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1939</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1939</th>\n",
              "      <td>2016-05-21</td>\n",
              "      <td>11617</td>\n",
              "      <td>Saturday</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1940</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1940</th>\n",
              "      <td>2016-05-22</td>\n",
              "      <td>11617</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1941</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>16</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1941 rows × 1956 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9a74b9b5-e2ab-4a1a-ab47-8edc2b42713f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9a74b9b5-e2ab-4a1a-ab47-8edc2b42713f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9a74b9b5-e2ab-4a1a-ab47-8edc2b42713f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f466bd7b-bbb3-4e51-9842-f32baad86ad3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f466bd7b-bbb3-4e51-9842-f32baad86ad3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f466bd7b-bbb3-4e51-9842-f32baad86ad3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_b7665150-f143-4837-b0c1-12257973dbef\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('result_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_b7665150-f143-4837-b0c1-12257973dbef button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('result_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "result_df"
            }
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#total columns in result_df after left join\n",
        "\n",
        "result_df.shape[1]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q3KsNX_kwET8",
        "outputId": "9ce8608f-3c3f-4c9b-e320-dd83e554de0e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1956"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# result_df_filtered = result_df[(result_df['year'] == 2014) | (result_df['year'] == 2015)]\n",
        "# result_df_filtered_outlier=result_df_filtered\n",
        "# result_df_filtered\n",
        "\n",
        "result_df_filtered = result_df\n"
      ],
      "metadata": {
        "id": "WiSscDIn1vH-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **TIME SERIES PLOT OF HOUSEHOLD ITEM \"*HOUSEHOLD_1_118 SOLD*\" IN ALL DEPARTMENTS ACROSS US IN 2014-2015**"
      ],
      "metadata": {
        "id": "s3bXTzpIbNI4"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "LNlo8n2Eb3Sz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "result_df_filtered['date'] = pd.to_datetime(result_df_filtered['date'])\n",
        "\n",
        "result_df_filtered.set_index('date', inplace=True)\n",
        "\n",
        "plt.figure(figsize=(15, 9))\n",
        "plt.plot(result_df_filtered.index, result_df_filtered[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"])\n",
        "plt.xlabel('Date')\n",
        "plt.ylabel('Aggregate Department Sales')\n",
        "plt.title('Time Series of Aggregate Department Sales for HOUSEHOLD_1_118')\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 899
        },
        "id": "FOna7nM61FdU",
        "outputId": "65486b04-7d51-43bc-d333-515ac430fbe1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-38-4e4ccdfd53a9>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df_filtered['date'] = pd.to_datetime(result_df_filtered['date'])\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x900 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "newyear_christmas_sales = result_df_filtered[result_df_filtered['event_name_1'].isin(['NewYear', 'Christmas'])]\n",
        "newyear_christmas_sales[['event_name_1', 'aggregate department sales countrywide for HOUSEHOLD_1_118']]\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "uzHPCbohwtw0",
        "outputId": "f5febcfe-0b08-4930-95fd-73e889e1c805"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           event_name_1  \\\n",
              "date                      \n",
              "2011-12-25    Christmas   \n",
              "2012-01-01      NewYear   \n",
              "2012-12-25    Christmas   \n",
              "2013-01-01      NewYear   \n",
              "2013-12-25    Christmas   \n",
              "2014-01-01      NewYear   \n",
              "2014-12-25    Christmas   \n",
              "2015-01-01      NewYear   \n",
              "2015-12-25    Christmas   \n",
              "2016-01-01      NewYear   \n",
              "\n",
              "            aggregate department sales countrywide for HOUSEHOLD_1_118  \n",
              "date                                                                    \n",
              "2011-12-25                                                  0           \n",
              "2012-01-01                                                 11           \n",
              "2012-12-25                                                  0           \n",
              "2013-01-01                                                  0           \n",
              "2013-12-25                                                  0           \n",
              "2014-01-01                                                 11           \n",
              "2014-12-25                                                  0           \n",
              "2015-01-01                                                  4           \n",
              "2015-12-25                                                  0           \n",
              "2016-01-01                                                  1           "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d42e6e36-2d71-458e-a965-937958e8d9e8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>event_name_1</th>\n",
              "      <th>aggregate department sales countrywide for HOUSEHOLD_1_118</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2011-12-25</th>\n",
              "      <td>Christmas</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-01-01</th>\n",
              "      <td>NewYear</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-12-25</th>\n",
              "      <td>Christmas</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2013-01-01</th>\n",
              "      <td>NewYear</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2013-12-25</th>\n",
              "      <td>Christmas</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014-01-01</th>\n",
              "      <td>NewYear</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014-12-25</th>\n",
              "      <td>Christmas</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-01-01</th>\n",
              "      <td>NewYear</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-12-25</th>\n",
              "      <td>Christmas</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-01-01</th>\n",
              "      <td>NewYear</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d42e6e36-2d71-458e-a965-937958e8d9e8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d42e6e36-2d71-458e-a965-937958e8d9e8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d42e6e36-2d71-458e-a965-937958e8d9e8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-eaafb7e0-742b-4f91-8eae-e235c8722fef\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-eaafb7e0-742b-4f91-8eae-e235c8722fef')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-eaafb7e0-742b-4f91-8eae-e235c8722fef button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"newyear_christmas_sales[['event_name_1', 'aggregate department sales countrywide for HOUSEHOLD_1_118']]\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2011-12-25 00:00:00\",\n        \"max\": \"2016-01-01 00:00:00\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"2015-12-25 00:00:00\",\n          \"2012-01-01 00:00:00\",\n          \"2014-01-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"event_name_1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"NewYear\",\n          \"Christmas\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"aggregate department sales countrywide for HOUSEHOLD_1_118\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 0,\n        \"max\": 11,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          11,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "CGCmYWoKrflO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "# Filter for NewYear and Christmas events\n",
        "newyear_christmas_sales = result_df_filtered[result_df_filtered['event_name_1'].isin(['NewYear', 'Christmas'])]\n",
        "\n",
        "# Group by year and event, then calculate the sum of sales\n",
        "grouped_sales = newyear_christmas_sales.groupby(['year', 'event_name_1'])[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].sum().reset_index()\n",
        "\n",
        "# Plot the trend\n",
        "plt.figure(figsize=(10, 6))\n",
        "for event in ['NewYear', 'Christmas']:\n",
        "  event_data = grouped_sales[grouped_sales['event_name_1'] == event]\n",
        "  plt.plot(event_data['year'], event_data[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"], label=event)\n",
        "\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Total Sales')\n",
        "plt.title('Sales Trend for NewYear and Christmas Events')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "lNzrmaHArZeF",
        "outputId": "c8e283cc-b9db-4aca-d6bc-5e511dcb07dd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "newyear_sales = result_df_filtered[result_df_filtered['event_name_1'] == 'NewYear']\n",
        "christmas_sales = result_df_filtered[result_df_filtered['event_name_1'] == 'Christmas']\n",
        "\n",
        "plt.figure(figsize=(15, 9))\n",
        "\n",
        "plt.plot(newyear_sales.index, newyear_sales[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"], label='New Year Sales')\n",
        "plt.plot(christmas_sales.index, christmas_sales[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"], label='Christmas Sales')\n",
        "\n",
        "plt.xlabel('Date')\n",
        "plt.ylabel('Aggregate Department Sales')\n",
        "plt.title('Time Series of Aggregate Department Sales for HOUSEHOLD_1_118 during New Year and Christmas')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 795
        },
        "id": "gT0qbbunxIlO",
        "outputId": "c051830d-95e9-4e81-a695-081be93decb2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x900 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABM0AAAMKCAYAAACWYLN6AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdd1wT9x8G8OcSRtiRrUxBcSC4B1pFrYparXvvtmpbrdUOq7WtWrd2qq2t2mrBWWdtq9bRusGNuEUFRFwosndyvz8w+RmWgMAFeN6vF6/Wy+XuSbjcHZ98hyCKoggiIiIiIiIiIiLSkkkdgIiIiIiIiIiISN+waEZERERERERERJQLi2ZERERERERERES5sGhGRERERERERESUC4tmREREREREREREubBoRkRERERERERElAuLZkRERERERERERLmwaEZERERERERERJQLi2ZERERERERERES5sGhGVAGMHj0a7u7uUseQjL6//qCgINStWxeGhoZQKpVSxyGq0g4dOgRBEHDo0KFy3e/p06fRunVrmJmZQRAEhIaGluv+iSqS9u3bo3379hVmu1T5rF27FoIgIDIystS2GRkZCUEQ8NVXX73UdvT9vpeoqmHRjEgigiAU6ae8//ArqsjISIwZMwaenp5QKBRwdHREu3btMHPmTKmjlatr165h9OjR8PT0xKpVq7By5coiPW/q1KkQBAGDBg0q44T678cff8TatWtLfbvt27fXfo5kMhksLS1Rp04djBgxAvv37y/1/ZWVe/fuYdasWRWmCLNhwwZ89913RV4/MzMT33//PRo3bgxLS0solUp4e3tj3LhxuHbtWtkFLUVZWVkYMGAA4uLi8O233yIoKAhubm5ltj9NYXDr1q35Pj569GiYm5vnWS6KIoKCgtCuXTsolUqYmprCx8cHX375JVJSUvKs7+7ujh49euS7jzNnzkAQhDyf3WPHjqFbt25wcnKCQqGAq6srevbsiQ0bNuisV9h17+23337ha3l+OxMnTsyz/MmTJ/j4449Rp04dKBQKWFtbIyAgAH/99VeedYv6h667u7vOOUWpVMLHxwfjxo3DyZMnC31uQa5fv44pU6agdevWUCgUL/VHfHG2tXnzZgwfPhy1a9eGIAiFFprCw8MxePBgODs7w9TUFHXr1sWXX36J1NTUEuWsrDTHx3vvvZfnsRd9ZsvD22+/DSMjI1y6dCnPY9nZ2fD19YW7u3u+5wICQkNDMXz4cLi4uMDY2BjW1tbo1KkT1qxZA5VKJXU8XLlyBbNmzSrVIiAR5TCQOgBRVRUUFKTz78DAQOzfvz/P8nr16mHVqlVQq9XlGa9QN2/eRPPmzWFiYoI33ngD7u7uuH//Ps6dO4dFixZh9uzZpbo/fXv9zzt06BDUajW+//571KpVq0jPEUURGzduhLu7O/78808kJSXBwsKijJPqrx9//BG2trYYPXp0qW/b2dkZCxYsAACkpKTg5s2b2L59O9atW4eBAwdi3bp1MDQ0LPX9lqZ79+5h9uzZcHd3R6NGjaSO80IbNmzApUuXMHny5CKt369fP+zZswdDhgzB2LFjkZWVhWvXruGvv/5C69atUbdu3bINXApu3bqFqKgorFq1Cm+99ZbUcfKlUqkwdOhQ/P7772jbti1mzZoFU1NTHD16FLNnz8aWLVtw4MABODg4lHgfW7ZswaBBg9CoUSO8//77qFatGiIiInDkyBGsWrUKQ4cO1Vm/c+fOGDlyZJ7teHl5lTgDkFM8evXVVxEbG4sxY8agWbNmiI+Px/r169GzZ0989NFHWLJkSYm23ahRI3z44YcAgKSkJFy9ehVbtmzBqlWrMGXKFHzzzTfF2l5wcDCWLl2K+vXro169ei9VHC/OtlasWIGzZ8+iefPmePLkSYHrRUdHo0WLFrCyssLEiRNhbW2N4OBgzJw5E2fPnsUff/xR4rxlYd++fVJHwKpVqzB9+nTUqFFD6ig6Fi5ciD/++ANvv/02jh49CkEQtI99++23uHjxIv7++2+YmZlJmFI/rV69Gm+//TYcHBwwYsQI1K5dG0lJSTh48CDefPNN3L9/H59++mmp7a8k971XrlzB7Nmz0b59e7ZSIyplLJoRSWT48OE6/w4JCcH+/fvzLNdH3377LZKTkxEaGpqnNcWjR49KbT8pKSkwMzPT66KG5vUWp1vmoUOHcPfuXfz7778ICAjA9u3bMWrUqDJKWLj09HQYGRlBJqucDY+trKzyfKYWLlyISZMm4ccff4S7uzsWLVokUbrCZWdn622xuLScPn0af/31F+bNm5fnD47ly5cjPj5emmDFVJLzwItozn+lZfHixfj999/zFIzGjRuHgQMHonfv3hg9ejT27NlT4n3MmjUL9evXR0hICIyMjHQey+/a4OXlVerXvKysLPTv3x9Pnz7FkSNH0LJlS+1jU6ZMwbBhw/DVV1+hWbNmJWrp6+TklCfzokWLMHToUHz77beoXbs23nnnnSJv7/XXX0d8fDwsLCzw1VdfvVTRrDjbCgoKgpOTE2QyGRo0aFDoevHx8Th27Bi8vb0B5BwzarUagYGBePr0KapVq1bizKUlNTUVpqameY678ubt7Y3r169j4cKFWLp0qaRZclMqlfj+++8xaNAgrFq1CuPGjQMA3LlzB7Nnz8bAgQPRvXv3Ms+hubZJ/bsqqpCQELz99tvw8/PD7t27db7knDx5Ms6cOZNv672SqAj3vURVUeX8K4moksk9tsHzXUl++OEHeHh4wNTUFF26dEF0dDREUcScOXPg7OwMExMT9OrVC3FxcXm2u2fPHrRt2xZmZmawsLDAa6+9hsuXL78wz61bt+Ds7Jxv9yN7e/sS7UfTBefWrVvo3r07LCwsMGzYsHxfPwCo1Wp899138Pb2hkKhgIODA8aPH4+nT5/qrHfmzBkEBATA1tYWJiYmqFmzJt54440XvkYgpwWUt7c3jI2NUaNGDUyYMEHnj3h3d3dtd1Q7OzsIgoBZs2a9cLvr169H/fr10aFDB3Tq1Anr16/Pd72oqCi8/vrrMDMzg729PaZMmYJ//vkn3267muPAxMQELVq0wNGjR/OM7aLpHrJp0yZ89tlncHJygqmpKRITEwEAJ0+eRNeuXWFlZQVTU1P4+/vj+PHjeXIdOnQIzZo1g0KhgKenJ37++WfMmjVL51trAFizZg06duwIe3t7GBsbo379+lixYoXOOu7u7rh8+TIOHz6s7fb0fOb4+HhMnjxZ2x2iVq1aWLRo0UsVk+RyubY1xvLly5GQkKDz+Lp169C0aVOYmJjA2toagwcPRnR0tM467du3R4MGDXD27Fm0bt1ae2z99NNPOutlZmbiiy++QNOmTWFlZQUzMzO0bdsW//33n856z3+mv/vuO3h6esLY2Bg//vgjmjdvDgAYM2aM9j3SdInT5AgLC4O/vz9MTU1Rq1YtbRegw4cPo2XLljAxMUGdOnVw4MCBPO9HTEwM3njjDTg4OMDY2Bje3t749ddfddbRHDu///475s2bB2dnZygUCrz66qu4efOmzvvy999/IyoqSpu1sG+8b926BQBo06ZNnsfkcjlsbGy0/46KisK7776LOnXqwMTEBDY2NhgwYECRu6IU5fhOSkrC5MmT4e7uDmNjY9jb26Nz5844d+5cgdsdPXo0/P39AQADBgzIcwz/+++/2vOfUqlEr169cPXqVZ1taD4/V65cwdChQ1GtWjW88sorRXpdRZGWloYlS5bAy8tL2/LyeT179sSoUaOwd+9ehISElHg/t27dQvPmzfP9Yzi/a0NZ2LZtGy5duoRp06bpFMyAnGPq559/hlKpLNK5uqhMTEwQFBQEa2trzJs3D6IoFvm51tbWpdbSuDjbcnFxKdKXJZrrQ+4WiNWrV4dMJitS4WPlypXw9PTUuT7lVtD4UvmNUfj8+bddu3YwNTXVFt0Luu696NylUZRraWHc3d0xcuRIrFq1Cvfu3Xvh+i86/4qiCFtbW3zwwQfaZWq1GkqlEnK5XOeeZNGiRTAwMEBycnKB+9MUxqZNm6YtZL/33nswNDTE999/X6RMwMtf265cuVJgxqLcOwD/7z5+7NgxtGjRAgqFAh4eHggMDMyz7uXLl9GxY0eYmJjA2dkZc+fOLfJ9xOzZsyEIAtavX5/v56tZs2b5tpTXHPfGxsZo3rw5Tp8+rfN4ce97N23ahKZNm8LCwgKWlpbw8fHR/s7Wrl2LAQMGAAA6dOiQZ4gXzXuluX8zMTGBj4+P9vHt27fDx8cHCoUCTZs2xfnz53X2HRYWhtGjR8PDw0M7JMsbb7yRp5VqSa6hRBUBW5oRVWDr169HZmYm3nvvPcTFxWHx4sUYOHAgOnbsiEOHDuGTTz7BzZs3sWzZMnz00Uc6Nz1BQUEYNWoUAgICsGjRIqSmpmLFihV45ZVXcP78+UL/0HVzc8OBAwfw77//omPHjoVmLM5+srOzERAQgFdeeQVfffUVTE1NC9zu+PHjsXbtWowZMwaTJk1CREQEli9fjvPnz+P48eMwNDTEo0eP0KVLF9jZ2WHatGlQKpWIjIzE9u3bX/jezpo1C7Nnz0anTp3wzjvv4Pr161ixYgVOnz6t3f53332HwMBA7NixAytWrIC5uTl8fX0L3W5GRga2bdum7d4zZMgQjBkzBg8ePICjo6N2vZSUFHTs2BH379/H+++/D0dHR2zYsCHPDSmQ081m4sSJaNu2LaZMmYLIyEj07t0b1apVg7Ozc57158yZAyMjI3z00UfIyMiAkZER/v33X3Tr1g1NmzbFzJkzIZPJtDeuR48eRYsWLQAA58+fR9euXVG9enXMnj0bKpUKX375Jezs7PLN5e3tjddffx0GBgb4888/8e6770KtVmPChAkAgO+++w7vvfcezM3NMWPGDAD//+MsNTUV/v7+iImJwfjx4+Hq6ooTJ05g+vTpuH//frHGzcpNLpdjyJAh+Pzzz3Hs2DG89tprAIB58+bh888/x8CBA/HWW28hNjYWy5YtQ7t27XD+/HmdlkRPnz5F9+7dMXDgQAwZMgS///473nnnHRgZGWkLs4mJiVi9erW262FSUhJ++eUXBAQE4NSpU3m6W65Zswbp6ekYN24cjI2N0adPHyQlJeGLL77AuHHj0LZtWwBA69atdXL06NEDgwcPxoABA7BixQoMHjwY69evx+TJk/H2229j6NChWLJkCfr374/o6Gjtjf/Dhw/RqlUr7bhQdnZ22LNnD958800kJibm6WK5cOFCyGQyfPTRR0hISMDixYsxbNgw7XhOM2bMQEJCAu7evYtvv/0WAAodj0pTeF+/fj3atGkDA4OCb0tOnz6NEydOaMdWioyMxIoVK9C+fXtcuXKl0PNFUY/vt99+G1u3bsXEiRNRv359PHnyBMeOHcPVq1fRpEmTfLc9fvx4ODk5Yf78+Zg0aRKaN2+uPYYPHDiAbt26wcPDA7NmzUJaWhqWLVuGNm3a4Ny5c3nOswMGDEDt2rUxf/78IhVekpKS8Pjx4zzLMzIydP597NgxPH36FO+//36B7/HIkSOxZs0a/PXXX2jVqtUL950fNzc3HDx4EHfv3s333JNbenp6vvktLS3zFGPyWy8/f/75JwDk2+0TyGl92qtXL/z222+4efNmkbvVv4i5uTn69OmDX375BVeuXNG2yqro2rdvj0WLFuHNN9/E7NmzYWNjgxMnTmDFihWYNGnSC1tD/vLLLxg/fjxat26NyZMn4/bt23j99ddhbW0NFxeXEud68uQJunXrhsGDB2P48OEv7Fb8onMXUPxraUFmzJiBwMDAF7Y2K8r5VxAEtGnTBkeOHNE+LywsDAkJCZDJZDh+/Lj2+nX06FE0bty40HMu8P8vBKdMmYKBAwdi165d+Omnn+Do6Fjka8LLXtusra0LzFeUeweNmzdvon///njzzTcxatQo/Prrrxg9ejSaNm2q/Qw+ePAAHTp0QHZ2NqZNmwYzMzOsXLkSJiYmhb5PQM59yMGDB9GuXTu4urq+cH2NDRs2ICkpCePHj4cgCFi8eDH69u2L27dv67QiK+p97/79+zFkyBC8+uqr2tbxV69exfHjx/H++++jXbt2mDRpEpYuXYpPP/0U9erVAwDtfzXv1dChQzF+/HgMHz4cX331FXr27ImffvoJn376Kd59910AwIIFCzBw4EBcv35dW1jfv38/bt++jTFjxsDR0RGXL1/GypUrcfnyZYSEhGi/NC3JNZSoQhCJSC9MmDBBLOgjOWrUKNHNzU3774iICBGAaGdnJ8bHx2uXT58+XQQgNmzYUMzKytIuHzJkiGhkZCSmp6eLoiiKSUlJolKpFMeOHauznwcPHohWVlZ5lud26dIl0cTERAQgNmrUSHz//ffFnTt3iikpKTrrFWc/o0aNEgGI06ZNe+HrP3r0qAhAXL9+vc56e/fu1Vm+Y8cOEYB4+vTpQl9Pbo8ePRKNjIzELl26iCqVSrt8+fLlIgDx119/1S6bOXOmCECMjY0t0ra3bt0qAhDDw8NFURTFxMREUaFQiN9++63Oel9//bUIQNy5c6d2WVpamli3bl0RgPjff/+JoiiKGRkZoo2Njdi8eXOd3/natWtFAKK/v7922X///ScCED08PMTU1FTtcrVaLdauXVsMCAgQ1Wq1dnlqaqpYs2ZNsXPnztplPXv2FE1NTcWYmBjtsvDwcNHAwCDP8fv8PjQCAgJEDw8PnWXe3t46OTXmzJkjmpmZiTdu3NBZPm3aNFEul4t37tzJ85zn+fv7i97e3gU+rjk+vv/+e1EURTEyMlKUy+XivHnzdNa7ePGiaGBgoLPc399fBCB+/fXX2mUZGRlio0aNRHt7ezEzM1MURVHMzs4WMzIydLb39OlT0cHBQXzjjTe0yzSfaUtLS/HRo0c6658+fVoEIK5Zsybf1whA3LBhg3bZtWvXRACiTCYTQ0JCtMv/+eefPNt58803xerVq4uPHz/W2e7gwYNFKysr7e9Qc+zUq1dP5/V8//33IgDx4sWL2mWvvfaazue1MGq1WvsaHBwcxCFDhog//PCDGBUVlWfd/I6n4OBgEYAYGBioXabJqvmMFOf4trKyEidMmFCk7M/T7HPLli06yzXHw5MnT7TLLly4IMpkMnHkyJHaZZrzyJAhQ4q1v8J+zMzMtOt/9913IgBxx44dBW4zLi5OBCD27dtXu8zNzU187bXX8l0/v+Pyl19+EQGIRkZGYocOHcTPP/9cPHr0qM55VKOw7Bs3btSup7k2FPbz/O+sUaNGopWVVaHv3zfffCMCEHft2iWK4v8/f0uWLCn0eYW9H6Ioit9++60IQPzjjz8K3U5BlixZIgIQIyIiSvT8km6roHOwxpw5c7TXfM3PjBkzXrjdzMxM0d7eXmzUqJHOeWPlypV5rk9r1qzJN2/uz7Mo/v+899NPP+XZp7+/f77XvRedu4pzLS3I88fHmDFjRIVCId67d08nx/PniKKef5csWSLK5XIxMTFRFEVRXLp0qejm5ia2aNFC/OSTT0RRFEWVSiUqlUpxypQpL8wpiqL41VdfiQBEa2trsU2bNtpzY1Ezlca1rSBFvXdwc3MTAYhHjhzRLnv06JFobGwsfvjhh9plkydPFgGIJ0+e1FnPysrqhZ+RCxcuiADE999/v0jZNa/XxsZGjIuL0y7/448/RADin3/+qV1WnPve999/X7S0tBSzs7ML3PeWLVvyfFY0NO/ViRMntMs09wQmJiY619yff/45z3by+51s3Lgxz/tf0msokb5j90yiCmzAgAGwsrLS/lvTFWX48OE6rQlatmyJzMxMxMTEAMj5xig+Ph5DhgzB48ePtT9yuRwtW7bMtzXT87y9vbWzCEVGRuL7779H79694eDggFWrVmnXK8l+ijIWzJYtW2BlZYXOnTvrbLdp06YwNzfXblfTKuivv/5CVlbWC7erceDAAWRmZmLy5Mk63VfGjh0LS0tL/P3330XeVm7r169Hs2bNtK0bNN1Vc3fR3Lt3L5ycnPD6669rlykUCowdO1ZnvTNnzuDJkycYO3aszu982LBhBY4zM2rUKJ1vWENDQxEeHo6hQ4fiyZMn2vczJSUFr776Ko4cOQK1Wg2VSoUDBw6gd+/eOgMc16pVC926dcuzn+f3kZCQgMePH8Pf3x+3b9/O0yUyP1u2bEHbtm1RrVo1nd9zp06doFKpdL55LwnNt/FJSUkAcronqNVqDBw4UGd/jo6OqF27dp7j1cDAAOPHj9f+28jICOPHj8ejR49w9uxZADkt2jQtZtRqNeLi4pCdnY1mzZrl212hX79++bbae9HrGDx4sPbfderUgVKpRL169XS6p2n+//bt2wByuv1s27YNPXv2hCiKOq85ICAACQkJeTKOGTNGpwWQpuWbZpvFJQgC/vnnH8ydOxfVqlXDxo0bMWHCBLi5uWHQoEE6XY+eP56ysrLw5MkT1KpVC0qlstCuH0U9voGcc8bJkyeL1K3qRe7fv4/Q0FCMHj1ap1WFr68vOnfujN27d+d5zvOzRhbFF198gf379+f56dKli856mmO8sK57msc03fFK4o033sDevXvRvn17HDt2DHPmzEHbtm1Ru3ZtnDhxIs/6vXr1yjd/hw4ddNZTKBT5rpffLLhFmVilNF5rfnKfUyoLd3d3tGvXDitXrsS2bdvwxhtvYP78+Vi+fHmhzztz5gwePXqknbVRY/To0Tr3LiVhbGyMMWPGFHn9F527SnItLcxnn32G7OxsLFy4MN/Hi3P+bdu2LVQqlfYzdPToUbRt2xZt27bVdnW9dOkS4uPjta/rRSZPngxfX1/Ex8fj559/hiAIxcpUlte24tw71K9fX+c129nZoU6dOjrXpN27d6NVq1baFsWa9TRdIQujOUcUtwv1oEGDdI6bwq6VRbnvVSqVSElJeamZv+vXrw8/Pz/tvzX3BB07dtRpRZf7XgHQ/Z1oWghrWiQ///suzWsokT5h90yiCix3U3HNTWjuLg+a5ZrxvsLDwwGgwK6VlpaWL9y3l5cXgoKCoFKpcOXKFfz1119YvHgxxo0bh5o1a6JTp07F3o+BgUGRukCEh4cjISGhwDFyNON0+Pv7o1+/fpg9eza+/fZbtG/fHr1798bQoUNhbGxc4PajoqIA5BQfnmdkZAQPDw/t48UVHx+P3bt3Y+LEiTpjqbRp0wbbtm3DjRs3tLPGRUVFwdPTM884Ybm7Emmy5F5uYGBQYBfbmjVr6vxb83sqbDKChIQEpKenIy0tLd/uTPktO378OGbOnIng4GCkpqbm2d6L/mgKDw9HWFhYgTfaLzvphGbcF83NcHh4OERRRO3atfNdP/fAvDVq1MjTNUnz+4uMjNTeUP7222/4+uuvce3aNZ3ibe7fQ0HLXsTZ2TnPcWJlZfXC80BsbCzi4+OxcuVKrFy5Mt9t536Pc59zNH8U5B5LsDiMjY0xY8YMzJgxA/fv38fhw4fx/fff4/fff4ehoSHWrVsHIGdcrgULFmDNmjWIiYnR6b5YWBG2qMd3tWrVsHjxYowaNQouLi5o2rQpunfvjpEjR8LDw6PYr6ug8wiQ02Xmn3/+yTPYf3F//z4+PujUqVOe5Zr3TENzjBdWzClKYS0/uY+9gIAABAQEIDU1FWfPnsXmzZvx008/oUePHrh27ZrOedvZ2Tnf/LnJ5fIirafJ/6KunCV9rS+S+5xSGWzatAnjxo3DjRs3tNfnvn37Qq1W45NPPsGQIUN0xh58nuYzkPucamhoWKLP1POcnJyKNZD8i85dJbmWFsbDwwMjRozAypUrMW3atDyPF+f826RJE+1MtwEBAdoZbx0dHbFs2TKkp6dri2dFHQtRLpejcePGuHXrlrYbY3GvCWV1bSvOvUN+XSarVaumc02KiorKM74hkP+5OTfNfWpxC+FFvVYW9b733Xffxe+//45u3brByckJXbp0wcCBA9G1a9cSZyrq3wwAEBcXh9mzZ2PTpk157guev/6W5jWUSJ+waEZUgcnl8mIt1/yRqWlVERQUpDOOlkZh4wrlty8fHx/4+PjAz88PHTp0wPr169GpU6di78fY2LhIAxOr1WrY29sXOIC+psgiCAK2bt2KkJAQ/Pnnn/jnn3/wxhtv4Ouvv0ZISMgLx/0obVu2bEFGRga+/vprfP3113keX79+PWbPnl3mOXKP46H5PS1ZsiTPOCQa5ubmSE9PL/I+bt26hVdffRV169bFN998AxcXFxgZGWH37t349ttvizQAr1qtRufOnTF16tR8H9cUqEpKM9uV5o8ktVoNQRCwZ8+efD9DJTle1q1bh9GjR6N37974+OOPYW9vD7lcjgULFmgHwX9eUcZYye1lzwPDhw8vsKCUe4y+F23zZVWvXh2DBw9Gv3794O3tjd9//x1r166FgYEB3nvvPaxZswaTJ0+Gn58frKysIAgCBg8eXOjxVNTjG8gZJLtt27bYsWMH9u3bhyVLlmDRokXYvn17vq0pS1tJfv9FoRnXJiwsDL179853nbCwMAA5rRE0FAoF0tLS8l1f88esQqHI93FTU1NtaxhbW1vMnj0be/bsKfOZguvVq4fQ0FDcuXOnwDGI8nutpSH3OaUy+PHHH9G4ceM8f9i//vrrWLt2Lc6fP1/kgmZhchdfNVQqVb7Li/tZKetzV35mzJiBoKAgLFq0KM/nrjjnX0NDQ7Rs2RJHjhzBzZs38eDBA7Rt2xYODg7IysrCyZMncfToUdStW7fYLZVLmqmsrm3FvXco699rrVq1YGBggIsXLxbreUXNVdT7Xnt7e4SGhuKff/7Bnj17sGfPHqxZswYjR47Eb7/99lKZipJ14MCBOHHiBD7++GM0atQI5ubmUKvV6Nq1q87vROprKFFZYdGMqAry9PQEkHMRLo2bXY1mzZoByOmWVJb78fT0xIEDB9CmTZsi3Yi1atUKrVq1wrx587BhwwYMGzYMmzZtwltvvZXv+prBya9fv67z7VhmZiYiIiJK/FrWr1+PBg0aaGfcfN7PP/+MDRs2aItmbm5uuHLlCkRR1PljIvdsX5qsN2/e1OnSlJ2djcjIyBdOTAD8//dkaWlZ6Guzt7eHQqHId8ax3Mv+/PNPZGRkYNeuXTp/uObXJbegP5Y8PT2RnJxcqseOhkqlwoYNG2Bqaqr9Zt7T0xOiKKJmzZpFKsjdu3cvT0uhGzduAIC2ZcLWrVvh4eGB7du367zO/I6BghT0/rwsOzs7WFhYQKVSlep7XBp5DQ0N4evri/DwcG0X2a1bt2LUqFE6Bef09HSdLpz5KerxrVG9enW8++67ePfdd/Ho0SM0adIE8+bNK/YN//PnkdyuXbsGW1vbFw6iXlpeeeUVKJVKbNiwATNmzMj3jyTNjHM9evTQLtOch/KjeV35zaKcW+5rQ1nq0aMHNm7ciMDAQHz22Wd5Hk9MTMQff/yBunXrlmpxKzk5GTt27ICLi4vO4NsV3cOHD/PtnqhpWZSdnV3gczXHRnh4uE6L86ysLERERKBhw4baZZp95P48l7Rld3GVxrU0N09PTwwfPhw///xznpZOxT3/tm3bFosWLcKBAwdga2uLunXrQhAEeHt74+jRozh69KjOZ7ckipOpNK5t+SnOvUNRubm5aVscPy+/c3Nupqam6NixI/79919ER0e/1OQVL8vIyAg9e/ZEz549oVar8e677+Lnn3/G559/jlq1apXZvcLTp09x8OBBzJ49G1988YV2eX7vKVB611AifcIxzYiqoICAAFhaWmL+/Pn5jvUVGxtb6POPHj2a7/M0Y/Romry/7H4KMnDgQKhUKsyZMyfPY9nZ2dqb7qdPn+b5Vk/T0iT37HLP69SpE4yMjLB06VKd5//yyy9ISEjQzlRVHNHR0Thy5AgGDhyI/v375/kZM2YMbt68qZ3JKyAgADExMdi1a5d2G+np6TpjxgE5f4za2Nhg1apVOn+8rF+/vshd5po2bQpPT0989dVX+U5Vr/k9abpI7dy5U2e8ips3b2LPnj06z9H8UZ67C92aNWvybN/MzCzfwsfAgQMRHByMf/75J89j8fHxhf6xVhiVSoVJkybh6tWrmDRpkrb7Rd++fSGXyzF79uw8x40oinmmVs/OzsbPP/+s/XdmZiZ+/vln2NnZoWnTpgDyfx9OnjyJ4ODgIufVFFZeVBwqLrlcjn79+mHbtm3aFjLPK+nn08zMrEhj1gE5N9137tzJszw+Ph7BwcGoVq2atuWEXC7P83tZtmxZgS1RNIp6fKtUqjy57e3tUaNGjULPFwWpXr06GjVqhN9++03nd3fp0iXs27cP3bt3L/Y2S8rU1BQfffQRrl+/rp2l9nl///031q5di4CAAJ2ZM7t37467d+9i586dOutnZGRg9erVsLe315kR7eDBg/nuP/e1oSz1798f9evXx8KFC3HmzBmdx9RqNd555x08ffr0pf+4f15aWhpGjBiBuLg4zJgxo8z+eJWCl5cXzp8/r/1CQGPjxo2QyWSFFpOaNWsGOzs7/PTTT8jMzNQuX7t2bZ7zmaa4/fxYlSqVqsBugqWtNK6l+fnss8+QlZWFxYsX6ywv7vm3bdu2yMjIwHfffYdXXnlFe4y1bdsWQUFBuHfvXpHHMytIcTKVxrWtoAy5t1vQvUNRde/eHSEhITh16pR2WWxsbIG9FXKbOXMmRFHEiBEj8r2GnD17tsitvUoq9/3H8589zfWpLO8VgLyt5HLPYF7a11AifcKWZkRVkKWlJVasWIERI0agSZMmGDx4MOzs7HDnzh38/fffaNOmTaED/C5atAhnz55F3759tRftc+fOITAwENbW1topyV92PwXx9/fH+PHjsWDBAoSGhqJLly4wNDREeHg4tmzZgu+//x79+/fHb7/9hh9//BF9+vSBp6cnkpKSsGrVKlhaWhb6B6udnR2mT5+O2bNno2vXrnj99ddx/fp1/Pjjj2jevDmGDx9e7MwbNmyAKIo6A/s/r3v37jAwMMD69evRsmVLjB8/HsuXL8eQIUPw/vvvo3r16li/fr22K5TmhtnIyAizZs3Ce++9h44dO2LgwIGIjIzE2rVr8x0TLT8ymQyrV69Gt27d4O3tjTFjxsDJyQkxMTH477//YGlpiT///BMAMGvWLOzbtw9t2rTBO++8A5VKheXLl6NBgwYIDQ3VbrNLly7ab0XHjx+P5ORkrFq1Cvb29nlamzRt2hQrVqzA3LlzUatWLdjb26Njx474+OOPsWvXLvTo0UM7hXxKSgouXryIrVu3IjIyEra2toW+toSEBO34Tqmpqbh58ya2b9+OW7duYfDgwTqFV09PT8ydOxfTp09HZGQkevfuDQsLC0RERGDHjh0YN24cPvroI+36NWrUwKJFixAZGQkvLy9s3rwZoaGhWLlypXb8sx49emD79u3o06cPXnvtNUREROCnn35C/fr18735zo+npyeUSiV++uknWFhYwMzMDC1btizR+Ge5LVy4EP/99x9atmyJsWPHon79+oiLi8O5c+dw4MABxMXFFXubTZs2xebNm/HBBx+gefPmMDc3R8+ePfNd98KFCxg6dCi6deuGtm3bwtraGjExMfjtt99w7949fPfdd9ob9h49eiAoKAhWVlaoX78+goODceDAgQLHU9Io6vGdlJQEZ2dn9O/fHw0bNoS5uTkOHDiA06dP59uduiiWLFmCbt26wc/PD2+++SbS0tKwbNkyWFlZYdasWSXaZklNmzYN58+fx6JFixAcHIx+/frBxMQEx44dw7p161CvXr08f/iNGzcOv/76KwYMGIA33ngDjRs3xpMnT7B582ZcunQJgYGBOuNK9erVCzVr1kTPnj3h6emJlJQUHDhwAH/++SeaN2+e5zi4ceNGnvHXAMDBwQGdO3cu0es0MjLC1q1b8eqrr+KVV17BmDFj0KxZM8THx2PDhg04d+4cPvzwQ53JMzQOHjyYbzf03r17o0GDBgCAmJgYbebk5GRcuXIFW7ZswYMHD/Dhhx/qTA5SFAkJCVi2bBmAnLGcAGD58uVQKpVQKpWYOHFimWzryJEj2gJVbGwsUlJSMHfuXABAu3bt0K5dOwDAxx9/jD179qBt27aYOHEibGxs8Ndff2HPnj146623dCaFyc3Q0BBz587F+PHj0bFjRwwaNAgRERFYs2ZNnjGOvL290apVK0yfPh1xcXGwtrbGpk2bSvzlSHGVxrU0P5rWZvkVVYpz/vXz84OBgQGuX7+OcePGaZe3a9cOK1asAICXLpoVJ1NpXNvyU5x7h6KaOnUqgoKC0LVrV7z//vswMzPDypUr4ebmpu2qXZjWrVvjhx9+wLvvvou6detixIgRqF27NpKSknDo0CHs2rVL+9kpK2+99Rbi4uLQsWNHODs7IyoqCsuWLUOjRo20LVsbNWoEuVyORYsWISEhAcbGxujYsWOB4/8WlaWlJdq1a4fFixcjKysLTk5O2LdvHyIiInTWK4trKJHeKJc5OonohSZMmCAW9JHMPfW0ZkrrJUuW6KyX35Tmovj/qdxPnz6dZ/2AgADRyspKVCgUoqenpzh69GjxzJkzhWY9fvy4OGHCBLFBgwailZWVaGhoKLq6uoqjR48Wb926lWf9ouxn1KhRopmZWZFev8bKlSvFpk2biiYmJqKFhYXo4+MjTp06VTvF+7lz58QhQ4aIrq6uorGxsWhvby/26NHjha9PY/ny5WLdunVFQ0ND0cHBQXznnXfEp0+f6qwzc+ZMEYAYGxtb6LZ8fHxEV1fXQtdp3769aG9vr53u/vbt2+Jrr70mmpiYiHZ2duKHH34obtu2TQQghoSE6DxXMwW9sbGx2KJFC/H48eNi06ZNxa5du2rXKej40Dh//rzYt29f0cbGRjQ2Nhbd3NzEgQMHigcPHtRZ7+DBg2Ljxo1FIyMj0dPTU1y9erX44YcfigqFQme9Xbt2ib6+vqJCoRDd3d3FRYsWib/++mueKd4fPHggvvbaa6KFhYUIQPT399c+lpSUJE6fPl2sVauWaGRkJNra2oqtW7cWv/rqKzEzM7PQ99Pf318EoP0xNzcXa9euLQ4fPlzct29fgc/btm2b+Morr4hmZmaimZmZWLduXXHChAni9evXdbbt7e0tnjlzRvTz8xMVCoXo5uYmLl++XGdbarVanD9/vvZ307hxY/Gvv/4q8mda448//hDr168vGhgYiADENWvW6OTIzc3NTXzttdfyLAeQZzr4hw8fihMmTBBdXFxEQ0ND0dHRUXz11VfFlStXatcp6NjR5NbkEUVRTE5OFocOHSoqlUoRQL6f3ef3vXDhQtHf31+sXr26aGBgIFarVk3s2LGjuHXrVp11nz59Ko4ZM0a0tbUVzc3NxYCAAPHatWuim5ubOGrUqDxZ//vvP53nv+j4zsjIED/++GOxYcOGooWFhWhmZiY2bNhQ/PHHHwvM/6L3RxRF8cCBA2KbNm1EExMT0dLSUuzZs6d45coVnXWKeh4pyv5EseDzqUqlEtesWSO2adNGtLS0FBUKhejt7S3Onj1bTE5OzndbT58+FadMmSLWrFlTNDQ0FC0tLcUOHTqIe/bsybPuxo0bxcGDB4uenp6iiYmJqFAoxPr164szZswQExMTddZ9/rOZ++f5c0Bh1wbNdnIf06Ioio8ePRI/+OADsVatWqKxsbGoVCrFTp06ibt27cqzruY4LugnKChIFMWcz5VmmSAIoqWlpejt7S2OHTtWPHnyZIEZC1PYvgv77LzstjTHXH4/M2fO1Fn35MmTYrdu3URHR0fR0NBQ9PLyEufNm6e9Vr3Ijz/+KNasWVM0NjYWmzVrJh45ckT09/fX+T2LoijeunVL7NSpk2hsbCw6ODiIn376qbh///48n+eCznuax57fbnHOXaJYtGtpQQo674aHh4tyuTzfHEU5/2o0b95cBKBzrN29e1cEILq4uLwwX24FfbaKkqm0rm35Keq9Q0Hvd37HVlhYmOjv7y8qFArRyclJnDNnjvjLL7/k2WZhzp49Kw4dOlSsUaOGaGhoKFarVk189dVXxd9++01UqVQvfL25P1vFue/dunWr2KVLF9He3l40MjISXV1dxfHjx4v379/Xed6qVatEDw8P7fGm+dwU554gv9dw9+5dsU+fPqJSqRStrKzEAQMGiPfu3dN5TS9zDSXSd4IoluEImEREVKq+++47TJkyBXfv3oWTk1OB66nVatjZ2aFv3755unSWhd69e+Py5csFjnFR2bRv3x6PHz/OtwsLERFVDuV9LSUiIv3DMc2IiPRU7lnr0tPT8fPPP6N27do6BbP09PQ8Y00EBgYiLi4O7du3L/Nc4eHh2L17d5nsi4iIqDyU97WUiIgqBo5pRkSkp/r27QtXV1c0atRIOzbXtWvX8gxeGxISgilTpmDAgAGwsbHBuXPn8Msvv6BBgwYYMGBAqefy8PDA6NGj4eHhgaioKKxYsQJGRkaYOnVqqe+LiKgiiouL0xn8Pje5XK6d5KI8t0UFK+9rKRERVQwsmhER6amAgACsXr0a69evh0qlQv369bFp0yYMGjRIZz13d3e4uLhg6dKl2gGUR44ciYULF+oM0l1aunbtio0bN+LBgwcwNjaGn58f5s+fj9q1a5f6voiIKqK+ffvi8OHDBT7u5uaGyMjIct8WFay8r6VERFQxcEwzIiIiIqJSdPbsWTx9+rTAx01MTNCmTZty3xYREREVD4tmREREREREREREuXAiACIiIiIiIiIiolwq/ZhmarUa9+7dg4WFBQRBkDoOERERERERERFJRBRFJCUloUaNGpDJCm9LVumLZvfu3YOLi4vUMYiIiIiIiIiISE9ER0fD2dm50HUqfdHMwsICQM6bYWlpKXGaspOVlYV9+/ahS5cuMDQ0lDoOSYjHAj2PxwNp8Fig5/F4IIDHAeXFY4IAHgeUV2U7JhITE+Hi4qKtFxWm0hfNNF0yLS0tK33RzNTUFJaWlpXiIKaS47FAz+PxQBo8Fuh5PB4I4HFAefGYIIDHAeVVWY+JogzhxYkAiIiIiIiIiIiIcmHRjIiIiIiIiIiIKBcWzYiIiIiIiIiIiHKp9GOaEREREREREVH5E0UR2dnZUKlUUkehl5CVlQUDAwOkp6dXmN+loaEh5HL5S2+HRTMiIiIiIiIiKlWZmZm4f/8+UlNTpY5CL0kURTg6OiI6OrpIg+frA0EQ4OzsDHNz85faDotmRERERERERFRq1Go1IiIiIJfLUaNGDRgZGVWYYgvlpVarkZycDHNzc8hk+j/KlyiKiI2Nxd27d1G7du2XanHGohkRERERERERlZrMzEyo1Wq4uLjA1NRU6jj0ktRqNTIzM6FQKCpE0QwA7OzsEBkZiaysrJcqmlWMV0tEREREREREFUpFKbBQ5VNaLRt5BBMREREREREREeXCohkREREREREREVEuLJoREREREREREVGZEQQBO3fulDpGsbFoRkREREREREQEYPTo0RAEAQsXLtRZvnPnznKbAfTGjRswNTXFhg0bdJar1Wq0bt0a/fv3L5ccGqtWrcIrr7wCS0tLKJVKNG7cGAsWLCjXDFJh0YyIiIiIiIiI6BmFQoFFixbh6dOnkuzfy8sLCxcuxHvvvYf79+9rl3/99de4ffs2fvrpp1LfZ2ZmZr7Lf/31V3zwwQcYP348zp07h+PHj2Pq1KlITk4u9Qz6iEUzIiIiIiIiIipToigiNTNbkh9RFIuVtVOnTnB0dHxha6pjx46hbdu2MDExgYuLCyZNmoSUlBQAwPLly9GgQQPtupqWas8XvDp16oTPPvss322/9957aNiwIcaOHQsAuHbtGr744gusXLkStra2WL16NerVqweFQoG6devixx9/1Hn+J598Ai8vL5iamsLDwwOff/45srKytI/PmjULjRo1wurVq1GzZk0oFIp8c+zatQsDBgzAiBEjUKtWLXh7e2PIkCGYN2+edp3Tp0+jc+fOsLW1hZWVFfz9/XHu3LlC37vo6GgMHDgQSqUS1tbW6NWrFyIjI7WPHzp0CC1atICZmRmUSiXatGmDqKioQrdZFgzKfY9EREREREREVKWkZalQ/4t/JNn3lS8DYGpU9PKHXC7H/PnzMXToUEyaNAnOzs551rl16xa6du2KuXPn4tdff0VsbCwmTpyIiRMnYs2aNfD398ekSZMQGxsLOzs7HD58GLa2tjh06BDefvttZGVlITg4GNOmTcs3gyAIWLNmDXx9fbFq1Sr88ssvGDx4MF5//XWsX78eX3zxBZYvX47GjRvj/PnzGDt2LMzMzDBq1CgAgIWFBdauXYsaNWrg4sWLGDt2LCwsLDB16lTtPm7evIlt27Zh+/btkMvl+eZwdHTE4cOHcefOHZ0i4POSkpIwatQoLFu2DKIo4uuvv0b37t0RHh4OCwuLPOtnZWUhICAAfn5+OHr0KAwMDDB37lx07doVYWFhkMlk6N27N8aOHYuNGzciMzMTp06dKrfusc9j0YyIiIiIiIiI6Dl9+vRBo0aNMHPmTPzyyy95Hl+wYAGGDRuGyZMnAwBq166NpUuXwt/fHytWrECDBg1gbW2Nw4cPo3///jh06BA+/PBDfP/99wCAU6dOISsrC61bty4wg5ubG7777ju89dZbcHZ2xr59+wAAM2fOxNdff42+ffsCAGrWrIkrV67g559/1hbNnm/B5u7ujo8++gibNm3SKZplZmYiMDAQdnZ2BWaYOXMm+vbti4YNG8LLywt+fn7o3r07+vfvD5ksp/Nix44ddZ6zcuVKKJVKHD58GD169Mizzc2bN0OtVmP16tXaQtiaNWugVCpx6NAhNGvWDAkJCejRowc8PT0BAPXq1SswY1li0YyIiIiIiIiIypSJoRxXvgyQbN8lsWjRInTs2BEfffRRnscuXLiAsLAwrF+/XrtMFEWo1WpERESgXr16aNeuHQ4dOoROnTrhypUrePfdd7F48WJcu3YNhw8fRvPmzWFqalpohjFjxuDzzz/He++9B0tLS6SkpODWrVt48803tV03ASA7OxtWVlbaf2/evBlLly7FrVu3kJycjOzsbFhaWups283NrdCCGQBUr14dx48fR0hICM6fP4/g4GCMGjUKq1evxt69eyGTyfDw4UN89tlnOHToEB49egSVSoXU1FTcuXMn321euHABN2/ezNMKLT09Hbdu3UKXLl0wevRoBAQEoHPnzujUqRMGDhyI6tWrF5q1LLBoRkRERERERERlShCEYnWR1Aft2rVDQEAApk+fjtGjR+s8lpycjPHjx2PSpEl5nufq6goAaN++PVauXImjR4+icePGsLS01BbSDh8+DH9//yLlMDAwgIGBgXa/QM6Mli1bttRZT9PFMjg4GMOGDcPs2bMREBAAKysrbNq0CV9//bXO+mZmZkXaPwDUr18frVq1woQJE/D222+jbdu2OHz4MDp06IBRo0bhyZMn+P777+Hm5gZjY2P4+fkVOLlAcnIymjZtqlNw1NAU8dasWYNJkyZh79692Lx5Mz777DPs378frVq1KnLm0lCxjlgiIiIiIiIionKycOFCNGrUCHXq1NFZ3qRJE1y5cgW1atUq8Ln+/v6YPHkytmzZgvbt2wPIKaQdOHAAx48fx4cffljsPA4ODqhRowZu376NYcOG5bvOiRMn4ObmhhkzZmiXleYg+vXr1wcA7aQHx48fx48//oju3bsDyBnk//HjxwU+v0mTJti8eTPs7e3ztH57XuPGjdG4cWNMnz4dfn5+2LBhQ7kXzTh7JhERERERERFRPnx8fDBs2DAsXbpUZ/knn3yCEydOYOLEiQgNDUV4eDj++OMPTJw4UbuOr68vqlWrhg0bNugUzXbu3ImMjAy0adOmRJlmz56NBQsWYOnSpbhx4wYuXryINWvW4JtvvgGQM77anTt3sGnTJty6dQtLly7Fjh07SrSvd955B3PnzkVISAiioqIQEhKCkSNHws7ODn5+ftr9BQUF4erVqzh58iSGDRsGExOTArc5bNgw2NraolevXjh69CgiIiJw6NAhTJo0CXfv3kVERASmT5+O4OBgREVFYd++fQgPD5dkXDMWzYiIiIiIiIiICvDll19CrVbrLPP19cXhw4dx48YNtG3bFo0bN8YXX3yBGjVqaNcRBAFt27aFIAh45ZVXtM+ztLREs2bNitU98nlvvfUWVq9ejTVr1sDHxwf+/v5Yu3YtatasCQB4/fXXMWXKFEycOBGNGjXCiRMn8Pnnn5doX506dUJISAjGjBmDunXrol+/flAoFDh48CBsbGwAAL/88guePn2KJk2aYMSIEZg0aRLs7e0L3KapqSmOHDkCV1dX9O3bF/Xq1cObb76J9PR0WFpawtTUFNeuXUO/fv3g5eWFcePGYcKECRg/fnyJXsPL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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "# Calculate moving average\n",
        "window_size = 7\n",
        "result_df_filtered['moving_avg'] = result_df_filtered[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].rolling(window=window_size).mean()\n",
        "\n",
        "# Calculate standard deviation\n",
        "result_df_filtered['std_dev'] = result_df_filtered[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].rolling(window=window_size).std()\n",
        "\n",
        "# Define threshold for anomalies\n",
        "threshold = 2\n",
        "\n",
        "# Identify anomalies\n",
        "result_df_filtered['anomaly'] = np.abs(result_df_filtered[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"] - result_df_filtered['moving_avg']) > threshold * result_df_filtered['std_dev']\n",
        "\n",
        "# Plot anomalies\n",
        "plt.figure(figsize=(15, 9))\n",
        "plt.plot(result_df_filtered.index, result_df_filtered[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"], label='Aggregate Sales')\n",
        "plt.plot(result_df_filtered.index, result_df_filtered['moving_avg'], label='Moving Average')\n",
        "plt.scatter(result_df_filtered[result_df_filtered['anomaly']].index, result_df_filtered[result_df_filtered['anomaly']][\"aggregate department sales countrywide for HOUSEHOLD_1_118\"], color='red', label='Anomalies')\n",
        "\n",
        "plt.xlabel('Date')\n",
        "plt.ylabel('Aggregate Department Sales')\n",
        "plt.title('Anomalies in Aggregate Department Sales for HOUSEHOLD_1_118')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "9z1SYzmJyZz2",
        "outputId": "960e43b6-09b5-428e-d5eb-4ae670454d29"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-122-776dcbd74b2b>:5: PerformanceWarning:\n",
            "\n",
            "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "\n",
            "<ipython-input-122-776dcbd74b2b>:5: SettingWithCopyWarning:\n",
            "\n",
            "\n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "\n",
            "<ipython-input-122-776dcbd74b2b>:8: PerformanceWarning:\n",
            "\n",
            "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "\n",
            "<ipython-input-122-776dcbd74b2b>:8: SettingWithCopyWarning:\n",
            "\n",
            "\n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "\n",
            "<ipython-input-122-776dcbd74b2b>:14: PerformanceWarning:\n",
            "\n",
            "DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "\n",
            "<ipython-input-122-776dcbd74b2b>:14: SettingWithCopyWarning:\n",
            "\n",
            "\n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x900 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "# Calculate aggregate sales for each event\n",
        "event_sales = result_df.groupby('event_name_1')[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].sum().sort_values(ascending=False)\n",
        "\n",
        "# Select top 10 events\n",
        "top_10_events = event_sales.head(10)\n",
        "\n",
        "# Create interactive table\n",
        "fig = go.Figure(data=[go.Table(\n",
        "    header=dict(values=['Event Name', 'Aggregate Sales'],\n",
        "                fill_color='paleturquoise',\n",
        "                align='left'),\n",
        "    cells=dict(values=[top_10_events.index, top_10_events.values],\n",
        "               fill_color='lavender',\n",
        "               align='left'))\n",
        "])\n",
        "\n",
        "fig.update_layout(width=800, height=400)\n",
        "fig.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 417
        },
        "id": "WRB2vQKkzAMc",
        "outputId": "e038e9fa-ebb5-4e47-a92c-c13c3904d250"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"3be270c9-6433-4c67-b1e7-d49c95169672\" class=\"plotly-graph-div\" style=\"height:400px; width:800px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"3be270c9-6433-4c67-b1e7-d49c95169672\")) {                    Plotly.newPlot(                        \"3be270c9-6433-4c67-b1e7-d49c95169672\",                        [{\"cells\":{\"align\":\"left\",\"fill\":{\"color\":\"lavender\"},\"values\":[[\"SuperBowl\",\"OrthodoxEaster\",\"LaborDay\",\"MemorialDay\",\"Easter\",\"Pesach End\",\"Eid al-Fitr\",\"Purim End\",\"VeteransDay\",\"PresidentsDay\"],[87,81,79,61,55,55,54,54,51,49]]},\"header\":{\"align\":\"left\",\"fill\":{\"color\":\"paleturquoise\"},\"values\":[\"Event Name\",\"Aggregate Sales\"]},\"type\":\"table\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"width\":800,\"height\":400},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('3be270c9-6433-4c67-b1e7-d49c95169672');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**THE OUTLIERS FOUND IN ABOVE TIME SERIES PLOT**"
      ],
      "metadata": {
        "id": "nxnvhCKSfpPO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "Q1 = result_df_filtered[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].quantile(0.25)\n",
        "Q3 = result_df_filtered[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].quantile(0.75)\n",
        "IQR = Q3 - Q1\n",
        "\n",
        "lower_bound = Q1 - 1.5 * IQR\n",
        "upper_bound = Q3 + 1.5 * IQR\n",
        "\n",
        "outliers = result_df_filtered[(result_df_filtered[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"] < lower_bound) | (result_df_filtered[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"] > upper_bound)]\n",
        "\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(result_df_filtered.index, result_df_filtered[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"], label='Aggregate Sales')\n",
        "plt.scatter(outliers.index, outliers[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"], color='red', label='Outliers')\n",
        "plt.xlabel('Date')\n",
        "plt.ylabel('Aggregate Department Sales')\n",
        "plt.title('Time Series of Aggregate Department Sales for HOUSEHOLD_1_118 with Outliers')\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "fCpSz7N2bF3e",
        "outputId": "df6ec79e-bfb6-483c-a2e7-95c864bd7ece"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Labelled **Outliers**"
      ],
      "metadata": {
        "id": "FfSaPAiyhaRE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "W7MmKEUIhU8Z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "Q1 = result_df_filtered[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].quantile(0.25)\n",
        "Q3 = result_df_filtered[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].quantile(0.75)\n",
        "IQR = Q3 - Q1\n",
        "\n",
        "lower_bound = Q1 - 1.5 * IQR\n",
        "upper_bound = Q3 + 1.5 * IQR\n",
        "\n",
        "outliers = result_df_filtered[\n",
        "    ((result_df_filtered[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"] < lower_bound) |\n",
        "     (result_df_filtered[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"] > upper_bound) |\n",
        "     (result_df_filtered[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"] <= 1)) &\n",
        "    (result_df_filtered['event_name_1'].notna())\n",
        "]\n",
        "\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(result_df_filtered.index, result_df_filtered[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"], label='Aggregate Sales')\n",
        "plt.scatter(outliers.index, outliers[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"], color='red', label='Outliers/Low Sales')\n",
        "\n",
        "for index, row in outliers.iterrows():\n",
        "    plt.annotate(row['event_name_1'],\n",
        "                 (index, row[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"]),\n",
        "                 textcoords=\"offset points\",\n",
        "                 xytext=(0,10),\n",
        "                 ha='center',\n",
        "                 fontsize=10,\n",
        "                 arrowprops=dict(arrowstyle=\"->\"))\n",
        "\n",
        "plt.xlabel('Date')\n",
        "plt.ylabel('Aggregate Department Sales')\n",
        "plt.title('Time Series with Outliers/Low Sales and Event Names')\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "VqoQm_4KhT-Y",
        "outputId": "2b1f3b91-f9b9-4e69-a877-69fafc7ed1ee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "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F0TGVeSTUQDEZk6GSA5ZWloiMzMTdnZ2TEYRERERERERUZHDTouIiIiIiIioSNFfMz3WuSJSB5NRRERERERERERkMExGERERERERERGRwTAZRUREREREREREBsNkFBERERERERERGQyTUUREREREREREZDBMRhERERERERHpgMCX6RGphckoIiIiIiIiIiIyGCajiIiIiIiIiIjIYJiMIiIiIiIioiJFIjF2BERFG5NRRERERERERERkMExGERERERERERGRwTAZRURERERERKQDfJkekXqYjCIiIiIiIiIiIoNhMoqIiIiIiIhIB9gvOpF6mIwiIiIiIiIi0gE20yNSD5NRRERERERERERkMExGERERERERERGRwTAZRURERKTEyzcZOBbzFFKp6Ta6OHnnGR6/SjV2GEREREQaYTKKiIiISIkevx7DwHUnselUvLFDUepYzFP0XXMCTeceMnYoRERmR8KuxomMiskoIiIiIiXinr0BAOy5+NDIkSgXceuJsUMgIjJbArsaJzIqJqOIiIiIiIjMTGBgIHr27Knz5QYHB8PFxUXnyy0qBIFJLiJ1MBlFRERERESkZ/fu3cOwYcNQrlw52NjYoGLFihg3bhyePXumcr64uDhIJBJER0cbJlA9kEgkSv/9+eefOlm+Nok5NtMjMi4mo4iIiIiIiPQoMTERLVq0QExMDP744w/cunULq1atwqFDh9CiRQs8f/5c6Xzp6ekGjlR/goKCkJCQoPBPHzW7CqIw7W8iU8dkFBEREZEKpvrruanGRUS5rVmzBjY2Njhw4ADatGkDT09PdOnSBQcPHsSDBw8wZcoUAICXlxdmzZqFwYMHw9nZGSNHjkSlSpUAAO+99x4kEgn8/PwUlr1w4UKULVsWrq6uGD16NDIyMsRxL168wODBg1GiRAkUK1YMXbp0QUxMjML8wcHB8PT0RLFixfDBBx8oram1cuVKVKlSBTY2NqhRowY2btwojhs2bBjq1auHtLQ0ALKEznvvvYfBgwcrLMPFxQXu7u4K/+zs7AAAz549Q79+/VC+fHkUK1YM3t7e+OOPPxTm3759O7y9vWFvbw9XV1d06NABr1+/xvTp07F+/Xr8888/Yo2rsLAwALLaaH369IGLiwtKliyJHj16IPPlI3GZ8hpVc+bMQbly5VCjRo18jyUR6QaTUUREREQqsJNb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hB1metsxxKha2YKlTXFDYZQYwlnF4xBioXTnw7D+zfsRSUd6a178JfJ7j8VhM45EvLonomU1aF2zxLdOPz6qeclXSNT1R/HIfdB30BDEyrugbV3mRjKWX4Ta2lp8M/sT9xtSqSRals2DQ6pWr16Nb775Bpdccgkm7joZscp6pJo3yapz4R+i2n5vxRIo6z8OFXucjM4zrkHz0q/RklbXjMfjTHhTG2+//TYOOOAAHH300Rg2bBh69uwp7ScC/vBuVxaVCsZiFXUoGXMgOh9+FQr6jse8t59WttuPMWrizPTkyKmZHuu8N0T+9vCXIdM4CXK76QfWLFKsys9MiP1ctWaUGmpmR/7cE03PmFn0pmNv/VSaUaww2dhnFHgzIrEulXmBHwLdkoPXcotFLM5MzxkVHQPvCooNprRFiDbSldsuneDA/df/Q6OWxfW5WjPKe3uuohe51KLgIv1ptd0kwijufe7axNXhzgX+N8BoRhmY4GrrQEjNKB/2QOQL/ITEI0eOxP/+9z80NDSgd+/e3H95zK2w77wT9jun3rxuQ9C85Cu8/fqrSKR9l+THI0jUD0bTotlo+n428roNdfONHDkS33zzDWLlXTz/EWKh94ChSG5eC2JFUF7TDb1790bPnr1sQVdBqevAnETjqD7kt8jLy8OTfzjdvTF30LRoFp7645m49tprXXN991NyrknBaEa1o2qUiV86ABoz5NzBhENQzVNjM72ApyhekCJP42+ml/mbpau5okVqs+9g5Yh01dWslaQNJIziBN2mbfE+y6UDcxlUDsyzASeMIsQ38iILlveV7bE9p/0CW+d+wEUZjdf0wpdffumhy71790Y8bgt98roNRuuq77Hi89cxefJk2/S4fgiaFnyGZXM+R78RYxHrVA/a2mwPvhV1lQccdO/WHZRS9OrVC/ndhyFe1eDS1ooKW5uJtjahaOheOPLEU1BVVQUASG5eD9rWapcZAkOHDsXSJUuQ3Ljac67q1asXYrE42tYsBYiFG/56J0aMGIGXX34ZXbt25dJWVVXhuOOOw1/uuBvR8lr3TMfi7eceRappEwr6TrDbvtF25l7QZyx69OyFb775BgcffDDOPfdcTJw4ET179sScOXOk7f7Pf/6Du+++GwMGDMC7777r+nfy1Pn22xg/fjx++ctfYsSIEejduzfmzZvnSffzn/8c//zn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6075O4VNX93/jjvuOEoppbvuuis944wz6Pnnn0/Ly8upVVhGSyfMoH98/itKKaXdL3ya1p/1MC0auhe18ksoiefTRLehtPaEWyillD43eyktnTCDxqp70Ftv/z/a0NBACSF0t+tfpYWDd6elE2bQ7hc+Tfe55Q1aseepNFpeSxOJBK2urqaHHHII7X/Jc7T7hU/T7hc+7emDuv3PoZHiKkqiCTpl731o+ZQTKUkUuumnXfkvuv/++9OKyipKYnk0XtOHVh/+O1rQczStq6ujv/nNb+igQYPc8t59910KgEZKqmjxyH1prHMvCoAWFhbSgn4TadfT76f73vImpZTS3/72t3TYsGH06me/pN0vfJom6gfTaKd6uuue09x+ye8zjnYetTftPONqCoBaxZW0eNyhbh8QQmj37t3p7bffTvfff39aWFhIhwwZQkeOHEnPOussSimld999NyWE0KpRU2m0vJYiEqN9ho6mYydOpiSWR0k8n9bVd6PxolIaKepE6067l4JYtKD/LrRT7+E0mUzS0tJS2qdPH3tsLcsd42hZDf3tLXfT4tH7U8QL3OckUcTNhX79+tGuXbvS/v3701gsxs8VK0JjVQ2e+eP8Vzz6AGoVlNnfn19M8/Ly3T79z3/+Qx966CEaj8c9+V599VX64kuv2L+jcUqsCAUIBUCrD/+d/TwSpdHSzrS2ritNJBI0Ly+P1tTU0KqDL6Hxzr2oFY3TTp060fLychqNRmnfvn3pvffeS3/729/S+vp6GolEaCKRoGeccQallNKbbrqJAqAHHHCAOyd69epF77zzTpqoG0AB0E49B7vv+vbtSxOJBM3Pz6c9evSg55xzDj3ssMNoly5dKIna31Q66Rhuzvbq1YsWFRXRM888k5aVldHq6mp6xx130E2bNtHjjz+eFhUV0WhZLa3+2eXunG9ra6Mnnngire/WnZJonEYr6uhVf7iOK7etrY0eeMxJlCQKqZVXTM8//3x67LHHct/y3HPP0QkTJtDS0lJaUVFB83uNoV1OutNdL298/D8KgD766KN08uTJND8/nw4dOpS+8847SjrU0tJCCwsLaUlJCY3H47S2tpaeccYZdOPGjZQQ4hlXkldEG0ZMTM+BIumcmTBhAo1EMuNt/0doNJ7nSWtZFq2oqPA8LykpoYlEggKgXfoMot3Oe0JaF9tGkpdpj2ee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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "result_df_filtered[result_df_filtered['event_name_1'] == 'NewYear']"
      ],
      "metadata": {
        "id": "Tiw_63rV33VK",
        "outputId": "5cb45500-c1f8-454e-ee5c-b2d2fbf9d46f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 388
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            wm_yr_wk    weekday  wday  month  year       d event_name_1  \\\n",
              "date                                                                      \n",
              "2012-01-01     11149     Sunday     2      1  2012   d_338      NewYear   \n",
              "2013-01-01     11249    Tuesday     4      1  2013   d_704      NewYear   \n",
              "2014-01-01     11349  Wednesday     5      1  2014  d_1069      NewYear   \n",
              "2015-01-01     11448   Thursday     6      1  2015  d_1434      NewYear   \n",
              "2016-01-01     11548     Friday     7      1  2016  d_1799      NewYear   \n",
              "\n",
              "           event_type_1 event_name_2 event_type_2  ...  d_1936  d_1937  \\\n",
              "date                                               ...                   \n",
              "2012-01-01     National          NaN          NaN  ...       0       0   \n",
              "2013-01-01     National          NaN          NaN  ...       0       0   \n",
              "2014-01-01     National          NaN          NaN  ...       0       0   \n",
              "2015-01-01     National          NaN          NaN  ...       0       0   \n",
              "2016-01-01     National          NaN          NaN  ...       0       0   \n",
              "\n",
              "            d_1938  d_1939  d_1940  d_1941  \\\n",
              "date                                         \n",
              "2012-01-01       0       0       0       0   \n",
              "2013-01-01       0       0       0       0   \n",
              "2014-01-01       0       0       0       0   \n",
              "2015-01-01       0       0       0       0   \n",
              "2016-01-01       0       0       0       0   \n",
              "\n",
              "            aggregate department sales countrywide for HOUSEHOLD_1_118  \\\n",
              "date                                                                     \n",
              "2012-01-01                                                 11            \n",
              "2013-01-01                                                  0            \n",
              "2014-01-01                                                 11            \n",
              "2015-01-01                                                  4            \n",
              "2016-01-01                                                  1            \n",
              "\n",
              "            moving_avg   std_dev  anomaly  \n",
              "date                                       \n",
              "2012-01-01    7.000000  3.000000    False  \n",
              "2013-01-01    3.857143  3.579040    False  \n",
              "2014-01-01   10.000000  7.527727    False  \n",
              "2015-01-01    6.714286  3.545621    False  \n",
              "2016-01-01    9.000000  6.855655    False  \n",
              "\n",
              "[5 rows x 1958 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a23b0f70-6c99-404e-8db8-c7f3be9d054c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>wm_yr_wk</th>\n",
              "      <th>weekday</th>\n",
              "      <th>wday</th>\n",
              "      <th>month</th>\n",
              "      <th>year</th>\n",
              "      <th>d</th>\n",
              "      <th>event_name_1</th>\n",
              "      <th>event_type_1</th>\n",
              "      <th>event_name_2</th>\n",
              "      <th>event_type_2</th>\n",
              "      <th>...</th>\n",
              "      <th>d_1936</th>\n",
              "      <th>d_1937</th>\n",
              "      <th>d_1938</th>\n",
              "      <th>d_1939</th>\n",
              "      <th>d_1940</th>\n",
              "      <th>d_1941</th>\n",
              "      <th>aggregate department sales countrywide for HOUSEHOLD_1_118</th>\n",
              "      <th>moving_avg</th>\n",
              "      <th>std_dev</th>\n",
              "      <th>anomaly</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2012-01-01</th>\n",
              "      <td>11149</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2012</td>\n",
              "      <td>d_338</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>11</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2013-01-01</th>\n",
              "      <td>11249</td>\n",
              "      <td>Tuesday</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2013</td>\n",
              "      <td>d_704</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3.857143</td>\n",
              "      <td>3.579040</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014-01-01</th>\n",
              "      <td>11349</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>2014</td>\n",
              "      <td>d_1069</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>11</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>7.527727</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-01-01</th>\n",
              "      <td>11448</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1434</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>6.714286</td>\n",
              "      <td>3.545621</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-01-01</th>\n",
              "      <td>11548</td>\n",
              "      <td>Friday</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1799</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>6.855655</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 1958 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a23b0f70-6c99-404e-8db8-c7f3be9d054c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a23b0f70-6c99-404e-8db8-c7f3be9d054c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a23b0f70-6c99-404e-8db8-c7f3be9d054c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2758ca43-d56f-4ce5-9cad-63bf48bf39f6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2758ca43-d56f-4ce5-9cad-63bf48bf39f6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2758ca43-d56f-4ce5-9cad-63bf48bf39f6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 126
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "new_years_sales = result_df_filtered[result_df_filtered['event_name_1'] == 'NewYear']\n",
        "new_years_sales"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 388
        },
        "id": "FD-Xq8l75HFf",
        "outputId": "9eb5144d-7e70-4b7a-c928-7eb65921c330"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            wm_yr_wk    weekday  wday  month  year       d event_name_1  \\\n",
              "date                                                                      \n",
              "2012-01-01     11149     Sunday     2      1  2012   d_338      NewYear   \n",
              "2013-01-01     11249    Tuesday     4      1  2013   d_704      NewYear   \n",
              "2014-01-01     11349  Wednesday     5      1  2014  d_1069      NewYear   \n",
              "2015-01-01     11448   Thursday     6      1  2015  d_1434      NewYear   \n",
              "2016-01-01     11548     Friday     7      1  2016  d_1799      NewYear   \n",
              "\n",
              "           event_type_1 event_name_2 event_type_2  ...  d_1936  d_1937  \\\n",
              "date                                               ...                   \n",
              "2012-01-01     National          NaN          NaN  ...       0       0   \n",
              "2013-01-01     National          NaN          NaN  ...       0       0   \n",
              "2014-01-01     National          NaN          NaN  ...       0       0   \n",
              "2015-01-01     National          NaN          NaN  ...       0       0   \n",
              "2016-01-01     National          NaN          NaN  ...       0       0   \n",
              "\n",
              "            d_1938  d_1939  d_1940  d_1941  \\\n",
              "date                                         \n",
              "2012-01-01       0       0       0       0   \n",
              "2013-01-01       0       0       0       0   \n",
              "2014-01-01       0       0       0       0   \n",
              "2015-01-01       0       0       0       0   \n",
              "2016-01-01       0       0       0       0   \n",
              "\n",
              "            aggregate department sales countrywide for HOUSEHOLD_1_118  \\\n",
              "date                                                                     \n",
              "2012-01-01                                                 11            \n",
              "2013-01-01                                                  0            \n",
              "2014-01-01                                                 11            \n",
              "2015-01-01                                                  4            \n",
              "2016-01-01                                                  1            \n",
              "\n",
              "            moving_avg   std_dev  anomaly  \n",
              "date                                       \n",
              "2012-01-01    7.000000  3.000000    False  \n",
              "2013-01-01    3.857143  3.579040    False  \n",
              "2014-01-01   10.000000  7.527727    False  \n",
              "2015-01-01    6.714286  3.545621    False  \n",
              "2016-01-01    9.000000  6.855655    False  \n",
              "\n",
              "[5 rows x 1958 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7d1aecd5-c85e-4055-97e9-ef5047218348\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>wm_yr_wk</th>\n",
              "      <th>weekday</th>\n",
              "      <th>wday</th>\n",
              "      <th>month</th>\n",
              "      <th>year</th>\n",
              "      <th>d</th>\n",
              "      <th>event_name_1</th>\n",
              "      <th>event_type_1</th>\n",
              "      <th>event_name_2</th>\n",
              "      <th>event_type_2</th>\n",
              "      <th>...</th>\n",
              "      <th>d_1936</th>\n",
              "      <th>d_1937</th>\n",
              "      <th>d_1938</th>\n",
              "      <th>d_1939</th>\n",
              "      <th>d_1940</th>\n",
              "      <th>d_1941</th>\n",
              "      <th>aggregate department sales countrywide for HOUSEHOLD_1_118</th>\n",
              "      <th>moving_avg</th>\n",
              "      <th>std_dev</th>\n",
              "      <th>anomaly</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2012-01-01</th>\n",
              "      <td>11149</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2012</td>\n",
              "      <td>d_338</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>11</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2013-01-01</th>\n",
              "      <td>11249</td>\n",
              "      <td>Tuesday</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2013</td>\n",
              "      <td>d_704</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3.857143</td>\n",
              "      <td>3.579040</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014-01-01</th>\n",
              "      <td>11349</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>2014</td>\n",
              "      <td>d_1069</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>11</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>7.527727</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-01-01</th>\n",
              "      <td>11448</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1434</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>6.714286</td>\n",
              "      <td>3.545621</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-01-01</th>\n",
              "      <td>11548</td>\n",
              "      <td>Friday</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1799</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>6.855655</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 1958 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7d1aecd5-c85e-4055-97e9-ef5047218348')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7d1aecd5-c85e-4055-97e9-ef5047218348 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7d1aecd5-c85e-4055-97e9-ef5047218348');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-00dd6d3a-faa6-4447-b438-2c07bafac6eb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-00dd6d3a-faa6-4447-b438-2c07bafac6eb')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-00dd6d3a-faa6-4447-b438-2c07bafac6eb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_32a722ce-030b-483a-b145-db14e0b8fa09\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('new_years_sales')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_32a722ce-030b-483a-b145-db14e0b8fa09 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('new_years_sales');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "new_years_sales"
            }
          },
          "metadata": {},
          "execution_count": 127
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Group the data by year and sum the sales\n",
        "yearly_sales = new_years_sales.groupby('year')[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].sum()\n",
        "\n",
        "# Create the bar plot\n",
        "plt.figure(figsize=(10, 6))\n",
        "bars = plt.bar(yearly_sales.index, yearly_sales.values)\n",
        "\n",
        "# Set the color of the 2016 bar to red\n",
        "if 2016 in yearly_sales.index:\n",
        "    bars[yearly_sales.index.tolist().index(2016)].set_color('red')\n",
        "    bars[yearly_sales.index.tolist().index(2016)].set_label('2016')\n",
        "\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Total Sales on New Year')\n",
        "plt.title('Total Sales of HOUSEHOLD_1_118 on New Year by Year')\n",
        "plt.xticks(yearly_sales.index)\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "Ebn0MrzC5Q0W",
        "outputId": "a7c3507d-300f-4b4c-881d-e89b6efefd04"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Accuracy = (Number of Correct Predictions) / (Total Number of Predictions)\n",
        "# Error Rate = (Number of Incorrect Predictions) / (Total Number of Predictions)\n",
        "# Error % = Error Rate * 100\n"
      ],
      "metadata": {
        "id": "qCnqFo6m6xuy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "yearly_sales"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "uLd3jDdi54Nx",
        "outputId": "dbb34a06-b7ba-42c3-d79c-9f1605a8124c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "year\n",
              "2012    11\n",
              "2013     0\n",
              "2014    11\n",
              "2015     4\n",
              "2016     1\n",
              "Name: aggregate department sales countrywide for HOUSEHOLD_1_118, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>aggregate department sales countrywide for HOUSEHOLD_1_118</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>year</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2012</th>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2013</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014</th>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 130
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Create the line plot\n",
        "plt.figure(figsize=(10, 6))\n",
        "line = plt.plot(yearly_sales.index, yearly_sales.values)\n",
        "\n",
        "# Set the color of the 2016 line segment to red\n",
        "if 2016 in yearly_sales.index:\n",
        "    index_2016 = yearly_sales.index.tolist().index(2016)\n",
        "    plt.plot(yearly_sales.index[index_2016], yearly_sales.values[index_2016], 'ro', label='2016')\n",
        "\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Total Sales on New Year')\n",
        "plt.title('Total Sales of HOUSEHOLD_1_118 on New Year by Year')\n",
        "plt.xticks(yearly_sales.index)\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "QKWjGZRm9AQ0",
        "outputId": "bf8dfd41-7d03-4b18-de56-9353c6c93d00"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Filter data for New Year's events\n",
        "new_years_sales = result_df_filtered[result_df_filtered['event_name_1'] == 'NewYear']\n",
        "\n",
        "# Create bar graph\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(new_years_sales.index, new_years_sales[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"])\n",
        "plt.xlabel('Date')\n",
        "plt.ylabel('Aggregate Department Sales')\n",
        "plt.title('Aggregate Department Sales of HOUSEHOLD_1_118 on New Year Events')\n",
        "plt.xticks(rotation=45, ha='right')\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "5Oku_mnG3iZc",
        "outputId": "039ba041-3448-40ad-eb37-3c0b9db308c1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Filter data for NewYear events\n",
        "new_year_data = result_df_filtered[result_df_filtered['event_name_1'] == 'NewYear']\n",
        "\n",
        "# Create the plot\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(new_year_data.index, new_year_data[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"], label='Aggregate Sales on New Year')\n",
        "plt.xlabel('Date')\n",
        "plt.ylabel('Aggregate Department Sales')\n",
        "plt.title('Time Series of Aggregate Department Sales for HOUSEHOLD_1_118 on New Year')\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "MUAA6NLyiLrq",
        "outputId": "40d06a63-14fb-4c8d-8982-d5c1837a235e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Filter data for NewYear events across all years\n",
        "new_year_data = result_df_filtered[result_df_filtered['event_name_1'] == 'NewYear']\n",
        "\n",
        "# Group data by year and sum the sales\n",
        "yearly_sales = new_year_data.groupby(new_year_data.index.year)[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].sum()\n",
        "\n",
        "# Create the bar graph\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(yearly_sales.index, yearly_sales.values)\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Total Sales on New Year')\n",
        "plt.title('Total Sales of HOUSEHOLD_1_118 on New Year Across Years')\n",
        "plt.xticks(rotation='horizontal')  # Rotate x-axis labels horizontally\n",
        "plt.grid(True)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "RRZrP1XQauKB",
        "outputId": "76a0e8a7-2e12-41fb-eb67-0a10d3ad75d9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "\n",
        "# Prepare data\n",
        "new_year_data = result_df_filtered[result_df_filtered['event_name_1'] == 'NewYear']\n",
        "X = new_year_data.index.year.values.reshape(-1, 1)\n",
        "y = new_year_data[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].values\n",
        "\n",
        "model = LinearRegression()\n",
        "model.fit(X, y)\n",
        "\n",
        "# Predict for 2016\n",
        "prediction_2016_LR_ = model.predict([[2016]])\n",
        "print(\"Predicted sales for New Year 2016:\", prediction_2016_LR_[0])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gpsRrYz1V0wL",
        "outputId": "42c938eb-af4d-417e-d3cc-aca1461db388"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted sales for New Year 2016: 2.199999999999818\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "8DamfVFf4iYM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from statsmodels.tsa.arima.model import ARIMA\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "# Prepare data\n",
        "new_year_data = result_df_filtered[result_df_filtered['event_name_1'] == 'NewYear']\n",
        "y = new_year_data[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].values\n",
        "\n",
        "model = ARIMA(y, order=(5, 1, 0))\n",
        "model_fit = model.fit()\n",
        "\n",
        "# Forecast for 2016\n",
        "prediction_2016_AR_ = model_fit.forecast(steps=1)[0]\n",
        "print(\"Predicted sales for New Year 2016 (ARIMA):\", prediction_2016_AR_)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZPvP49v7WEwg",
        "outputId": "c9a40e3b-23e5-4e9a-c531-2f1ad0277617"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning:\n",
            "\n",
            "Too few observations to estimate starting parameters for ARMA and trend. All parameters except for variances will be set to zeros.\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted sales for New Year 2016 (ARIMA): 10.220674856150586\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning:\n",
            "\n",
            "Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "print('\\033[1m' + \"Predicted sales for New Year 2016 (ARIMA):\" + '\\033[0m', prediction_2016_AR_)\n",
        "\n",
        "# Assuming you want to calculate the error against a known actual value for 2016\n",
        "actual_sales_2016 = # Replace with the actual sales value for New Year 2016\n",
        "error = abs(prediction_2016_AR_ - actual_sales_2016)\n",
        "print('\\033[1m' + \"Error:\" + '\\033[0m', error)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "id": "7-vOk1aw4K4C",
        "outputId": "d54a5156-8818-4268-c98b-4017be5eb7ec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid syntax (<ipython-input-151-fef21337ca5b>, line 6)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-151-fef21337ca5b>\"\u001b[0;36m, line \u001b[0;32m6\u001b[0m\n\u001b[0;31m    actual_sales_2016 = # Replace with the actual sales value for New Year 2016\u001b[0m\n\u001b[0m                        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "\n",
        "# Prepare data\n",
        "new_year_data = result_df_filtered[result_df_filtered['event_name_1'] == 'NewYear']\n",
        "X = new_year_data.index.year.values.reshape(-1, 1)\n",
        "y = new_year_data[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].values\n",
        "\n",
        "model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "model.fit(X, y)\n",
        "\n",
        "# Predict for 2016\n",
        "prediction_2016_RF_ = model.predict([[2016]])\n",
        "print(\"Predicted sales for New Year 2016 (Random Forest):\", prediction_2016_RF_[0])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oW2QqmkcWKPh",
        "outputId": "c23377e5-d62d-4930-c8c7-d31e48b444a5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted sales for New Year 2016 (Random Forest): 2.43\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "mpBsAsIu9gmc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Extract actual sales for New Year 2016\n",
        "actual_sales_2016 = result_df_Accuracy_copy[(result_df_Accuracy_copy['event_name_1'] == 'NewYear') & (result_df_Accuracy_copy['year'] == 2016)][\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].values[0]\n",
        "\n",
        "# Print actual and predicted values\n",
        "print(\"Actual sales for New Year 2016:\", actual_sales_2016)\n",
        "print(\"Predicted sales for New Year 2016 (Linear Regression):\", prediction_2016_LR_[0])\n",
        "print(\"Predicted sales for New Year 2016 (ARIMA):\", prediction_2016_AR_)\n",
        "print(\"Predicted sales for New Year 2016 (Random Forest):\", prediction_2016_RF_[0])\n",
        "\n",
        "# Calculate accuracy and RMSE for each model\n",
        "def calculate_metrics(actual, predicted):\n",
        "    accuracy = (1 - abs(actual - predicted) / actual) * 100\n",
        "    rmse = np.sqrt(mean_squared_error([actual], [predicted]))\n",
        "    rmse_percentage = (rmse / actual) * 100\n",
        "    return accuracy, rmse_percentage\n",
        "\n",
        "accuracy_lr, rmse_lr = calculate_metrics(actual_sales_2016, prediction_2016_LR_[0])\n",
        "accuracy_ar, rmse_ar = calculate_metrics(actual_sales_2016, prediction_2016_AR_)\n",
        "accuracy_rf, rmse_rf = calculate_metrics(actual_sales_2016, prediction_2016_RF_[0])\n",
        "\n",
        "# Print accuracy and RMSE\n",
        "print(\"\\nAccuracy and RMSE:\")\n",
        "print(\"Linear Regression - Accuracy: {:.2f}%, RMSE: {:.2f}%\".format(accuracy_lr, rmse_lr))\n",
        "print(\"ARIMA - Accuracy: {:.2f}%, RMSE: {:.2f}%\".format(accuracy_ar, rmse_ar))\n",
        "print(\"Random Forest - Accuracy: {:.2f}%, RMSE: {:.2f}%\".format(accuracy_rf, rmse_rf))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U34lI7LnWQYy",
        "outputId": "2a3df933-ded8-40bc-e229-b1f010d70b00"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Actual sales for New Year 2016: 1\n",
            "Predicted sales for New Year 2016 (Linear Regression): 2.199999999999818\n",
            "Predicted sales for New Year 2016 (ARIMA): 10.220674856150586\n",
            "Predicted sales for New Year 2016 (Random Forest): 2.43\n",
            "\n",
            "Accuracy and RMSE:\n",
            "Linear Regression - Accuracy: -20.00%, RMSE: 120.00%\n",
            "ARIMA - Accuracy: -822.07%, RMSE: 922.07%\n",
            "Random Forest - Accuracy: -43.00%, RMSE: 143.00%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Create a list of dictionaries for the table data\n",
        "table_data = [\n",
        "    {\n",
        "        'Algorithm': 'Linear Regression',\n",
        "        'Actual Value': round(actual_sales_2016, 3),\n",
        "        'Predicted Value': round(prediction_2016_LR_[0], 3),\n",
        "        'Accuracy %': round(accuracy_lr, 3),\n",
        "        'Mean Squared Error %': round(rmse_lr, 3)\n",
        "    },\n",
        "    {\n",
        "        'Algorithm': 'ARIMA',\n",
        "        'Actual Value': round(actual_sales_2016, 3),\n",
        "        'Predicted Value': round(prediction_2016_AR_, 3),\n",
        "        'Accuracy %': round(accuracy_ar, 3),\n",
        "        'Mean Squared Error %': round(rmse_ar, 3)\n",
        "    },\n",
        "    {\n",
        "        'Algorithm': 'Random Forest',\n",
        "        'Actual Value': round(actual_sales_2016, 3),\n",
        "        'Predicted Value': round(prediction_2016_RF_[0], 3),\n",
        "        'Accuracy %': round(accuracy_rf, 3),\n",
        "        'Mean Squared Error %': round(rmse_rf, 3)\n",
        "    }\n",
        "]\n",
        "\n",
        "# Sort the data in descending order of accuracy\n",
        "table_data_sorted = sorted(table_data, key=lambda x: x['Accuracy %'], reverse=True)\n",
        "\n",
        "# Create the interactive table using Plotly\n",
        "fig = go.Figure(data=[go.Table(\n",
        "    header=dict(values=['Algorithm', 'Actual Value', 'Predicted Value', 'Accuracy %', 'Mean Squared Error %'],\n",
        "                fill_color='paleturquoise',\n",
        "                align='left',\n",
        "                font=dict(color='black')),\n",
        "    cells=dict(values=[\n",
        "        [item['Algorithm'] for item in table_data_sorted],\n",
        "        [item['Actual Value'] for item in table_data_sorted],\n",
        "        [item['Predicted Value'] for item in table_data_sorted],\n",
        "        [item['Accuracy %'] for item in table_data_sorted],\n",
        "        [item['Mean Squared Error %'] for item in table_data_sorted]\n",
        "    ],\n",
        "               fill_color='lavender',\n",
        "               align='left',\n",
        "               font=dict(color='black'),\n",
        "               height=30)\n",
        ")])\n",
        "\n",
        "# Add table borders\n",
        "fig.update_traces(\n",
        "    columnwidth=[150, 100, 120, 100, 150],  # Adjust column widths as needed\n",
        "    header_line_color='black',\n",
        "    cells_line_color='black',\n",
        ")\n",
        "\n",
        "fig.update_layout(width=800, height=400, title='Model Performance Metrics')\n",
        "fig.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 417
        },
        "id": "rG0dcvvS2K6Y",
        "outputId": "82116770-c15b-4404-f06e-47ebb852faad"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"07a9b76c-1c73-4b8c-b1b4-4f9cebecd097\" class=\"plotly-graph-div\" style=\"height:400px; width:800px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"07a9b76c-1c73-4b8c-b1b4-4f9cebecd097\")) {                    Plotly.newPlot(                        \"07a9b76c-1c73-4b8c-b1b4-4f9cebecd097\",                        [{\"cells\":{\"align\":\"left\",\"fill\":{\"color\":\"lavender\"},\"font\":{\"color\":\"black\"},\"height\":30,\"values\":[[\"Linear Regression\",\"Random Forest\",\"ARIMA\"],[1,1,1],[2.2,2.43,10.221],[-20.0,-43.0,-822.067],[120.0,143.0,922.067]],\"line\":{\"color\":\"black\"}},\"header\":{\"align\":\"left\",\"fill\":{\"color\":\"paleturquoise\"},\"font\":{\"color\":\"black\"},\"values\":[\"Algorithm\",\"Actual Value\",\"Predicted Value\",\"Accuracy %\",\"Mean Squared Error %\"],\"line\":{\"color\":\"black\"}},\"type\":\"table\",\"columnwidth\":[150,100,120,100,150]}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"width\":800,\"height\":400,\"title\":{\"text\":\"Model Performance Metrics\"}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('07a9b76c-1c73-4b8c-b1b4-4f9cebecd097');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from IPython.display import HTML, display\n",
        "\n",
        "# Create a list of dictionaries to store the results\n",
        "results = [\n",
        "    {\n",
        "        \"Actual Value\": \"{:.3f}\".format(actual_sales_2016),\n",
        "        \"Predicted Value\": \"{:.3f}\".format(prediction_2016_LR_[0]),\n",
        "        \"Algorithm\": \"Linear Regression\",\n",
        "        \"Accuracy %\": \"{:.3f}\".format(accuracy_lr),\n",
        "        \"Mean Squared Error %\": \"{:.3f}\".format(rmse_lr)\n",
        "    },\n",
        "    {\n",
        "        \"Actual Value\": \"{:.3f}\".format(actual_sales_2016),\n",
        "        \"Predicted Value\": \"{:.3f}\".format(prediction_2016_AR_),\n",
        "        \"Algorithm\": \"ARIMA\",\n",
        "        \"Accuracy %\": \"{:.3f}\".format(accuracy_ar),\n",
        "        \"Mean Squared Error %\": \"{:.3f}\".format(rmse_ar)\n",
        "    },\n",
        "    {\n",
        "        \"Actual Value\": \"{:.3f}\".format(actual_sales_2016),\n",
        "        \"Predicted Value\": \"{:.3f}\".format(prediction_2016_RF_[0]),\n",
        "        \"Algorithm\": \"Random Forest\",\n",
        "        \"Accuracy %\": \"{:.3f}\".format(accuracy_rf),\n",
        "        \"Mean Squared Error %\": \"{:.3f}\".format(rmse_rf)\n",
        "    }\n",
        "]\n",
        "\n",
        "# Sort the results by accuracy in descending order\n",
        "results_sorted = sorted(results, key=lambda x: float(x[\"Accuracy %\"]), reverse=True)\n",
        "\n",
        "# Create an HTML table\n",
        "table_html = \"<table><tr><th>Actual Value</th><th>Predicted Value</th><th>Algorithm</th><th>Accuracy %</th><th>Mean Squared Error %</th></tr>\"\n",
        "for result in results_sorted:\n",
        "    table_html += \"<tr>\"\n",
        "    for value in result.values():\n",
        "        table_html += \"<td>{}</td>\".format(value)\n",
        "    table_html += \"</tr>\"\n",
        "table_html += \"</table>\"\n",
        "\n",
        "# Apply CSS for borders\n",
        "table_html = '<style>table { border-collapse: collapse; } table, th, td { border: 1px solid black; padding: 5px; }</style>' + table_html\n",
        "\n",
        "# Display the interactive table\n",
        "display(HTML(table_html))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 131
        },
        "id": "H6mYqso59pBL",
        "outputId": "b60cac7b-00cf-4bf2-abe4-4b840e19a9c4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<style>table { border-collapse: collapse; } table, th, td { border: 1px solid black; padding: 5px; }</style><table><tr><th>Actual Value</th><th>Predicted Value</th><th>Algorithm</th><th>Accuracy %</th><th>Mean Squared Error %</th></tr><tr><td>1.000</td><td>2.200</td><td>Linear Regression</td><td>-20.000</td><td>120.000</td></tr><tr><td>1.000</td><td>2.430</td><td>Random Forest</td><td>-43.000</td><td>143.000</td></tr><tr><td>1.000</td><td>10.221</td><td>ARIMA</td><td>-822.067</td><td>922.067</td></tr></table>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from IPython.display import HTML, display\n",
        "\n",
        "data = [\n",
        "    [\"Model\", \"Accuracy (%)\", \"RMSE (%)\"],\n",
        "    [\"Linear Regression\", f\"{accuracy_lr:.2f}\", f\"{rmse_lr:.2f}\"],\n",
        "    [\"ARIMA\", f\"{accuracy_ar:.2f}\", f\"{rmse_ar:.2f}\"],\n",
        "    [\"Random Forest\", f\"{accuracy_rf:.2f}\", f\"{rmse_rf:.2f}\"]\n",
        "]\n",
        "\n",
        "table_html = \"<table><tr>{}</tr></table>\".format(\n",
        "    \"</tr><tr>\".join(\n",
        "        \"<td>{}</td>\".format(\"</td><td>\".join(str(_) for _ in row)) for row in data\n",
        "    )\n",
        ")\n",
        "\n",
        "# Add border to the table\n",
        "table_html = '<table border=\"1\">' + table_html[6:]\n",
        "\n",
        "display(HTML(table_html))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 132
        },
        "id": "XaLFXCsTYqfP",
        "outputId": "b865f488-e455-498e-90da-14179427c933"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<table border=\"1\">><tr><td>Model</td><td>Accuracy (%)</td><td>RMSE (%)</td></tr><tr><td>Linear Regression</td><td>-20.00</td><td>120.00</td></tr><tr><td>ARIMA</td><td>-822.07</td><td>922.07</td></tr><tr><td>Random Forest</td><td>-43.00</td><td>143.00</td></tr></table>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Filter data for NewYear events across all years\n",
        "new_year_data = result_df_filtered[result_df_filtered['event_name_1'] == 'NewYear']\n",
        "\n",
        "# Group data by year and sum the sales\n",
        "yearly_sales = new_year_data.groupby(new_year_data.index.year)[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].sum()\n",
        "\n",
        "# Create the bar graph\n",
        "plt.figure(figsize=(10, 6))\n",
        "bars = plt.bar(yearly_sales.index, yearly_sales.values)\n",
        "\n",
        "# Highlight 2016 bar differently\n",
        "if 2016 in yearly_sales.index:\n",
        "    index_2016 = yearly_sales.index.tolist().index(2016)\n",
        "    bars[index_2016].set_color('red')  # Set 2016 bar to light gray\n",
        "\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Total Sales on New Year')\n",
        "plt.title('Total Sales of HOUSEHOLD_1_118 on New Year Across Years')\n",
        "plt.xticks(rotation='horizontal')\n",
        "plt.grid(True)\n",
        "\n",
        "# Add lines for predictions and actual value for 2016\n",
        "plt.axhline(y=actual_sales_2016, color='black', linestyle='-', label='Actual Sales on New Years 2016')\n",
        "plt.axhline(y=prediction_2016_LR_[0], color='blue', linestyle='--', label='Linear Regression')\n",
        "plt.axhline(y=prediction_2016_AR_, color='green', linestyle='-.', label='ARIMA')\n",
        "plt.axhline(y=prediction_2016_RF_[0], color='orange', linestyle=':', label='Random Forest')\n",
        "\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "pL_VmRsS_9JX",
        "outputId": "fd92f12b-7837-4213-cb26-7878a386ecc8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "# Plot predicted values for 2016 with boundaries\n",
        "plt.scatter(2016, prediction_2016_LR_[0], color='red', marker='o', label='LR Prediction')\n",
        "plt.plot([2016, 2016], [prediction_2016_LR_[0] - 50, prediction_2016_LR_[0] + 50], color='red', linestyle='--')\n",
        "\n",
        "plt.scatter(2016, prediction_2016_AR_, color='green', marker='x', label='ARIMA Prediction')\n",
        "plt.plot([2016, 2016], [prediction_2016_AR_ - 50, prediction_2016_AR_ + 50], color='green', linestyle='--')\n",
        "\n",
        "plt.scatter(2016, prediction_2016_RF_[0], color='purple', marker='s', label='RF Prediction')\n",
        "plt.plot([2016, 2016], [prediction_2016_RF_[0] - 50, prediction_2016_RF_[0] + 50], color='purple', linestyle='--')\n",
        "\n",
        "# ... (rest of the plotting code)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "TBzU1ZfxAgYD",
        "outputId": "45564905-e9f7-4fde-f30e-977b13653928"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7db786c51ab0>]"
            ]
          },
          "metadata": {},
          "execution_count": 92
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Prepare data for plotting\n",
        "years = [2013, 2014, 2015, 2016]\n",
        "actual_sales = result_df_Accuracy_copy[result_df_Accuracy_copy['event_name_1'] == 'NewYear'][\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].values\n",
        "predicted_lr = [np.nan, np.nan, np.nan, prediction_2016_LR_[0]]  # Fill with NaN for years without predictions\n",
        "predicted_ar = [np.nan, np.nan, np.nan, prediction_2016_AR_]\n",
        "predicted_rf = [np.nan, np.nan, np.nan, prediction_2016_RF_[0]]\n",
        "\n",
        "# Create the plot\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(years, actual_sales, label='Actual Sales', marker='o')\n",
        "plt.plot(years, predicted_lr, label='Linear Regression', marker='x', linestyle='--')\n",
        "plt.plot(years, predicted_ar, label='ARIMA', marker='s', linestyle='-.')\n",
        "plt.plot(years, predicted_rf, label='Random Forest', marker='d', linestyle=':')\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Aggregate Department Sales')\n",
        "plt.title('Actual vs. Predicted Sales for New Year - HOUSEHOLD_1_118')\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.xticks(years)  # Set x-ticks to show all years\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 867
        },
        "id": "wynRNbzeZIuo",
        "outputId": "3f3a24fa-d674-4cf4-8025-34b01bbfd062"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "x and y must have same first dimension, but have shapes (4,) and (5,)",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-89-d821ea00330d>\u001b[0m in \u001b[0;36m<cell line: 12>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;31m# Create the plot\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m12\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0myears\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mactual_sales\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Actual Sales'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmarker\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'o'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0myears\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredicted_lr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Linear Regression'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmarker\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'x'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinestyle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'--'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0myears\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredicted_ar\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'ARIMA'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmarker\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m's'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinestyle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'-.'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(scalex, scaley, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2810\u001b[0m \u001b[0;34m@\u001b[0m\u001b[0m_copy_docstring_and_deprecators\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mAxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2811\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscalex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscaley\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2812\u001b[0;31m     return gca().plot(\n\u001b[0m\u001b[1;32m   2813\u001b[0m         \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscalex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mscalex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscaley\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mscaley\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2814\u001b[0m         **({\"data\": data} if data is not None else {}), **kwargs)\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(self, scalex, scaley, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1686\u001b[0m         \"\"\"\n\u001b[1;32m   1687\u001b[0m         \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnormalize_kwargs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmlines\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLine2D\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1688\u001b[0;31m         \u001b[0mlines\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_lines\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1689\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mline\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlines\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1690\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_line\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m    309\u001b[0m                 \u001b[0mthis\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m                 \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 311\u001b[0;31m             yield from self._plot_args(\n\u001b[0m\u001b[1;32m    312\u001b[0m                 this, kwargs, ambiguous_fmt_datakey=ambiguous_fmt_datakey)\n\u001b[1;32m    313\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36m_plot_args\u001b[0;34m(self, tup, kwargs, return_kwargs, ambiguous_fmt_datakey)\u001b[0m\n\u001b[1;32m    502\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    503\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 504\u001b[0;31m             raise ValueError(f\"x and y must have same first dimension, but \"\n\u001b[0m\u001b[1;32m    505\u001b[0m                              f\"have shapes {x.shape} and {y.shape}\")\n\u001b[1;32m    506\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m2\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: x and y must have same first dimension, but have shapes (4,) and (5,)"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "XqVLISZFaqoB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import ipywidgets as widgets\n",
        "from IPython.display import display, HTML\n",
        "\n",
        "# Assuming 'result_df_filtered' contains actual sales for 2016 New Year\n",
        "actual_sales_2016 = result_df_filtered[result_df_filtered.index.year == 2016][\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].values[0]\n",
        "\n",
        "predictions = {\n",
        "    \"Linear Regression\": prediction_2016[0],\n",
        "    \"ARIMA\": prediction_2016,\n",
        "    \"Random Forest\": prediction_2016[0]\n",
        "}\n",
        "\n",
        "data = []\n",
        "for model_name, prediction in predictions.items():\n",
        "    accuracy = (prediction / actual_sales_2016) * 100\n",
        "    rmse = np.sqrt(mean_squared_error([actual_sales_2016], [prediction]))\n",
        "    rmse_percentage = (rmse / actual_sales_2016) * 100\n",
        "    data.append([model_name, actual_sales_2016, prediction, f\"{accuracy.item():.2f}%\", f\"{rmse:.2f}\", f\"{rmse_percentage:.2f}%\"])\n",
        "\n",
        "# Create a Pandas DataFrame from the data\n",
        "df_results = pd.DataFrame(data, columns=[\"Model\", \"Actual Sales 2016\", \"Predicted Sales 2016\", \"Accuracy\", \"RMSE\", \"RMSE Percentage\"])\n",
        "\n",
        "# Display the DataFrame as an interactive table using ipywidgets\n",
        "display(df_results)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "f0EJ1zVlWkgT",
        "outputId": "4e52706a-7567-4d9b-9f61-97139ad26607"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "               Model  Actual Sales 2016 Predicted Sales 2016 Accuracy  RMSE  \\\n",
              "0  Linear Regression                  1                 2.43  243.00%  1.43   \n",
              "1              ARIMA                  1               [2.43]  243.00%  1.43   \n",
              "2      Random Forest                  1                 2.43  243.00%  1.43   \n",
              "\n",
              "  RMSE Percentage  \n",
              "0         143.00%  \n",
              "1         143.00%  \n",
              "2         143.00%  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-88be36cd-3fa8-4951-8f87-be755e6f9c18\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model</th>\n",
              "      <th>Actual Sales 2016</th>\n",
              "      <th>Predicted Sales 2016</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>RMSE</th>\n",
              "      <th>RMSE Percentage</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Linear Regression</td>\n",
              "      <td>1</td>\n",
              "      <td>2.43</td>\n",
              "      <td>243.00%</td>\n",
              "      <td>1.43</td>\n",
              "      <td>143.00%</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ARIMA</td>\n",
              "      <td>1</td>\n",
              "      <td>[2.43]</td>\n",
              "      <td>243.00%</td>\n",
              "      <td>1.43</td>\n",
              "      <td>143.00%</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Random Forest</td>\n",
              "      <td>1</td>\n",
              "      <td>2.43</td>\n",
              "      <td>243.00%</td>\n",
              "      <td>1.43</td>\n",
              "      <td>143.00%</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-88be36cd-3fa8-4951-8f87-be755e6f9c18')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-88be36cd-3fa8-4951-8f87-be755e6f9c18 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-88be36cd-3fa8-4951-8f87-be755e6f9c18');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c16d8b74-43b3-4fda-9def-b08f237bd49e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c16d8b74-43b3-4fda-9def-b08f237bd49e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c16d8b74-43b3-4fda-9def-b08f237bd49e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_a3961751-0e29-484a-91e2-569aa296a4f0\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_results')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_a3961751-0e29-484a-91e2-569aa296a4f0 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_results');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_results",
              "summary": "{\n  \"name\": \"df_results\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Linear Regression\",\n          \"ARIMA\",\n          \"Random Forest\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Actual Sales 2016\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Predicted Sales 2016\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Accuracy\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"243.00%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RMSE\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"1.43\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RMSE Percentage\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"143.00%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 966
        },
        "id": "Q7K7-YzdT9cu",
        "outputId": "867c9031-c38c-43f1-8071-3a7e1a67b163"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-36-b6dbc475a042>:10: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  new_year_data['Year'] = new_year_data.index.year\n",
            "<ipython-input-36-b6dbc475a042>:10: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  new_year_data['Year'] = new_year_data.index.year\n",
            "<ipython-input-36-b6dbc475a042>:11: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  new_year_data.reset_index(inplace=True)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for ARMA and trend. All parameters except for variances will be set to zeros.\n",
            "  warn('Too few observations to estimate starting parameters%s.'\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
            "  warnings.warn(\"Maximum Likelihood optimization failed to \"\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:836: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n",
            "  return get_prediction_index(\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:836: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n",
            "  return get_prediction_index(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Linear Regression MSE: 100.0\n",
            "ARIMA MSE: 30.062194056200518\n",
            "Random Forest MSE: 113.42250000000001\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:836: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n",
            "  return get_prediction_index(\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:836: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n",
            "  return get_prediction_index(\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "0",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/range.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    413\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 414\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_range\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    415\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: 0 is not in range",
            "\nThe above exception was the direct cause of the following exception:\n",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-36-b6dbc475a042>\u001b[0m in \u001b[0;36m<cell line: 48>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     46\u001b[0m \u001b[0;31m# For ARIMA, you would typically forecast beyond the training data,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     47\u001b[0m \u001b[0;31m# but here we're just using 2016 as a point within the existing data for comparison\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 48\u001b[0;31m \u001b[0marima_pred_2016\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marima_fit\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     49\u001b[0m \u001b[0mrf_pred_2016\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrf_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0myear_2016\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1038\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1039\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mkey_is_scalar\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1040\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1041\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1042\u001b[0m         \u001b[0;31m# Convert generator to list before going through hashable part\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m_get_value\u001b[0;34m(self, label, takeable)\u001b[0m\n\u001b[1;32m   1154\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1155\u001b[0m         \u001b[0;31m# Similar to Index.get_value, but we do not fall back to positional\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1156\u001b[0;31m         \u001b[0mloc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1157\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1158\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/range.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    414\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_range\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    415\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 416\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    417\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mHashable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    418\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 0"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Filter data for NewYear events\n",
        "new_year_data = result_df_filtered[result_df_filtered['event_name_1'] == 'NewYear']\n",
        "\n",
        "# Select only the date and aggregate sales columns\n",
        "new_year_sales_summary = new_year_data[['date', 'aggregate department sales countrywide for HOUSEHOLD_1_118']]\n",
        "\n",
        "# Display the result\n",
        "print(new_year_sales_summary)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        },
        "id": "czV8FwFVbu2l",
        "outputId": "532a4c9f-bfd5-49b8-b50e-2116ec4261a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "\"['date'] not in index\"",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-42-073759cd5c00>\u001b[0m in \u001b[0;36m<cell line: 7>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# Select only the date and aggregate sales columns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mnew_year_sales_summary\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_year_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'date'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'aggregate department sales countrywide for HOUSEHOLD_1_118'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m# Display the result\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3897\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3898\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3899\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_indexer_strict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3900\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3901\u001b[0m         \u001b[0;31m# take() does not accept boolean indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   6113\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6114\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6115\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_raise_if_missing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6116\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6117\u001b[0m         \u001b[0mkeyarr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   6177\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6178\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6179\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{not_found} not in index\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6180\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6181\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0moverload\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: \"['date'] not in index\""
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "ny_df=result_df[result_df['event_name_1'] == 'NewYear']\n",
        "ny_df\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "Hz3y-ImykOo7",
        "outputId": "4cb14dfe-fc36-4893-d7b5-b6569785d218"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            wm_yr_wk    weekday  wday  month  year       d event_name_1  \\\n",
              "date                                                                      \n",
              "2012-01-01     11149     Sunday     2      1  2012   d_338      NewYear   \n",
              "2013-01-01     11249    Tuesday     4      1  2013   d_704      NewYear   \n",
              "2014-01-01     11349  Wednesday     5      1  2014  d_1069      NewYear   \n",
              "2015-01-01     11448   Thursday     6      1  2015  d_1434      NewYear   \n",
              "2016-01-01     11548     Friday     7      1  2016  d_1799      NewYear   \n",
              "\n",
              "           event_type_1 event_name_2 event_type_2  ...  d_1933  d_1934  \\\n",
              "date                                               ...                   \n",
              "2012-01-01     National          NaN          NaN  ...       0       0   \n",
              "2013-01-01     National          NaN          NaN  ...       0       0   \n",
              "2014-01-01     National          NaN          NaN  ...       0       0   \n",
              "2015-01-01     National          NaN          NaN  ...       0       0   \n",
              "2016-01-01     National          NaN          NaN  ...       0       0   \n",
              "\n",
              "            d_1935  d_1936  d_1937  d_1938  d_1939  d_1940  d_1941  \\\n",
              "date                                                                 \n",
              "2012-01-01       0       0       0       0       0       0       0   \n",
              "2013-01-01       0       0       0       0       0       0       0   \n",
              "2014-01-01       0       0       0       0       0       0       0   \n",
              "2015-01-01       0       0       0       0       0       0       0   \n",
              "2016-01-01       0       0       0       0       0       0       0   \n",
              "\n",
              "            aggregate department sales countrywide for HOUSEHOLD_1_118  \n",
              "date                                                                    \n",
              "2012-01-01                                                 11           \n",
              "2013-01-01                                                  0           \n",
              "2014-01-01                                                 11           \n",
              "2015-01-01                                                  4           \n",
              "2016-01-01                                                  1           \n",
              "\n",
              "[5 rows x 1955 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5d7ef35b-a6ea-4f41-a08b-2070ae13499f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>wm_yr_wk</th>\n",
              "      <th>weekday</th>\n",
              "      <th>wday</th>\n",
              "      <th>month</th>\n",
              "      <th>year</th>\n",
              "      <th>d</th>\n",
              "      <th>event_name_1</th>\n",
              "      <th>event_type_1</th>\n",
              "      <th>event_name_2</th>\n",
              "      <th>event_type_2</th>\n",
              "      <th>...</th>\n",
              "      <th>d_1933</th>\n",
              "      <th>d_1934</th>\n",
              "      <th>d_1935</th>\n",
              "      <th>d_1936</th>\n",
              "      <th>d_1937</th>\n",
              "      <th>d_1938</th>\n",
              "      <th>d_1939</th>\n",
              "      <th>d_1940</th>\n",
              "      <th>d_1941</th>\n",
              "      <th>aggregate department sales countrywide for HOUSEHOLD_1_118</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2012-01-01</th>\n",
              "      <td>11149</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2012</td>\n",
              "      <td>d_338</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2013-01-01</th>\n",
              "      <td>11249</td>\n",
              "      <td>Tuesday</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2013</td>\n",
              "      <td>d_704</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014-01-01</th>\n",
              "      <td>11349</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>2014</td>\n",
              "      <td>d_1069</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-01-01</th>\n",
              "      <td>11448</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1434</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-01-01</th>\n",
              "      <td>11548</td>\n",
              "      <td>Friday</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1799</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 1955 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5d7ef35b-a6ea-4f41-a08b-2070ae13499f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5d7ef35b-a6ea-4f41-a08b-2070ae13499f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5d7ef35b-a6ea-4f41-a08b-2070ae13499f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bbff4c65-a39f-401f-a8d8-fd1e8b850b77\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bbff4c65-a39f-401f-a8d8-fd1e8b850b77')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bbff4c65-a39f-401f-a8d8-fd1e8b850b77 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_3e4c0c9f-165b-4011-acd0-166a1a8bef59\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('ny_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_3e4c0c9f-165b-4011-acd0-166a1a8bef59 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('ny_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "ny_df"
            }
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Filter for 'SuperBowl' events\n",
        "superbowl_data = result_df_filtered[result_df_filtered['event_name_1'] == 'SuperBowl']\n",
        "\n",
        "# Group data by year and calculate the mean sales\n",
        "yearly_sales_superbowl = superbowl_data.groupby(superbowl_data.index.year)[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].mean()\n",
        "\n",
        "# Display the yearly trend\n",
        "print(yearly_sales_superbowl)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yOSx02oGeBHm",
        "outputId": "4bbb105d-4368-4a2c-b4ad-736f61ed26f3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "date\n",
            "2011    14.0\n",
            "2012     0.0\n",
            "2013    15.0\n",
            "2014    11.0\n",
            "2015    24.0\n",
            "2016    23.0\n",
            "Name: aggregate department sales countrywide for HOUSEHOLD_1_118, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Filter data for SuperBowl events across all years\n",
        "superbowl_data = result_df_filtered[result_df_filtered['event_name_1'] == 'SuperBowl']\n",
        "\n",
        "# Group data by year and sum the sales\n",
        "yearly_sales_superbowl = superbowl_data.groupby(superbowl_data.index.year)[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].sum()\n",
        "\n",
        "# Create the bar graph\n",
        "plt.figure(figsize=(10, 6))\n",
        "bars = plt.bar(yearly_sales_superbowl.index, yearly_sales_superbowl.values)\n",
        "\n",
        "# Highlight 2016 bar in red\n",
        "if 2016 in yearly_sales_superbowl.index:\n",
        "    index_2016 = yearly_sales_superbowl.index.tolist().index(2016)\n",
        "    bars[index_2016].set_color('red')\n",
        "\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Total Sales on SuperBowl')\n",
        "plt.title('Total Sales of HOUSEHOLD_1_118 on SuperBowl Across Years')\n",
        "plt.xticks(rotation='horizontal')\n",
        "plt.grid(True)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "DBFM6KJHCIiY",
        "outputId": "6ca081f5-3c2c-41f6-e75b-6acbafbcc34b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Filter for 'SuperBowl' events\n",
        "superbowl_data = result_df_filtered[result_df_filtered['event_name_1'] == 'SuperBowl']\n",
        "\n",
        "# Group data by year and calculate the mean sales\n",
        "yearly_sales_superbowl = superbowl_data.groupby(superbowl_data.index.year)[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].mean()\n",
        "\n",
        "# Filter data starting from 2011\n",
        "yearly_sales_superbowl = yearly_sales_superbowl[yearly_sales_superbowl.index >= 2011]\n",
        "\n",
        "# Create the bar graph\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(yearly_sales_superbowl.index, yearly_sales_superbowl.values)\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Average Sales on SuperBowl')\n",
        "plt.title('Average Sales of HOUSEHOLD_1_118 on SuperBowl Across Years (Starting from 2011)')\n",
        "plt.xticks(rotation='horizontal')\n",
        "plt.grid(True)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "hvz5DceAedUP",
        "outputId": "d63dcdc0-f826-4d55-8942-8d33ecc26e17"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Filter for 'SuperBowl' events\n",
        "superbowl_data = result_df_filtered[result_df_filtered['event_name_1'] == 'SuperBowl']\n",
        "\n",
        "# Group data by year and calculate the mean sales\n",
        "yearly_sales_superbowl = superbowl_data.groupby(superbowl_data.index.year)[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].mean()\n",
        "\n",
        "# Filter data starting from 2011\n",
        "yearly_sales_superbowl = yearly_sales_superbowl[yearly_sales_superbowl.index >= 2011]\n",
        "\n",
        "# Create the line plot\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(yearly_sales_superbowl.index, yearly_sales_superbowl.values, marker='o')\n",
        "\n",
        "# Highlight 2016 value\n",
        "if 2016 in yearly_sales_superbowl.index:\n",
        "    plt.scatter(2016, yearly_sales_superbowl[2016], color='red', s=100, label='2016')\n",
        "\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Average Sales on SuperBowl')\n",
        "plt.title('Average Sales Trend of HOUSEHOLD_1_118 on SuperBowl')\n",
        "plt.xticks(rotation='horizontal')\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "_AgJdgzKCqA1",
        "outputId": "a123de8a-cd8f-4a52-c230-446b23f84747"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.tsa.arima.model import ARIMA\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "# Filter for 'SuperBowl' events\n",
        "ny_data = result_df_filtered[result_df_filtered['event_name_1'] == 'NewYears']\n",
        "\n",
        "# Group data by year and calculate the mean sales\n",
        "yearly_sales_superbowl = superbowl_data.groupby(superbowl_data.index.year)[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].mean()\n",
        "\n",
        "# Filter data from 2011 to 2015\n",
        "yearly_sales_superbowl = yearly_sales_superbowl[(yearly_sales_superbowl.index >= 2011) & (yearly_sales_superbowl.index <= 2015)]\n",
        "\n",
        "# Fit ARIMA model\n",
        "# Adjust (p, d, q) order based on your data characteristics\n",
        "model = ARIMA(yearly_sales_superbowl, order=(1, 0, 0))\n",
        "model_fit = model.fit()\n",
        "\n",
        "# Predict average sales for 2016\n",
        "prediction_2016_AR_2 = model_fit.predict(start=2016, end=2016)\n",
        "\n",
        "# Access the predicted value directly (since it might be a single value)\n",
        "\n",
        "print(\"Predicted average sales for NewYears in 2016 (ARIMA):\", prediction_2016_AR_2.values[0])"
      ],
      "metadata": {
        "id": "gium1qifocpf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ac519266-856b-4d89-e0fb-93069e2a0edb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted average sales for NewYears in 2016 (ARIMA): 12.094145527616146\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning:\n",
            "\n",
            "An unsupported index was provided and will be ignored when e.g. forecasting.\n",
            "\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning:\n",
            "\n",
            "An unsupported index was provided and will be ignored when e.g. forecasting.\n",
            "\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning:\n",
            "\n",
            "An unsupported index was provided and will be ignored when e.g. forecasting.\n",
            "\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:836: ValueWarning:\n",
            "\n",
            "No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n",
            "\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:836: FutureWarning:\n",
            "\n",
            "No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "d9C30dEBoiBZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Filter for 'SuperBowl' events\n",
        "superbowl_data = result_df_filtered[result_df_filtered['event_name_1'] == 'SuperBowl']\n",
        "\n",
        "# Group data by year and calculate the mean sales\n",
        "yearly_sales_superbowl = superbowl_data.groupby(superbowl_data.index.year)[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].mean()\n",
        "\n",
        "# Filter data from 2011 to 2015\n",
        "yearly_sales_superbowl = yearly_sales_superbowl[(yearly_sales_superbowl.index >= 2011) & (yearly_sales_superbowl.index <= 2015)]\n",
        "\n",
        "# Prepare data for linear regression\n",
        "X = yearly_sales_superbowl.index.values.reshape(-1, 1)\n",
        "y = yearly_sales_superbowl.values\n",
        "\n",
        "# Fit linear regression model\n",
        "from sklearn.linear_model import LinearRegression\n",
        "model = LinearRegression()\n",
        "model.fit(X, y)\n",
        "\n",
        "# Predict average sales for 2016\n",
        "prediction_2016_LR_2 = model.predict([[2016]])\n",
        "print(\"Predicted average sales for SuperBowl in 2016:\", prediction_2016_LR_2[0])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aOtq4_bTgPrN",
        "outputId": "f822a53d-cf85-42e3-fc58-dc3ae07cb655"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted average sales for SuperBowl in 2016: 22.100000000000364\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "\n",
        "# Filter for 'SuperBowl' events\n",
        "superbowl_data = result_df_filtered[result_df_filtered['event_name_1'] == 'SuperBowl']\n",
        "\n",
        "# Group data by year and calculate the mean sales\n",
        "yearly_sales_superbowl = superbowl_data.groupby(superbowl_data.index.year)[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].mean()\n",
        "\n",
        "# Filter data from 2011 to 2015\n",
        "yearly_sales_superbowl = yearly_sales_superbowl[(yearly_sales_superbowl.index >= 2011) & (yearly_sales_superbowl.index <= 2015)]\n",
        "\n",
        "# Prepare data for Random Forest\n",
        "X = yearly_sales_superbowl.index.values.reshape(-1, 1)  # Years as features\n",
        "y = yearly_sales_superbowl.values  # Sales as target\n",
        "\n",
        "# Create and fit the Random Forest model\n",
        "model = RandomForestRegressor(n_estimators=100, random_state=42)  # You can adjust n_estimators\n",
        "model.fit(X, y)\n",
        "\n",
        "# Predict sales for 2016\n",
        "predicted_sales_2016_RF_2 = model.predict([[2016]])\n",
        "\n",
        "print(\"Predicted sales for SuperBowl in 2016 (using Random Forest):\", predicted_sales_2016_RF_2[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZWneWcaWF9sE",
        "outputId": "58f6d306-91a5-40c9-ea99-c5b12713c51f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted sales for SuperBowl in 2016 (using Random Forest): 19.64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Extract actual sales for New Year 2016\n",
        "actual_sales_2016_2 = result_df_Accuracy_copy[(result_df_Accuracy_copy['event_name_1'] == 'SuperBowl') & (result_df_Accuracy_copy['year'] == 2016)][\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].values[0]\n",
        "\n",
        "# Print actual and predicted values\n",
        "print(\"Actual sales for New Year 2016:\", actual_sales_2016_2)\n",
        "print(\"Predicted sales for New Year 2016 (Linear Regression):\", prediction_2016_LR_2[0])\n",
        "print(\"Predicted sales for New Year 2016 (ARIMA):\", prediction_2016_AR_2)\n",
        "print(\"Predicted sales for New Year 2016 (Random Forest):\", predicted_sales_2016_RF_2[0])\n",
        "\n",
        "# Calculate accuracy and RMSE for each model\n",
        "def calculate_metrics(actual, predicted):\n",
        "    accuracy2 = (1 - abs(actual - predicted) / actual) * 100\n",
        "    rmse = np.sqrt(mean_squared_error([actual], [predicted]))\n",
        "    rmse_percentage = (rmse / actual) * 100\n",
        "    return accuracy2, rmse_percentage\n",
        "\n",
        "accuracy_lr2, rmse_lr2 = calculate_metrics(actual_sales_2016_2, prediction_2016_LR_2[0])\n",
        "accuracy_ar2, rmse_ar2 = calculate_metrics(actual_sales_2016_2, prediction_2016_AR_2)\n",
        "accuracy_rf2, rmse_rf2 = calculate_metrics(actual_sales_2016_2, predicted_sales_2016_RF_2[0])\n",
        "\n",
        "prediction_2016_AR_2_value = prediction_2016_AR_2.values[0]\n",
        "\n",
        "# Calculate accuracy and RMSE for ARIMA using the numeric value\n",
        "accuracy_ar2, rmse_ar2 = calculate_metrics(actual_sales_2016_2, prediction_2016_AR_2_value)\n",
        "\n",
        "# Print accuracy and RMSE\n",
        "print(\"\\nAccuracy and RMSE:\")\n",
        "print(\"Linear Regression - Accuracy: {:.2f}%, RMSE: {:.2f}%\".format(accuracy_lr2, rmse_lr2))\n",
        "print(\"ARIMA - Accuracy: {:.2f}%, RMSE: {:.2f}%\".format(accuracy_ar2, rmse_ar2)) # Use the updated variables here\n",
        "print(\"Random Forest - Accuracy: {:.2f}%, RMSE: {:.2f}%\".format(accuracy_rf2, rmse_rf2))\n",
        "\n",
        "# Print accuracy and RMSE\n",
        "print(\"\\nAccuracy and RMSE:\")\n",
        "print(\"Linear Regression - Accuracy: {:.2f}%, RMSE: {:.2f}%\".format(accuracy_lr2, rmse_lr2))\n",
        "print(\"ARIMA - Accuracy: {:.2f}%, RMSE: {:.2f}%\".format(accuracy_ar2, rmse_ar2))\n",
        "print(\"Random Forest - Accuracy: {:.2f}%, RMSE: {:.2f}%\".format(accuracy_rf2, rmse_rf2))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PBp6imnHFcDq",
        "outputId": "beded641-fb9c-4181-d63b-06b54c780da5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Actual sales for New Year 2016: 23\n",
            "Predicted sales for New Year 2016 (Linear Regression): 22.100000000000364\n",
            "Predicted sales for New Year 2016 (ARIMA): 2016    12.094146\n",
            "dtype: float64\n",
            "Predicted sales for New Year 2016 (Random Forest): 19.64\n",
            "\n",
            "Accuracy and RMSE:\n",
            "Linear Regression - Accuracy: 96.09%, RMSE: 3.91%\n",
            "ARIMA - Accuracy: 52.58%, RMSE: 47.42%\n",
            "Random Forest - Accuracy: 85.39%, RMSE: 14.61%\n",
            "\n",
            "Accuracy and RMSE:\n",
            "Linear Regression - Accuracy: 96.09%, RMSE: 3.91%\n",
            "ARIMA - Accuracy: 52.58%, RMSE: 47.42%\n",
            "Random Forest - Accuracy: 85.39%, RMSE: 14.61%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "JYYWz2_o3Bnl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Create a list of dictionaries for the table data\n",
        "table_data = [\n",
        "    {\n",
        "        'Algorithm': 'Linear Regression',\n",
        "        'Actual Value': round(actual_sales_2016, 3),\n",
        "        'Predicted Value': round(prediction_2016_LR_[0], 3),\n",
        "        'Accuracy %': round(accuracy_lr, 3),\n",
        "        'Mean Squared Error %': round(rmse_lr, 3)\n",
        "    },\n",
        "    {\n",
        "        'Algorithm': 'ARIMA',\n",
        "        'Actual Value': round(actual_sales_2016, 3),\n",
        "        'Predicted Value': round(prediction_2016_AR_, 3),\n",
        "        'Accuracy %': round(accuracy_ar, 3),\n",
        "        'Mean Squared Error %': round(rmse_ar, 3)\n",
        "    },\n",
        "    {\n",
        "        'Algorithm': 'Random Forest',\n",
        "        'Actual Value': round(actual_sales_2016, 3),\n",
        "        'Predicted Value': round(prediction_2016_RF_[0], 3),\n",
        "        'Accuracy %': round(accuracy_rf, 3),\n",
        "        'Mean Squared Error %': round(rmse_rf, 3)\n",
        "    }\n",
        "]\n",
        "\n",
        "# Sort the data in descending order of accuracy\n",
        "table_data_sorted = sorted(table_data, key=lambda x: x['Accuracy %'], reverse=True)\n",
        "\n",
        "# Create the interactive table using Plotly\n",
        "fig = go.Figure(data=[go.Table(\n",
        "    header=dict(values=['Algorithm', 'Actual Value', 'Predicted Value', 'Accuracy %', 'Mean Squared Error %'],\n",
        "                fill_color='paleturquoise',\n",
        "                align='left',\n",
        "                font=dict(color='black')),\n",
        "    cells=dict(values=[\n",
        "        [item['Algorithm'] for item in table_data_sorted],\n",
        "        [item['Actual Value'] for item in table_data_sorted],\n",
        "        [item['Predicted Value'] for item in table_data_sorted],\n",
        "        [item['Accuracy %'] for item in table_data_sorted],\n",
        "        [item['Mean Squared Error %'] for item in table_data_sorted]\n",
        "    ],\n",
        "               fill_color='lavender',\n",
        "               align='left',\n",
        "               font=dict(color='black'),\n",
        "               height=30)\n",
        ")])\n",
        "\n",
        "# Add table borders\n",
        "fig.update_traces(\n",
        "    columnwidth=[150, 100, 120, 100, 150],  # Adjust column widths as needed\n",
        "    header_line_color='black',\n",
        "    cells_line_color='black',\n",
        ")\n",
        "\n",
        "fig.update_layout(width=800, height=400, title='Model Performance Metrics')\n",
        "fig.show()\n"
      ],
      "metadata": {
        "id": "QETjnMfKG046"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import HTML, display\n",
        "\n",
        "# Create a list of dictionaries to store the results\n",
        "results = [\n",
        "    {\n",
        "        \"Actual Value\": \"{:.3f}\".format(actual_sales_2016_2),\n",
        "        \"Predicted Value\": \"{:.3f}\".format(prediction_2016_LR_2[0]),\n",
        "        \"Algorithm\": \"Linear Regression\",\n",
        "        \"Accuracy %\": \"{:.3f}\".format(accuracy_lr2),\n",
        "        \"Mean Squared Error %\": \"{:.3f}\".format(rmse_lr2)\n",
        "    },\n",
        "    {\n",
        "        \"Actual Value\": \"{:.3f}\".format(actual_sales_2016_2),\n",
        "        # Extract the numeric prediction value from the Series\n",
        "        \"Predicted Value\": \"{:.3f}\".format(prediction_2016_AR_2.values[0]),\n",
        "        \"Algorithm\": \"ARIMA\",\n",
        "        \"Accuracy %\": \"{:.3f}\".format(accuracy_ar2),\n",
        "        \"Mean Squared Error %\": \"{:.3f}\".format(rmse_ar2)\n",
        "    },\n",
        "    {\n",
        "        \"Actual Value\": \"{:.3f}\".format(actual_sales_2016_2),\n",
        "        # Use the correct variable name (predicted_sales_2016_RF_2)\n",
        "        \"Predicted Value\": \"{:.3f}\".format(predicted_sales_2016_RF_2[0]),\n",
        "        \"Algorithm\": \"Random Forest\",\n",
        "        \"Accuracy %\": \"{:.3f}\".format(accuracy_rf2),\n",
        "        \"Mean Squared Error %\": \"{:.3f}\".format(rmse_rf2)\n",
        "    }\n",
        "]\n",
        "\n",
        "# Sort the data in descending order of accuracy\n",
        "table_data_sorted = sorted(results, key=lambda x: x['Accuracy %'], reverse=True)\n",
        "\n",
        "# Create the interactive table using Plotly\n",
        "fig = go.Figure(data=[go.Table(\n",
        "    header=dict(values=['Algorithm', 'Actual Value', 'Predicted Value', 'Accuracy %', 'Mean Squared Error %'],\n",
        "                fill_color='paleturquoise',\n",
        "                align='left',\n",
        "                font=dict(color='black')),\n",
        "    cells=dict(values=[\n",
        "        [item['Algorithm'] for item in table_data_sorted],\n",
        "        [item['Actual Value'] for item in table_data_sorted],\n",
        "        [item['Predicted Value'] for item in table_data_sorted],\n",
        "        [item['Accuracy %'] for item in table_data_sorted],\n",
        "        [item['Mean Squared Error %'] for item in table_data_sorted]\n",
        "    ],\n",
        "               fill_color='lavender',\n",
        "               align='left',\n",
        "               font=dict(color='black'),\n",
        "               height=30)\n",
        ")])\n",
        "\n",
        "# Add table borders\n",
        "fig.update_traces(\n",
        "    columnwidth=[150, 100, 120, 100, 150],  # Adjust column widths as needed\n",
        "    header_line_color='black',\n",
        "    cells_line_color='black',\n",
        ")\n",
        "\n",
        "fig.update_layout(width=800, height=400, title='Model Performance Metrics')\n",
        "fig.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 417
        },
        "id": "h35hN_CqFHOh",
        "outputId": "78e159fc-4684-41cf-cf3d-c8885840d7dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"e20c1c65-5e67-4942-8b1b-a645655215c2\" class=\"plotly-graph-div\" style=\"height:400px; width:800px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"e20c1c65-5e67-4942-8b1b-a645655215c2\")) {                    Plotly.newPlot(                        \"e20c1c65-5e67-4942-8b1b-a645655215c2\",                        [{\"cells\":{\"align\":\"left\",\"fill\":{\"color\":\"lavender\"},\"font\":{\"color\":\"black\"},\"height\":30,\"values\":[[\"Linear Regression\",\"Random Forest\",\"ARIMA\"],[\"23.000\",\"23.000\",\"23.000\"],[\"22.100\",\"19.640\",\"12.094\"],[\"96.087\",\"85.391\",\"52.583\"],[\"3.913\",\"14.609\",\"47.417\"]],\"line\":{\"color\":\"black\"}},\"header\":{\"align\":\"left\",\"fill\":{\"color\":\"paleturquoise\"},\"font\":{\"color\":\"black\"},\"values\":[\"Algorithm\",\"Actual Value\",\"Predicted Value\",\"Accuracy %\",\"Mean Squared Error %\"],\"line\":{\"color\":\"black\"}},\"type\":\"table\",\"columnwidth\":[150,100,120,100,150]}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"width\":800,\"height\":400,\"title\":{\"text\":\"Model Performance Metrics\"}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('e20c1c65-5e67-4942-8b1b-a645655215c2');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Filter data for NewYear events across all years\n",
        "superbowl_data = result_df_filtered[result_df_filtered['event_name_1'] == 'SuperBowl']\n",
        "\n",
        "# Group data by year and sum the sales\n",
        "yearly_sales_superbowl = superbowl_data.groupby(superbowl_data.index.year)[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].mean()\n",
        "\n",
        "# Create the bar graph\n",
        "plt.figure(figsize=(10, 6))\n",
        "bars = plt.bar(yearly_sales_superbowl.index, yearly_sales_superbowl.values)\n",
        "\n",
        "# Highlight 2016 bar differently\n",
        "if 2016 in yearly_sales_superbowl.index:\n",
        "    index_2016 = yearly_sales_superbowl.index.tolist().index(2016)\n",
        "    bars[index_2016].set_color('red')  # Set 2016 bar to light gray\n",
        "\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Total Sales on New Year')\n",
        "plt.title('Total Sales of HOUSEHOLD_1_118 on Super Bowl Across Years')\n",
        "plt.xticks(rotation='horizontal')\n",
        "plt.grid(True)\n",
        "\n",
        "# Add lines for predictions and actual value for 2016\n",
        "plt.axhline(y=actual_sales_2016_2, color='black', linestyle='-', label='Actual Sales on Super Bowl 2016')\n",
        "plt.axhline(y=prediction_2016_LR_2[0], color='blue', linestyle='--', label='Linear Regression')\n",
        "plt.axhline(y=prediction_2016_AR_2.values[0], color='green', linestyle='-.', label='ARIMA')\n",
        "plt.axhline(y=predicted_sales_2016_RF_2[0], color='orange', linestyle=':', label='Random Forest')\n",
        "\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "MNRs6KspILtV",
        "outputId": "0f31d081-c771-4fab-c1b3-ce6fa0813cf0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Oe7kt_PmLiud"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Filter for 'SuperBowl' events\n",
        "superbowl_data = result_df_filtered[result_df_filtered['event_name_1'] == 'SuperBowl']\n",
        "\n",
        "# Filter data from 2011 to 2015\n",
        "superbowl_data = superbowl_data[(superbowl_data.index.year >= 2011) & (superbowl_data.index.year <= 2015)]\n",
        "\n",
        "# Create the line graph\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(superbowl_data.index, superbowl_data[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"])\n",
        "plt.xlabel('Date')\n",
        "plt.ylabel('Sales on SuperBowl')\n",
        "plt.title('Sales of HOUSEHOLD_1_118 on SuperBowl from 2011 to 2015')\n",
        "plt.xticks(rotation='horizontal')\n",
        "plt.grid(True)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "YvCkbim5oKsd",
        "outputId": "dc1a0577-f038-400a-f47d-6f036e963720"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from statsmodels.tsa.arima.model import ARIMA\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "# Filter for 'SuperBowl' events\n",
        "superbowl_data = result_df_filtered[result_df_filtered['event_name_1'] == 'SuperBowl']\n",
        "\n",
        "# Group data by year and calculate the mean sales\n",
        "yearly_sales_superbowl = superbowl_data.groupby(superbowl_data.index.year)[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].mean()\n",
        "\n",
        "# Filter data from 2011 to 2015\n",
        "yearly_sales_superbowl = yearly_sales_superbowl[(yearly_sales_superbowl.index >= 2011) & (yearly_sales_superbowl.index <= 2015)]\n",
        "\n",
        "# Fit ARIMA model\n",
        "# Adjust (p, d, q) order based on your data characteristics\n",
        "model = ARIMA(yearly_sales_superbowl, order=(1, 0, 0))\n",
        "model_fit = model.fit()\n",
        "\n",
        "# Predict average sales for 2016\n",
        "prediction_2016_AR = model_fit.predict(start=2016, end=2016)\n",
        "\n",
        "# Access the predicted value directly (since it might be a single value)\n",
        "\n",
        "print(\"Predicted average sales for SuperBowl in 2016 (ARIMA):\", prediction_2016_AR.values[0])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i1XuLY9DfK13",
        "outputId": "e8d40b73-f469-42dd-f008-15069a69d121"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted average sales for SuperBowl in 2016 (ARIMA): 12.094145527616146\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:836: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n",
            "  return get_prediction_index(\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:836: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n",
            "  return get_prediction_index(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Filter for 'SuperBowl' events\n",
        "superbowl_data = result_df_filtered[result_df_filtered['event_name_1'] == 'SuperBowl']\n",
        "\n",
        "# Group data by year and calculate the mean sales\n",
        "yearly_sales_superbowl = superbowl_data.groupby(superbowl_data.index.year)[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].mean()\n",
        "\n",
        "# Filter data from 2011 to 2015\n",
        "yearly_sales_superbowl = yearly_sales_superbowl[(yearly_sales_superbowl.index >= 2011) & (yearly_sales_superbowl.index <= 2015)]\n",
        "\n",
        "# Fit ARIMA model\n",
        "# Experiment with different (p, d, q) orders to find the best fit\n",
        "# Example: (2, 1, 1)\n",
        "model = ARIMA(yearly_sales_superbowl, order=(2, 1, 1))\n",
        "model_fit = model.fit()\n",
        "\n",
        "# Predict average sales for 2016\n",
        "prediction_2016_AR = model_fit.predict(start=2016, end=2016)\n",
        "\n",
        "# Access the predicted value directly (since it might be a single value)\n",
        "print(\"Predicted average sales for SuperBowl in 2016 (ARIMA):\", prediction_2016_AR.values[0])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZHrAGSrHfVS5",
        "outputId": "df09770f-3d39-4990-8543-cf171b8d20ac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted average sales for SuperBowl in 2016 (ARIMA): 12.094145527616146\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:836: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n",
            "  return get_prediction_index(\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:836: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n",
            "  return get_prediction_index(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "DjIDGI78jBxf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "\n",
        "# Filter for 'SuperBowl' events\n",
        "superbowl_data = result_df_filtered[result_df_filtered['event_name_1'] == 'SuperBowl']\n",
        "\n",
        "# Group data by year and calculate the mean sales\n",
        "yearly_sales_superbowl = superbowl_data.groupby(superbowl_data.index.year)[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].mean()\n",
        "\n",
        "# Filter data from 2011 to 2015\n",
        "yearly_sales_superbowl = yearly_sales_superbowl[(yearly_sales_superbowl.index >= 2011) & (yearly_sales_superbowl.index <= 2015)]\n",
        "\n",
        "# Prepare data for Random Forest\n",
        "X = yearly_sales_superbowl.index.values.reshape(-1, 1)  # Years as features\n",
        "y = yearly_sales_superbowl.values  # Sales as target\n",
        "\n",
        "# Create and fit the Random Forest model\n",
        "model = RandomForestRegressor(n_estimators=100, random_state=42)  # You can adjust n_estimators\n",
        "model.fit(X, y)\n",
        "\n",
        "# Predict sales for 2016\n",
        "predicted_sales_2016_RF_2 = model.predict([[2016]])\n",
        "\n",
        "print(\"Predicted sales for SuperBowl in 2016 (using Random Forest):\", predicted_sales_2016_RF_2[0])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kgo_d6yoflKZ",
        "outputId": "77010c28-b1cd-40a4-e37f-1fbd4c8f0cd4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted sales for SuperBowl in 2016 (using Random Forest): 19.64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# ... (rest of your code remains the same)\n",
        "\n",
        "# --- Evaluation ---\n",
        "actual_2016 = yearly_sales_superbowl.loc[2016]\n",
        "\n",
        "# Calculate accuracy and RMSE for each model\n",
        "def evaluate_model(prediction, actual, model_name):\n",
        "    accuracy = (1 - abs(prediction - actual) / actual) * 100\n",
        "    rmse = np.sqrt(mean_squared_error([actual], [prediction])) # rmse is a scalar\n",
        "    rmse_percentage = (rmse / actual) * 100\n",
        "    print(f\"{model_name} Results:\")\n",
        "    print(f\"  Predicted Sales for 2016: {prediction[0]:.2f}\")\n",
        "    print(f\"  Actual Sales for 2016: {actual:.2f}\")\n",
        "    print(f\"  Accuracy: {accuracy[0]:.2f}%\")\n",
        "    print(f\"  RMSE: {rmse:.2f}\") # Access rmse directly, as it's not an array\n",
        "    print(f\"  RMSE (% of actual): {rmse_percentage:.2f}%\") # rmse_percentage is also a scalar\n",
        "    print(\"-\" * 30)\n",
        "\n",
        "evaluate_model(prediction_2016_lr, actual_2016, \"Linear Regression\")\n",
        "evaluate_model(prediction_2016_arima.values, actual_2016, \"ARIMA\")\n",
        "evaluate_model(predicted_sales_2016_rf, actual_2016, \"Random Forest\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E0vUcylVfrci",
        "outputId": "57bd8956-63f7-450a-9157-210a583018bf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Linear Regression Results:\n",
            "  Predicted Sales for 2016: 22.10\n",
            "  Actual Sales for 2016: 23.00\n",
            "  Accuracy: 96.09%\n",
            "  RMSE: 0.90\n",
            "  RMSE (% of actual): 3.91%\n",
            "------------------------------\n",
            "ARIMA Results:\n",
            "  Predicted Sales for 2016: 24.07\n",
            "  Actual Sales for 2016: 23.00\n",
            "  Accuracy: 95.37%\n",
            "  RMSE: 1.07\n",
            "  RMSE (% of actual): 4.63%\n",
            "------------------------------\n",
            "Random Forest Results:\n",
            "  Predicted Sales for 2016: 19.64\n",
            "  Actual Sales for 2016: 23.00\n",
            "  Accuracy: 85.39%\n",
            "  RMSE: 3.36\n",
            "  RMSE (% of actual): 14.61%\n",
            "------------------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "# --- Evaluation ---\n",
        "actual_2016 = yearly_sales_superbowl.loc[2016]\n",
        "\n",
        "# Calculate accuracy and RMSE for each model\n",
        "def evaluate_model(prediction, actual, model_name):\n",
        "    accuracy = (1 - abs(prediction - actual) / actual) * 100\n",
        "    rmse = np.sqrt(mean_squared_error([actual], [prediction]))\n",
        "    rmse_percentage = (rmse / actual) * 100\n",
        "    return model_name, prediction[0], actual, round(accuracy[0], 2), round(rmse_percentage, 2)\n",
        "\n",
        "results = []\n",
        "results.append(evaluate_model(prediction_2016, actual_2016, \"Linear Regression\"))\n",
        "results.append(evaluate_model(prediction_2016_arima.values, actual_2016, \"ARIMA\"))\n",
        "results.append(evaluate_model(predicted_sales_2016_RF, actual_2016, \"Random Forest\"))\n",
        "\n",
        "# Create DataFrame and display\n",
        "df_hehe = pd.DataFrame(results, columns=[\"Model\", \"Predicted Sales\", \"Actual Sales\", \"Accuracy %\", \"RMSE %\"])\n",
        "print(df_hehe)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uskDWDPdl9ak",
        "outputId": "07be7213-bcc7-4e0e-962d-ece45acde0b5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "               Model  Predicted Sales  Actual Sales  Accuracy %  RMSE %\n",
            "0  Linear Regression        22.100000          23.0       96.09    3.91\n",
            "1              ARIMA        24.065796          23.0       95.37    4.63\n",
            "2      Random Forest        19.640000          23.0       85.39   14.61\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "df_hehe = df_hehe.round(2)\n",
        "print(df_hehe)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UL6Bhsk5jbOw",
        "outputId": "36454a9e-4225-43e7-a984-d824a8c66158"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "               Model  Predicted Sales  Actual Sales  Accuracy %  RMSE %\n",
            "0  Linear Regression            22.10          23.0       96.09    3.91\n",
            "1              ARIMA            24.07          23.0       95.37    4.63\n",
            "2      Random Forest            19.64          23.0       85.39   14.61\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Filter for 'SuperBowl' events\n",
        "superbowl_data = result_df_filtered[result_df_filtered['event_name_1'] == 'SuperBowl']\n",
        "\n",
        "# Group data by year and calculate the mean sales\n",
        "yearly_sales_superbowl = superbowl_data.groupby(superbowl_data.index.year)[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].mean()\n",
        "\n",
        "# Filter data from 2011 to 2016 (including 2016 for actual value)\n",
        "yearly_sales_superbowl = yearly_sales_superbowl[(yearly_sales_superbowl.index >= 2011) & (yearly_sales_superbowl.index <= 2016)]\n",
        "\n",
        "# Create the line graph\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(yearly_sales_superbowl.index, yearly_sales_superbowl.values, marker='o', label='Actual Sales')\n",
        "\n",
        "# Highlight predicted values from df_hehe\n",
        "for index, row in df_hehe.iterrows():\n",
        "    plt.scatter(2016, row['Predicted Sales'], marker='x', s=100, label=row['Model'])\n",
        "\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Average Sales on SuperBowl')\n",
        "plt.title('Actual vs. Predicted Sales of HOUSEHOLD_1_118 on SuperBowl')\n",
        "plt.xticks(rotation='horizontal')\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "BA0kxZxVolsB",
        "outputId": "669489a2-7707-4c93-ecb0-f7c044df6512"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Filter for 'SuperBowl' events\n",
        "superbowl_data = result_df_filtered[result_df_filtered['event_name_1'] == 'SuperBowl']\n",
        "\n",
        "# Group data by year and calculate the mean sales\n",
        "yearly_sales_superbowl = superbowl_data.groupby(superbowl_data.index.year)[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].mean()\n",
        "\n",
        "# Filter data from 2011 to 2015\n",
        "yearly_sales_superbowl = yearly_sales_superbowl[(yearly_sales_superbowl.index >= 2011) & (yearly_sales_superbowl.index <= 2015)]\n",
        "\n",
        "# Create the line graph\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(yearly_sales_superbowl.index, yearly_sales_superbowl.values, marker='o', label='Actual Sales')\n",
        "\n",
        "# Highlight predicted values from df_hehe (adjust as needed)\n",
        "# for index, row in df_hehe.iterrows():\n",
        "#     plt.scatter(2016, row['Predicted Sales'], marker='x', s=100, label=row['Model'])\n",
        "\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Average Sales on SuperBowl')\n",
        "plt.title('Actual vs. Predicted Sales of HOUSEHOLD_1_118 on SuperBowl')\n",
        "plt.xticks(rotation='horizontal')\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "Y_L2daCJpEm6",
        "outputId": "fdad0fcb-1a87-43f3-ddd9-c0c27d64c8a1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "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oE2bNrRp04Y33niDESNGMHHiRIYOHcrZs2fp3Lkzo0aNYtq0aXh4eLB9+3aGDx9OUlISTk5Omc4XFxfH5MmT6dGjxx0fy9fXl5MnT7JhwwbWr1/Ps88+ywcffMCWLVuwtbXNVnYREREREclZt+fL+veg29vzZc0aWCvXJ6rOLSq6/8FkMuFkl7VfSdNynhR3c+BydMIdx3WbAG83B5qW88xSd4i0tLQsPW5KSgrff/89H330EW3bts2wr1u3bvzwww8888wzVK9enT/++IMnn3zyjuexs7MjNTU1wzZPT08uX76MYRjpk6sdOHAgwzE7duzgiy++oGPHjgCcP3+eiIiILGW/l8qVK6ev7b1//37S0tL46KOPsLK61RljyZIl97x/rVq1OHnyJGXLlr3rMY6OjnTp0oUuXbowevRoKlasyOHDh6lVq9ZD5xcRERERkQeTmmYweeWxu86XZQImrzxGm8reebKruYruB2RtZWJil8qMWhCECTK8QG6/DCZ2qZzjL4pVq1Zx/fp1hg8fjpubW4Z9PXv2ZM6cOTzzzDNMnDiR1q1bExAQQL9+/UhJSeH333/n5ZdfBm6Nk966dSv9+vXD3t6eokWL0qJFC65evcr7779Pr169WLNmDatXr8bV1TX9McqVK8f8+fOpU6cOMTExvPjii9m6qn7t2jV69+7NsGHDqF69Oi4uLuzbt4/333+fxx9/HICyZcuSnJzMjBkz6NKlCzt27GD27Nn3PO+bb75J586dKVWqFL169cLKyoqDBw9y5MgRpk6dyty5c0lNTaV+/fo4OTmxYMECHB0dKV26dJazi4iIiIhIztsTEplpRah/MoBL0QnsCYmkYUCRRxcsh2hM90NoX7U4swbWwtvNIcN2bzeHXOv+MGfOHB577LFMBTfcKrr37dvHoUOHaNGiBT/99BMrVqygZs2atGrVij179qQfO2XKFM6ePUtAQACenp4AVKpUiS+++ILPP/+cGjVqsGfPHl544YVMj3/9+nVq1arFoEGDGDduHF5eXlnOX6hQIerXr88nn3xCs2bNqFq1Km+88QYjR45k5syZwK0J3z7++GPee+89qlatysKFC3nnnXfued527dqxatUq1q1bR926dWnQoAGffPJJelHt7u7O119/TePGjalevTobNmxg5cqVFCmS9960IiIiIiL5yZUsjrPN6nGW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D7Pv3HVcHGz4dmhdPJztzB1LcomKbhERERERkUfo802nWR4chrWViVlP1Kasl9YGy89UdIuIiIiIiDwivx26xIfr/gJgctcqNClX1MyJJLep6BYREREREXkEDp6PYsKSAwAMa+zPwAalzRtIHgkV3SIiIiIiIrksLOomI77fR2JKGq0qevFap0rmjiSPiIpuERERERGRXBSXmMLwuXu5GptIRW8XPusfiLWVlgYrKFR0i4iIiIiI5JLUNIPnFwdz4nIsRQvZ882QOhSyN+vKzfKIqegWERERERHJJe+uPs6G41ews7Hi68G1KVnYydyR5BFT0S0iIiIiIpILftgTytfbQgD4qHcNAksVNnMiMQcV3SIiIiIiIjlsx+kI3vjlCAAT2pSnS40SZk4k5qKiW0REREREJAeduRrHqAX7SUkzeLxmCca2KmvuSGJGKrpFRERERERyyPUbSQyfu5eYhBRqlXLnvZ7VMZk0U3lBpqJbREREREQkBySlpPHMgv2cvRZPycKOfDW4Dg621uaOJWamoltEREREROQhGYbBa8sPszskkkL2Nnw7tC5FC9mbO5ZYABXdIiIiIiIiD+nLrX/z0/4LWJlg5oBAyhdzMXcksRAqukVERERERB7CmiOXeW/NCQAmdqlCiwpeZk4klkRFt4iIiIiIyAM6EhbN+B8PYBgwuGFphjTyM3cksTAqukVERERERB7A5egEhs/by83kVJqV9+TNzpXNHUkskIpuERERERGRbIpPSmHE93sJj0mknFchZg4IxMZa5ZVkpleFiIiIiIhINqSlGYz/8QBHwmLwcLbj26F1cXWwNXcssVAqukVERERERLLhg3UnWXs0HDtrK74aVBtfDydzRxILpqJbREREREQki5bsO8+szWcAeL9Xder4eZg5kVg6Fd0iIiIiIiJZsOvva7y2/DAA41qVpVugj5kTSV6goltEREREROQ+zkbc4JkF+0lONehUvTjPP1be3JEkj1DRLSIiIiIicg/R8ckMm7eXqPhkavi681HvGlhZmcwdS/IIFd0iIiIiIiJ3kZyaxqiF+/n76g1KuDnw9eDaONhamzuW5CEqukVERERERO7AMAze/PUof565hrOdNXOG1sXLxcHcsSSPUdEtIiIiIiJyB3O2h/DDnlBMJvisfyCViruaO5LkQSq6RURERERE/mXDsXCm/X4c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ktSoUSNJUkpKipxO52nvfHbu3FktW7bUmjVrPJplzZo1Cg0NVY8ePSou69evn+x2u9atW+fRfVuZlWZ0ytSpUxUWFqb4+Hi98MIL9e7jYr9VkzPKz8+v2E9l1qxZo27duikiIqLisquvvloFBQXavHnzBe27trLSfE65//771bhxY/Xs2VNvvfWWjHr+7Zc1NaOMjAwtWbJEffv2Pes2rKHKWWlGp7COTufJGS1fvlzvv/++Xn311XPannVUOSvN6BTW0ek8/bvuhhtuUHh4uHr37q1PP/30d7e10jpy1Oje6hi3260HH3xQl156qWJiYiRJOTk58vHxOeM4kIiICOXk5Hg0T05OjsLDw0+7zOFwqFGjRh7ft1VZbUbSyWNWEhIS1KhRI61evVqPP/64srOz9eKLL3p831ZUkzNatGiRfvrpJ73xxhtn3SYnJ+e0X86n9nvquvrGavORTh6eccUVV8jf319ff/217rvvPhUVFWns2LHnve/arCZmdMkll2j9+vUqLS3V3/72N02ZMuWs27KGzmS1GUmso9/y5Izy8vL05z//WXPnzlVwcPA53YZ1dCarzUhiHf2WJ2cUGBio6dOn69JLL5XdbtfixYs1aNAgffzxx7rhhhsqvY2V1hGl+wLcf//92rRpk1atWmV2FJyFFWc0fvz4iv/u3r27fHx8NHLkSD377LPy9fU1MZk5ampGK1as0IgRIzRnzhx17drVo/uqS6w4n3/+858V/x0fH6/jx4/rhRdeqLcvcmpiRgsXLlRhYaE2bNighx9+WNOmTdMjjzzisf3VNVacEevodJ6c0T333KNhw4apT58+1X7f9YkVZ8Q6Op0nZ9S4cePTXkNfdNFFOnDggF544YWzlm4r4ePl52n06NH6/PPPtWLFCrVo0aLi8qZNm6qsrEzHjh07bfuDBw+qadOmHs3UtGlT5ebmnnZZeXm5jhw54vF9W5EVZ1SZpKQklZeXKzMzs8b3bbaamtHKlSs1cOBAzZgxQ3feeefvbtu0adMzzqh56s/1bR1ZcT6VSUpKUlZWlkpLS6t829qupmYUFRWl6OhoJScna+rUqXryySflcrkq3ZY1dDorzqgyrCPPzWj58uWaNm2aHA6HHA6H7r77buXn58vhcOitt96q9Daso9NZcUaVYR3V7OvupKQkZWRknPV6K60jSncVGYah0aNH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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Filter for 'SuperBowl' events\n",
        "superbowl_data = result_df_filtered[result_df_filtered['event_name_1'] == 'SuperBowl']\n",
        "\n",
        "# Group data by year and calculate the mean sales\n",
        "yearly_sales_superbowl = superbowl_data.groupby(superbowl_data.index.year)[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].mean()\n",
        "\n",
        "# Filter data from 2011 to 2015\n",
        "yearly_sales_superbowl = yearly_sales_superbowl[(yearly_sales_superbowl.index >= 2011) & (yearly_sales_superbowl.index <= 2015)]\n",
        "\n",
        "# Create the line graph\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(yearly_sales_superbowl.index, yearly_sales_superbowl.values, marker='o', label='Actual Sales')\n",
        "\n",
        "# Highlight predicted values from df_hehe (adjust as needed)\n",
        "# for index, row in df_hehe.iterrows():\n",
        "#     plt.scatter(2016, row['Predicted Sales'], marker='x', s=100, label=row['Model'])\n",
        "\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Average Sales on SuperBowl')\n",
        "plt.title(' Sales of HOUSEHOLD_1_118 on SuperBowl')\n",
        "plt.xticks(yearly_sales_superbowl.index, rotation='horizontal')  # Set xticks to only the years in your data\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "Wcq-veMZpe_W",
        "outputId": "92300348-eb5e-4398-bb40-bd5e4bb39665"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Filter for 'SuperBowl' events\n",
        "superbowl_data = result_df_filtered[result_df_filtered['event_name_1'] == 'SuperBowl']\n",
        "\n",
        "# Group data by year and calculate the mean sales\n",
        "yearly_sales_superbowl = superbowl_data.groupby(superbowl_data.index.year)[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].mean()\n",
        "\n",
        "# Filter data from 2011 to 2015\n",
        "yearly_sales_superbowl = yearly_sales_superbowl[(yearly_sales_superbowl.index >= 2011) & (yearly_sales_superbowl.index <= 2015)]\n",
        "\n",
        "# Create the bar graph\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(yearly_sales_superbowl.index, yearly_sales_superbowl.values, label='Actual Sales')\n",
        "\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Average Sales on SuperBowl')\n",
        "plt.title(' Sales of HOUSEHOLD_1_118 on SuperBowl')\n",
        "plt.xticks(yearly_sales_superbowl.index, rotation='horizontal')\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "22A6jZAJpxAZ",
        "outputId": "03474541-f721-478b-8426-def387b6b5aa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_hehe"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "w8euAJU2n2sy",
        "outputId": "5107f9e0-c4ed-4d31-a3de-9a018ab7cdce"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               Model  Predicted Sales  Actual Sales  Accuracy %  RMSE %\n",
              "0  Linear Regression            22.10          23.0       96.09    3.91\n",
              "1              ARIMA            24.07          23.0       95.37    4.63\n",
              "2      Random Forest            19.64          23.0       85.39   14.61"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4a24ae98-87fa-44b6-ba49-3bccdb5d1080\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model</th>\n",
              "      <th>Predicted Sales</th>\n",
              "      <th>Actual Sales</th>\n",
              "      <th>Accuracy %</th>\n",
              "      <th>RMSE %</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Linear Regression</td>\n",
              "      <td>22.10</td>\n",
              "      <td>23.0</td>\n",
              "      <td>96.09</td>\n",
              "      <td>3.91</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ARIMA</td>\n",
              "      <td>24.07</td>\n",
              "      <td>23.0</td>\n",
              "      <td>95.37</td>\n",
              "      <td>4.63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Random Forest</td>\n",
              "      <td>19.64</td>\n",
              "      <td>23.0</td>\n",
              "      <td>85.39</td>\n",
              "      <td>14.61</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4a24ae98-87fa-44b6-ba49-3bccdb5d1080')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4a24ae98-87fa-44b6-ba49-3bccdb5d1080 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4a24ae98-87fa-44b6-ba49-3bccdb5d1080');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-111754e1-bb3e-41af-81dc-034b35855a7b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-111754e1-bb3e-41af-81dc-034b35855a7b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-111754e1-bb3e-41af-81dc-034b35855a7b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_130e295f-db10-464a-aedd-23ad268c3072\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_hehe')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_130e295f-db10-464a-aedd-23ad268c3072 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_hehe');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_hehe",
              "summary": "{\n  \"name\": \"df_hehe\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Linear Regression\",\n          \"ARIMA\",\n          \"Random Forest\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Predicted Sales\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.2195119583668235,\n        \"min\": 19.64,\n        \"max\": 24.07,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          22.1,\n          24.07,\n          19.64\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Actual Sales\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 23.0,\n        \"max\": 23.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          23.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Accuracy %\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.980646564823351,\n        \"min\": 85.39,\n        \"max\": 96.09,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          96.09\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RMSE %\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.980646564823349,\n        \"min\": 3.91,\n        \"max\": 14.61,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3.91\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 115
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "4ry9tBnbnmgP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "ny_df[['year', 'event_name_1', 'event_type_1',  'aggregate department sales countrywide for HOUSEHOLD_1_118']]\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "id": "DjU-erE4cLHN",
        "outputId": "9853807d-16f4-4286-e66f-cb2a3d1b2115"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            year event_name_1 event_type_1  \\\n",
              "date                                         \n",
              "2012-01-01  2012      NewYear     National   \n",
              "2013-01-01  2013      NewYear     National   \n",
              "2014-01-01  2014      NewYear     National   \n",
              "2015-01-01  2015      NewYear     National   \n",
              "2016-01-01  2016      NewYear     National   \n",
              "\n",
              "            aggregate department sales countrywide for HOUSEHOLD_1_118  \n",
              "date                                                                    \n",
              "2012-01-01                                                 11           \n",
              "2013-01-01                                                  0           \n",
              "2014-01-01                                                 11           \n",
              "2015-01-01                                                  4           \n",
              "2016-01-01                                                  1           "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-29b6fa97-323b-4f86-8c2a-bc306fcfe3c0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>year</th>\n",
              "      <th>event_name_1</th>\n",
              "      <th>event_type_1</th>\n",
              "      <th>aggregate department sales countrywide for HOUSEHOLD_1_118</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2012-01-01</th>\n",
              "      <td>2012</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2013-01-01</th>\n",
              "      <td>2013</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014-01-01</th>\n",
              "      <td>2014</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-01-01</th>\n",
              "      <td>2015</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-01-01</th>\n",
              "      <td>2016</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-29b6fa97-323b-4f86-8c2a-bc306fcfe3c0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-29b6fa97-323b-4f86-8c2a-bc306fcfe3c0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-29b6fa97-323b-4f86-8c2a-bc306fcfe3c0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a0d320c0-3872-4a01-be72-6ef244d460b4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a0d320c0-3872-4a01-be72-6ef244d460b4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a0d320c0-3872-4a01-be72-6ef244d460b4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"ny_df[['year', 'event_name_1', 'event_type_1',  'aggregate department sales countrywide for HOUSEHOLD_1_118']]\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2012-01-01 00:00:00\",\n        \"max\": \"2016-01-01 00:00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2013-01-01 00:00:00\",\n          \"2016-01-01 00:00:00\",\n          \"2014-01-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2012,\n        \"max\": 2016,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2013,\n          2016,\n          2014\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"event_name_1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"NewYear\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"event_type_1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"National\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"aggregate department sales countrywide for HOUSEHOLD_1_118\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 0,\n        \"max\": 11,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "kmyo8_QrflXn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\\# **Predictive learning based on 2011-2015 overall deprtment sales**"
      ],
      "metadata": {
        "id": "0hqGrdOQiqVs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error\n",
        "result_df_filtered['date_ordinal'] = result_df_filtered.index.to_julian_date()\n",
        "X = result_df_filtered[['date_ordinal']]\n",
        "y = result_df_filtered['aggregate department sales countrywide for HOUSEHOLD_1_118']\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "model = LinearRegression()\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "prediction_date = pd.to_datetime('2016-01-01').to_julian_date()\n",
        "predicted_value = model.predict([[prediction_date]])\n",
        "print(\"Predicted value for 2016-01-01:\", predicted_value[0])\n",
        "\n",
        "actual_value = 1\n",
        "accuracy = 1 - abs(predicted_value[0] - actual_value) / actual_value\n",
        "print(\"Accuracy:\", accuracy)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3dCwVrSbi1Ot",
        "outputId": "77a2165c-3c22-476b-bcda-06501a9052da"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted value for 2016-01-01: 9.176620301194816\n",
            "Accuracy: -7.176620301194816\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-144-f991230d95e8>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
            "  result_df_filtered['date_ordinal'] = result_df_filtered.index.to_julian_date()\n",
            "<ipython-input-144-f991230d95e8>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df_filtered['date_ordinal'] = result_df_filtered.index.to_julian_date()\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:465: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "result_df_2016 = result_df[result_df['year'] == 2016]\n",
        "result_df_2016\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 718
        },
        "id": "MTFChUjK27bo",
        "outputId": "664832ad-ac71-4741-ba4f-1d1b55ab7c5b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            wm_yr_wk    weekday  wday  month  year       d event_name_1  \\\n",
              "date                                                                      \n",
              "2016-01-01     11548     Friday     7      1  2016  d_1799      NewYear   \n",
              "2016-01-02     11549   Saturday     1      1  2016  d_1800          NaN   \n",
              "2016-01-03     11549     Sunday     2      1  2016  d_1801          NaN   \n",
              "2016-01-04     11549     Monday     3      1  2016  d_1802          NaN   \n",
              "2016-01-05     11549    Tuesday     4      1  2016  d_1803          NaN   \n",
              "...              ...        ...   ...    ...   ...     ...          ...   \n",
              "2016-05-18     11616  Wednesday     5      5  2016  d_1937          NaN   \n",
              "2016-05-19     11616   Thursday     6      5  2016  d_1938          NaN   \n",
              "2016-05-20     11616     Friday     7      5  2016  d_1939          NaN   \n",
              "2016-05-21     11617   Saturday     1      5  2016  d_1940          NaN   \n",
              "2016-05-22     11617     Sunday     2      5  2016  d_1941          NaN   \n",
              "\n",
              "           event_type_1 event_name_2 event_type_2  ...  d_1934  d_1935  \\\n",
              "date                                               ...                   \n",
              "2016-01-01     National          NaN          NaN  ...       0       0   \n",
              "2016-01-02          NaN          NaN          NaN  ...       0       0   \n",
              "2016-01-03          NaN          NaN          NaN  ...       0       0   \n",
              "2016-01-04          NaN          NaN          NaN  ...       0       0   \n",
              "2016-01-05          NaN          NaN          NaN  ...       0       0   \n",
              "...                 ...          ...          ...  ...     ...     ...   \n",
              "2016-05-18          NaN          NaN          NaN  ...       0       0   \n",
              "2016-05-19          NaN          NaN          NaN  ...       0       0   \n",
              "2016-05-20          NaN          NaN          NaN  ...       0       0   \n",
              "2016-05-21          NaN          NaN          NaN  ...       0       0   \n",
              "2016-05-22          NaN          NaN          NaN  ...       0       0   \n",
              "\n",
              "            d_1936  d_1937  d_1938  d_1939  d_1940  d_1941  \\\n",
              "date                                                         \n",
              "2016-01-01       0       0       0       0       0       0   \n",
              "2016-01-02       0       0       0       0       0       0   \n",
              "2016-01-03       0       0       0       0       0       0   \n",
              "2016-01-04       0       0       0       0       0       0   \n",
              "2016-01-05       0       0       0       0       0       0   \n",
              "...            ...     ...     ...     ...     ...     ...   \n",
              "2016-05-18       0       3       0       0       0       0   \n",
              "2016-05-19       0       0      10       0       0       0   \n",
              "2016-05-20       0       0       0       6       0       0   \n",
              "2016-05-21       0       0       0       0      12       0   \n",
              "2016-05-22       0       0       0       0       0      16   \n",
              "\n",
              "            aggregate department sales countrywide for HOUSEHOLD_1_118  \\\n",
              "date                                                                     \n",
              "2016-01-01                                                  1            \n",
              "2016-01-02                                                 15            \n",
              "2016-01-03                                                 20            \n",
              "2016-01-04                                                  3            \n",
              "2016-01-05                                                  3            \n",
              "...                                                       ...            \n",
              "2016-05-18                                                  3            \n",
              "2016-05-19                                                 10            \n",
              "2016-05-20                                                  6            \n",
              "2016-05-21                                                 12            \n",
              "2016-05-22                                                 16            \n",
              "\n",
              "            date_ordinal  \n",
              "date                      \n",
              "2016-01-01     2457388.5  \n",
              "2016-01-02     2457389.5  \n",
              "2016-01-03     2457390.5  \n",
              "2016-01-04     2457391.5  \n",
              "2016-01-05     2457392.5  \n",
              "...                  ...  \n",
              "2016-05-18     2457526.5  \n",
              "2016-05-19     2457527.5  \n",
              "2016-05-20     2457528.5  \n",
              "2016-05-21     2457529.5  \n",
              "2016-05-22     2457530.5  \n",
              "\n",
              "[143 rows x 1956 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4d172d4b-0bc3-4516-a3dc-c7b395a31c52\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>wm_yr_wk</th>\n",
              "      <th>weekday</th>\n",
              "      <th>wday</th>\n",
              "      <th>month</th>\n",
              "      <th>year</th>\n",
              "      <th>d</th>\n",
              "      <th>event_name_1</th>\n",
              "      <th>event_type_1</th>\n",
              "      <th>event_name_2</th>\n",
              "      <th>event_type_2</th>\n",
              "      <th>...</th>\n",
              "      <th>d_1934</th>\n",
              "      <th>d_1935</th>\n",
              "      <th>d_1936</th>\n",
              "      <th>d_1937</th>\n",
              "      <th>d_1938</th>\n",
              "      <th>d_1939</th>\n",
              "      <th>d_1940</th>\n",
              "      <th>d_1941</th>\n",
              "      <th>aggregate department sales countrywide for HOUSEHOLD_1_118</th>\n",
              "      <th>date_ordinal</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2016-01-01</th>\n",
              "      <td>11548</td>\n",
              "      <td>Friday</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1799</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2457388.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-01-02</th>\n",
              "      <td>11549</td>\n",
              "      <td>Saturday</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1800</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>15</td>\n",
              "      <td>2457389.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-01-03</th>\n",
              "      <td>11549</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1801</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>20</td>\n",
              "      <td>2457390.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-01-04</th>\n",
              "      <td>11549</td>\n",
              "      <td>Monday</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1802</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2457391.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-01-05</th>\n",
              "      <td>11549</td>\n",
              "      <td>Tuesday</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1803</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2457392.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-05-18</th>\n",
              "      <td>11616</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1937</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2457526.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-05-19</th>\n",
              "      <td>11616</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1938</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>2457527.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-05-20</th>\n",
              "      <td>11616</td>\n",
              "      <td>Friday</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1939</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>2457528.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-05-21</th>\n",
              "      <td>11617</td>\n",
              "      <td>Saturday</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1940</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>2457529.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-05-22</th>\n",
              "      <td>11617</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1941</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>16</td>\n",
              "      <td>16</td>\n",
              "      <td>2457530.5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>143 rows × 1956 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4d172d4b-0bc3-4516-a3dc-c7b395a31c52')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4d172d4b-0bc3-4516-a3dc-c7b395a31c52 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4d172d4b-0bc3-4516-a3dc-c7b395a31c52');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-955f2f49-6fea-4996-8786-a688fa3efbe8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-955f2f49-6fea-4996-8786-a688fa3efbe8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-955f2f49-6fea-4996-8786-a688fa3efbe8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_f236f4d6-39e0-4fb0-a702-46b7815a3fc3\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('result_df_2016')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f236f4d6-39e0-4fb0-a702-46b7815a3fc3 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('result_df_2016');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "result_df_2016"
            }
          },
          "metadata": {},
          "execution_count": 145
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# result_df_2016['date'] = pd.to_datetime(result_df_2016['date'])\n",
        "\n",
        "# result_df_2016.set_index('date', inplace=True)\n",
        "\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(result_df_2016.index, result_df_2016[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"])\n",
        "plt.xlabel('Date')\n",
        "plt.ylabel('Aggregate Department Sales')\n",
        "plt.title('Time Series of Aggregate Department Sales for HOUSEHOLD_1_118 in 2016')\n",
        "plt.grid(True)\n",
        "\n",
        "for index, row in result_df_2016.iterrows():\n",
        "    if (row[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"] < 5 or\n",
        "        row[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"] > result_df_2016[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].mean() + 2 * result_df_2016[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].std()) and \\\n",
        "       pd.notna(row['event_name_1']):\n",
        "        plt.annotate(row['event_name_1'], (index, row[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"]),\n",
        "                     textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8, color='red')\n",
        "\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 500
        },
        "id": "FVQazrBddws1",
        "outputId": "2ee48040-4a58-4717-c9fa-afba87bad74e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import numpy as np\n",
        "\n",
        "Q1 = result_df_2016[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].quantile(0.25)\n",
        "Q3 = result_df_2016[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].quantile(0.75)\n",
        "IQR = Q3 - Q1\n",
        "\n",
        "lower_bound = Q1 - 1.5 * IQR\n",
        "upper_bound = Q3 + 1.5 * IQR\n",
        "\n",
        "outliers = result_df_2016[(result_df_2016[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"] < lower_bound) | (result_df_2016[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"] > upper_bound)]\n",
        "\n",
        "print(outliers['date'])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 547
        },
        "id": "9LwTDNH448ix",
        "outputId": "7ee1f02b-cc7b-4c75-997a-0264653c499a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "'date'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3790\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3791\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3792\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32mindex.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mindex.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'date'",
            "\nThe above exception was the direct cause of the following exception:\n",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-105-c826ab26784d>\u001b[0m in \u001b[0;36m<cell line: 12>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0moutliers\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresult_df_2016\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult_df_2016\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"aggregate department sales countrywide for HOUSEHOLD_1_118\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mlower_bound\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mresult_df_2016\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"aggregate department sales countrywide for HOUSEHOLD_1_118\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0mupper_bound\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutliers\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'date'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3891\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3892\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3893\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3894\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3895\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3796\u001b[0m             ):\n\u001b[1;32m   3797\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mInvalidIndexError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3798\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3799\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3800\u001b[0m             \u001b[0;31m# If we have a listlike key, _check_indexing_error will raise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'date'"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# can be used to show how seasonality and calendar events effect the overall **forecast**"
      ],
      "metadata": {
        "id": "tbxKcvjfCQRm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Select the columns of interest for the outliers\n",
        "outlier_info = outliers[['event_name_1', 'event_type_1', 'aggregate department sales countrywide for HOUSEHOLD_1_118']]\n",
        "\n",
        "# Display the outlier information\n",
        "print(outlier_info)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GqFbWktA5dbw",
        "outputId": "f35b5d61-a9f1-425f-854f-16c6eec3ba17"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                   event_name_1 event_type_1  \\\n",
            "date                                           \n",
            "2011-05-08         Mother's day     Cultural   \n",
            "2011-08-01       Ramadan starts    Religious   \n",
            "2011-10-10          ColumbusDay     National   \n",
            "2011-10-31            Halloween     Cultural   \n",
            "2011-12-25            Christmas     National   \n",
            "2012-02-05            SuperBowl     Sporting   \n",
            "2012-02-14        ValentinesDay     Cultural   \n",
            "2012-07-20       Ramadan starts    Religious   \n",
            "2012-11-11          VeteransDay     National   \n",
            "2012-11-22         Thanksgiving     National   \n",
            "2012-12-25            Christmas     National   \n",
            "2013-01-01              NewYear     National   \n",
            "2013-01-21  MartinLutherKingDay     National   \n",
            "2013-02-13            LentStart    Religious   \n",
            "2013-11-11          VeteransDay     National   \n",
            "2013-12-25            Christmas     National   \n",
            "2014-01-07    OrthodoxChristmas    Religious   \n",
            "2014-03-12            LentWeek2    Religious   \n",
            "2014-06-29       Ramadan starts    Religious   \n",
            "2014-07-04      IndependenceDay     National   \n",
            "2014-12-25            Christmas     National   \n",
            "2015-02-01            SuperBowl     Sporting   \n",
            "2015-04-05               Easter     Cultural   \n",
            "2015-04-12       OrthodoxEaster    Religious   \n",
            "2015-07-04      IndependenceDay     National   \n",
            "2015-12-25            Christmas     National   \n",
            "2016-01-01              NewYear     National   \n",
            "2016-03-17        StPatricksDay     Cultural   \n",
            "2016-05-05        Cinco De Mayo     Cultural   \n",
            "\n",
            "            aggregate department sales countrywide for HOUSEHOLD_1_118  \n",
            "date                                                                    \n",
            "2011-05-08                                                  0           \n",
            "2011-08-01                                                  1           \n",
            "2011-10-10                                                  0           \n",
            "2011-10-31                                                  0           \n",
            "2011-12-25                                                  0           \n",
            "2012-02-05                                                  0           \n",
            "2012-02-14                                                  0           \n",
            "2012-07-20                                                  0           \n",
            "2012-11-11                                                  0           \n",
            "2012-11-22                                                  0           \n",
            "2012-12-25                                                  0           \n",
            "2013-01-01                                                  0           \n",
            "2013-01-21                                                  0           \n",
            "2013-02-13                                                  0           \n",
            "2013-11-11                                                 24           \n",
            "2013-12-25                                                  0           \n",
            "2014-01-07                                                  0           \n",
            "2014-03-12                                                  1           \n",
            "2014-06-29                                                  0           \n",
            "2014-07-04                                                  0           \n",
            "2014-12-25                                                  0           \n",
            "2015-02-01                                                 24           \n",
            "2015-04-05                                                 26           \n",
            "2015-04-12                                                 29           \n",
            "2015-07-04                                                  0           \n",
            "2015-12-25                                                  0           \n",
            "2016-01-01                                                  1           \n",
            "2016-03-17                                                  1           \n",
            "2016-05-05                                                  1           \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Calculate the IQR for the 'aggregate department sales countrywide for HOUSEHOLD_1_118' column\n",
        "Q1 = result_df_filtered[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].quantile(0.25)\n",
        "Q3 = result_df_filtered[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].quantile(0.75)\n",
        "IQR = Q3 - Q1\n",
        "\n",
        "# Define the outlier boundaries\n",
        "lower_bound = Q1 - 1.5 * IQR\n",
        "upper_bound = Q3 + 1.5 * IQR\n",
        "\n",
        "# Filter the DataFrame to identify outliers\n",
        "outliers = result_df_filtered[(result_df_filtered[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"] < lower_bound) | (result_df_filtered[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"] > upper_bound)]\n",
        "\n",
        "# Convert 'date' to datetime objects\n",
        "# result_df_filtered['date'] = pd.to_datetime(result_df_filtered['date'])\n",
        "\n",
        "# Set 'date' as index\n",
        "# result_df_filtered.set_index('date', inplace=True)\n",
        "\n",
        "# Plot time series with outlier highlighting\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(result_df_filtered.index, result_df_filtered[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"])\n",
        "\n",
        "# Highlight outliers in red\n",
        "plt.scatter(outliers.index, outliers[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"], color='red', label='Outliers')\n",
        "\n",
        "plt.xlabel('Date')\n",
        "plt.ylabel('Aggregate Department Sales')\n",
        "plt.title('Time Series of Aggregate Department Sales for HOUSEHOLD_1_118 with Outlier Highlighting')\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 500
        },
        "id": "LnTts1dVRbQm",
        "outputId": "5bdeca94-87b3-44b2-9476-42a2880c2610"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Calculate the average count of 'aggregate department sales countrywide for HOUSEHOLD_1_118'\n",
        "average_count = result_df[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].mean()\n",
        "\n",
        "print(average_count)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "saOiw8R58XX1",
        "outputId": "f7530175-b586-479e-c8de-eaa27aff0506"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "7.646573930963421\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "jPvuzPnj-iE3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "# Prepare data\n",
        "result_df_filtered['date'] = pd.to_datetime(result_df_filtered['date']) # Convert 'date' column to datetime objects\n",
        "result_df['date'] = result_df['date'].apply(lambda x: x.toordinal())\n",
        "X = result_df[['date']]\n",
        "y = result_df['aggregate department sales countrywide for HOUSEHOLD_1_118']\n",
        "\n",
        "# Split data\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Train model\n",
        "model = LinearRegression()\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Evaluate model\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "print('Mean Squared Error:', mse)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 547
        },
        "id": "eJ6rNM-DXw19",
        "outputId": "768e9f8c-8359-403a-dad5-26b1a33e7665"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "'date'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3790\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3791\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3792\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32mindex.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mindex.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'date'",
            "\nThe above exception was the direct cause of the following exception:\n",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-149-249a9e6244dc>\u001b[0m in \u001b[0;36m<cell line: 8>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# Prepare data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mresult_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'date'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_datetime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'date'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# Convert 'date' column to datetime objects\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mresult_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'date'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresult_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'date'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtoordinal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresult_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'date'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3891\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3892\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3893\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3894\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3895\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3796\u001b[0m             ):\n\u001b[1;32m   3797\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mInvalidIndexError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3798\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3799\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3800\u001b[0m             \u001b[0;31m# If we have a listlike key, _check_indexing_error will raise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'date'"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "HxQ9uPe8C3r-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Create a DataFrame for comparison\n",
        "comparison_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\n",
        "\n",
        "# Display the comparison DataFrame\n",
        "print(comparison_df)\n"
      ],
      "metadata": {
        "id": "kv1xxjkKZAb4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "result_df_filtered[result_df_filtered['event_name_1'] == 'Christmas']\n"
      ],
      "metadata": {
        "id": "Ew3sUhZmcg1d"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "result_df_filtered[(result_df_filtered['event_name_1'] == 'Christmas') | (result_df_filtered['event_name_1'] == \"NewYear\")]\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 687
        },
        "id": "IUgjQWOKdLLD",
        "outputId": "2df6e4c6-ee62-4493-f615-73556ea99192"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            wm_yr_wk    weekday  wday  month  year       d event_name_1  \\\n",
              "date                                                                      \n",
              "2011-12-25     11148     Sunday     2     12  2011   d_331    Christmas   \n",
              "2012-01-01     11149     Sunday     2      1  2012   d_338      NewYear   \n",
              "2012-12-25     11248    Tuesday     4     12  2012   d_697    Christmas   \n",
              "2013-01-01     11249    Tuesday     4      1  2013   d_704      NewYear   \n",
              "2013-12-25     11348  Wednesday     5     12  2013  d_1062    Christmas   \n",
              "2014-01-01     11349  Wednesday     5      1  2014  d_1069      NewYear   \n",
              "2014-12-25     11447   Thursday     6     12  2014  d_1427    Christmas   \n",
              "2015-01-01     11448   Thursday     6      1  2015  d_1434      NewYear   \n",
              "2015-12-25     11547     Friday     7     12  2015  d_1792    Christmas   \n",
              "2016-01-01     11548     Friday     7      1  2016  d_1799      NewYear   \n",
              "\n",
              "           event_type_1 event_name_2 event_type_2  ...  d_1934  d_1935  \\\n",
              "date                                               ...                   \n",
              "2011-12-25     National          NaN          NaN  ...       0       0   \n",
              "2012-01-01     National          NaN          NaN  ...       0       0   \n",
              "2012-12-25     National          NaN          NaN  ...       0       0   \n",
              "2013-01-01     National          NaN          NaN  ...       0       0   \n",
              "2013-12-25     National          NaN          NaN  ...       0       0   \n",
              "2014-01-01     National          NaN          NaN  ...       0       0   \n",
              "2014-12-25     National          NaN          NaN  ...       0       0   \n",
              "2015-01-01     National          NaN          NaN  ...       0       0   \n",
              "2015-12-25     National          NaN          NaN  ...       0       0   \n",
              "2016-01-01     National          NaN          NaN  ...       0       0   \n",
              "\n",
              "            d_1936  d_1937  d_1938  d_1939  d_1940  d_1941  \\\n",
              "date                                                         \n",
              "2011-12-25       0       0       0       0       0       0   \n",
              "2012-01-01       0       0       0       0       0       0   \n",
              "2012-12-25       0       0       0       0       0       0   \n",
              "2013-01-01       0       0       0       0       0       0   \n",
              "2013-12-25       0       0       0       0       0       0   \n",
              "2014-01-01       0       0       0       0       0       0   \n",
              "2014-12-25       0       0       0       0       0       0   \n",
              "2015-01-01       0       0       0       0       0       0   \n",
              "2015-12-25       0       0       0       0       0       0   \n",
              "2016-01-01       0       0       0       0       0       0   \n",
              "\n",
              "            aggregate department sales countrywide for HOUSEHOLD_1_118  \\\n",
              "date                                                                     \n",
              "2011-12-25                                                  0            \n",
              "2012-01-01                                                 11            \n",
              "2012-12-25                                                  0            \n",
              "2013-01-01                                                  0            \n",
              "2013-12-25                                                  0            \n",
              "2014-01-01                                                 11            \n",
              "2014-12-25                                                  0            \n",
              "2015-01-01                                                  4            \n",
              "2015-12-25                                                  0            \n",
              "2016-01-01                                                  1            \n",
              "\n",
              "            date_ordinal  \n",
              "date                      \n",
              "2011-12-25     2455920.5  \n",
              "2012-01-01     2455927.5  \n",
              "2012-12-25     2456286.5  \n",
              "2013-01-01     2456293.5  \n",
              "2013-12-25     2456651.5  \n",
              "2014-01-01     2456658.5  \n",
              "2014-12-25     2457016.5  \n",
              "2015-01-01     2457023.5  \n",
              "2015-12-25     2457381.5  \n",
              "2016-01-01     2457388.5  \n",
              "\n",
              "[10 rows x 1956 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-57e3d1e4-30d4-44b0-9b41-ae9e1e026749\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>wm_yr_wk</th>\n",
              "      <th>weekday</th>\n",
              "      <th>wday</th>\n",
              "      <th>month</th>\n",
              "      <th>year</th>\n",
              "      <th>d</th>\n",
              "      <th>event_name_1</th>\n",
              "      <th>event_type_1</th>\n",
              "      <th>event_name_2</th>\n",
              "      <th>event_type_2</th>\n",
              "      <th>...</th>\n",
              "      <th>d_1934</th>\n",
              "      <th>d_1935</th>\n",
              "      <th>d_1936</th>\n",
              "      <th>d_1937</th>\n",
              "      <th>d_1938</th>\n",
              "      <th>d_1939</th>\n",
              "      <th>d_1940</th>\n",
              "      <th>d_1941</th>\n",
              "      <th>aggregate department sales countrywide for HOUSEHOLD_1_118</th>\n",
              "      <th>date_ordinal</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2011-12-25</th>\n",
              "      <td>11148</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>12</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_331</td>\n",
              "      <td>Christmas</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2455920.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-01-01</th>\n",
              "      <td>11149</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2012</td>\n",
              "      <td>d_338</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>11</td>\n",
              "      <td>2455927.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-12-25</th>\n",
              "      <td>11248</td>\n",
              "      <td>Tuesday</td>\n",
              "      <td>4</td>\n",
              "      <td>12</td>\n",
              "      <td>2012</td>\n",
              "      <td>d_697</td>\n",
              "      <td>Christmas</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2456286.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2013-01-01</th>\n",
              "      <td>11249</td>\n",
              "      <td>Tuesday</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2013</td>\n",
              "      <td>d_704</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2456293.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2013-12-25</th>\n",
              "      <td>11348</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>5</td>\n",
              "      <td>12</td>\n",
              "      <td>2013</td>\n",
              "      <td>d_1062</td>\n",
              "      <td>Christmas</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2456651.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014-01-01</th>\n",
              "      <td>11349</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>2014</td>\n",
              "      <td>d_1069</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>11</td>\n",
              "      <td>2456658.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014-12-25</th>\n",
              "      <td>11447</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>12</td>\n",
              "      <td>2014</td>\n",
              "      <td>d_1427</td>\n",
              "      <td>Christmas</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2457016.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-01-01</th>\n",
              "      <td>11448</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1434</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>2457023.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-12-25</th>\n",
              "      <td>11547</td>\n",
              "      <td>Friday</td>\n",
              "      <td>7</td>\n",
              "      <td>12</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1792</td>\n",
              "      <td>Christmas</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2457381.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-01-01</th>\n",
              "      <td>11548</td>\n",
              "      <td>Friday</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1799</td>\n",
              "      <td>NewYear</td>\n",
              "      <td>National</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2457388.5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10 rows × 1956 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-57e3d1e4-30d4-44b0-9b41-ae9e1e026749')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-57e3d1e4-30d4-44b0-9b41-ae9e1e026749 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-57e3d1e4-30d4-44b0-9b41-ae9e1e026749');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-03f88bae-28e7-4d40-b36b-bfe3d83ed1bd\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-03f88bae-28e7-4d40-b36b-bfe3d83ed1bd')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-03f88bae-28e7-4d40-b36b-bfe3d83ed1bd button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 150
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Prepare data for 2011-2015\n",
        "result_df_filtered['date_ordinal'] = result_df_filtered.index.to_julian_date()\n",
        "X = result_df_filtered[['date_ordinal']]\n",
        "y = result_df_filtered['aggregate department sales countrywide for HOUSEHOLD_1_118']\n",
        "\n",
        "# Split data\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Train model\n",
        "model = LinearRegression()\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Predict sales on New Year 2016\n",
        "new_year_2016_date = pd.to_datetime('2016-01-01').to_julian_date()\n",
        "predicted_sales_new_year_2016 = model.predict([[new_year_2016_date]])\n",
        "\n",
        "print(\"Predicted sales for New Year 2016:\", predicted_sales_new_year_2016[0])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "magfxsfnddxW",
        "outputId": "90e703b9-a397-4f0b-dfc7-d772d492b82f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted sales for New Year 2016: 9.176620301194816\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-151-707c7c747787>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  result_df_filtered['date_ordinal'] = result_df_filtered.index.to_julian_date()\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:465: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "LK1EchhkdyUm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from statsmodels.tsa.arima.model import ARIMA\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "# Prepare data\n",
        "result_df_filtered = result_df_filtered.sort_index()  # Ensure data is sorted by date\n",
        "y = result_df_filtered['aggregate department sales countrywide for HOUSEHOLD_1_118']\n",
        "\n",
        "# Fit ARIMA model\n",
        "# (p, d, q) are the model orders. You might need to tune these.\n",
        "model = ARIMA(y, order=(5, 1, 0))\n",
        "model_fit = model.fit()\n",
        "\n",
        "# Predict sales for New Year 2016\n",
        "# Assuming 'result_df_filtered' ends before 2016\n",
        "start_index = len(result_df_filtered)\n",
        "end_index = start_index + 1  # Predict one step ahead\n",
        "predicted_sales_new_year_ARIMA = model_fit.predict(start=start_index, end=end_index)\n",
        "\n",
        "print(\"Predicted sales for New Year 2016:\", predicted_sales_new_year_ARIMA[0])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jL_7knYGdvPz",
        "outputId": "837aeef6-042f-4fb3-de96-33b9620fb1b1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
            "  self._init_dates(dates, freq)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted sales for New Year 2016: 10.852862057236019\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-152-c6099a3f6d90>:21: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  print(\"Predicted sales for New Year 2016:\", predicted_sales_new_year_ARIMA[0])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "\n",
        "# Prepare data for 2014-2015\n",
        "result_df_filtered['date_ordinal'] = result_df_filtered.index.to_julian_date()\n",
        "X = result_df_filtered[['date_ordinal']]\n",
        "y = result_df_filtered['aggregate department sales countrywide for HOUSEHOLD_1_118']\n",
        "\n",
        "# Train the model\n",
        "model = RandomForestRegressor(n_estimators=100, random_state=42)  # Adjust n_estimators as needed\n",
        "model.fit(X, y)\n",
        "\n",
        "# Predict sales for New Year 2016\n",
        "new_year_2016_ordinal = pd.to_datetime('2016-01-01').to_julian_date()\n",
        "predicted_sales_new_year_RF = model.predict([[new_year_2016_ordinal]])\n",
        "\n",
        "print(\"Predicted sales for New Year 2016 (Random Forest):\", predicted_sales_new_year_RF[0])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5HLmJ620eCLZ",
        "outputId": "28c16ace-0b3d-4e60-9fca-7c1602ad1ec9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted sales for New Year 2016 (Random Forest): 2.71\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:465: UserWarning: X does not have valid feature names, but RandomForestRegressor was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Assuming 'model' is your trained RandomForestRegressor\n",
        "\n",
        "# Get feature importances\n",
        "importances = model.feature_importances_\n",
        "print(\"Feature Importances:\", importances)\n",
        "\n",
        "# Visualize feature importances\n",
        "plt.bar(['Date Ordinal'], importances)\n",
        "plt.xlabel('Features')\n",
        "plt.ylabel('Importance')\n",
        "plt.title('Feature Importance in Random Forest')\n",
        "plt.show()\n",
        "\n",
        "# Unfortunately, directly visualizing the decision process of a Random Forest\n",
        "# with a single feature is not straightforward.\n",
        "\n",
        "# For a deeper understanding, you could:\n",
        "# - Explore individual decision trees within the forest.\n",
        "# - Use techniques like LIME (Local Interpretable Model-Agnostic Explanations)\n",
        "#   or SHAP (SHapley Additive exPlanations) to explain individual predictions.\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "Xc0BKw9wvqa5",
        "outputId": "e20d6eae-0fd1-44c9-c7ca-e441665090a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Feature Importances: [1.]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Extract actual sales for New Year 2016\n",
        "actual_sales_new_year = result_df_2016.loc[result_df_2016['event_name_1'] == 'NewYear', 'aggregate department sales countrywide for HOUSEHOLD_1_118'].values[0]\n",
        "\n",
        "# Gather predicted sales from the three algorithms\n",
        "predicted_sales_linear = predicted_sales_new_year_linear[0]\n",
        "predicted_sales_arima = predicted_sales_new_year_ARIMA[0]\n",
        "predicted_sales_rf = predicted_sales_new_year_RF[0]\n",
        "\n",
        "# Calculate RMSE and accuracy for each algorithm\n",
        "rmse_linear = np.sqrt(mean_squared_error([actual_sales_new_year], [predicted_sales_linear]))\n",
        "rmse_arima = np.sqrt(mean_squared_error([actual_sales_new_year], [predicted_sales_arima]))\n",
        "rmse_rf = np.sqrt(mean_squared_error([actual_sales_new_year], [predicted_sales_rf]))\n",
        "\n",
        "accuracy_linear = 1 - abs(predicted_sales_linear - actual_sales_new_year) / actual_sales_new_year\n",
        "accuracy_arima = 1 - abs(predicted_sales_arima - actual_sales_new_year) / actual_sales_new_year\n",
        "accuracy_rf = 1 - abs(predicted_sales_rf - actual_sales_new_year) / actual_sales_new_year\n",
        "\n",
        "print(\"RMSE (Linear Regression):\", rmse_linear)\n",
        "print(\"RMSE (ARIMA):\", rmse_arima)\n",
        "print(\"RMSE (Random Forest):\", rmse_rf)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IMEJGfL5eNhJ",
        "outputId": "94741e07-5582-4649-c4e6-a14be3f3c1ec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE (Linear Regression): 10.046078674293312\n",
            "RMSE (ARIMA): 9.852862057236019\n",
            "RMSE (Random Forest): 1.71\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-154-2c23cae6b861>:8: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  predicted_sales_arima = predicted_sales_new_year_ARIMA[0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Create a DataFrame to display results\n",
        "results_df = pd.DataFrame({\n",
        "    'Algorithm': ['Linear Regression', 'ARIMA', 'Random Forest'],\n",
        "    'Actual Sales': [actual_sales_new_year, actual_sales_new_year, actual_sales_new_year],\n",
        "    'Predicted Sales': [predicted_sales_linear, predicted_sales_arima, predicted_sales_rf],\n",
        "    'RMSE': [rmse_linear, rmse_arima, rmse_rf],\n",
        "    'Accuracy': [accuracy_linear, accuracy_arima, accuracy_rf]\n",
        "})\n",
        "\n",
        "# Display the results\n",
        "print(results_df)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TLzqrklYfl3W",
        "outputId": "9d72be6b-6eef-4821-d99b-28ab2f28ff15"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "           Algorithm  Actual Sales  Predicted Sales       RMSE  Accuracy\n",
            "0  Linear Regression             1        11.046079  10.046079 -9.046079\n",
            "1              ARIMA             1        10.852862   9.852862 -8.852862\n",
            "2      Random Forest             1         2.710000   1.710000 -0.710000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "# Calculate RMSE and accuracy for each algorithm\n",
        "rmse_linear = np.sqrt(mean_squared_error([actual_sales_new_year], [predicted_sales_linear]))\n",
        "rmse_arima = np.sqrt(mean_squared_error([actual_sales_new_year], [predicted_sales_arima]))\n",
        "rmse_rf = np.sqrt(mean_squared_error([actual_sales_new_year], [predicted_sales_rf]))\n",
        "\n",
        "accuracy_linear = 1 - abs(predicted_sales_linear - actual_sales_new_year) / actual_sales_new_year\n",
        "accuracy_arima = 1 - abs(predicted_sales_arima - actual_sales_new_year) / actual_sales_new_year\n",
        "accuracy_rf = 1 - abs(predicted_sales_rf - actual_sales_new_year) / actual_sales_new_year\n",
        "\n",
        "# Convert RMSE to percentage\n",
        "rmse_linear_percentage = (rmse_linear / actual_sales_new_year) * 100\n",
        "rmse_arima_percentage = (rmse_arima / actual_sales_new_year) * 100\n",
        "rmse_rf_percentage = (rmse_rf / actual_sales_new_year) * 100\n",
        "\n",
        "# Convert accuracy to percentage\n",
        "accuracy_linear_percentage = accuracy_linear * 100\n",
        "accuracy_arima_percentage = accuracy_arima * 100\n",
        "accuracy_rf_percentage = accuracy_rf * 100\n",
        "\n",
        "print(\"RMSE (Linear Regression): {:.2f}%\".format(rmse_linear_percentage))\n",
        "print(\"RMSE (ARIMA): {:.2f}%\".format(rmse_arima_percentage))\n",
        "print(\"RMSE (Random Forest): {:.2f}%\".format(rmse_rf_percentage))\n",
        "\n",
        "print(\"Accuracy (Linear Regression): {:.2f}%\".format(accuracy_linear_percentage))\n",
        "print(\"Accuracy (ARIMA): {:.2f}%\".format(accuracy_arima_percentage))\n",
        "print(\"Accuracy (Random Forest): {:.2f}%\".format(accuracy_rf_percentage))\n",
        "\n",
        "# Create a DataFrame to display results\n",
        "results_df = pd.DataFrame({\n",
        "    'Algorithm': ['Linear Regression', 'ARIMA', 'Random Forest'],\n",
        "    'Actual Sales': [actual_sales_new_year, actual_sales_new_year, actual_sales_new_year],\n",
        "    'Predicted Sales': [predicted_sales_linear, predicted_sales_arima, predicted_sales_rf],\n",
        "    'RMSE (%)': [rmse_linear_percentage, rmse_arima_percentage, rmse_rf_percentage],\n",
        "    'Accuracy (%)': [accuracy_linear_percentage, accuracy_arima_percentage, accuracy_rf_percentage]\n",
        "})\n",
        "\n",
        "# Display the results\n",
        "print(results_df)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S_5yuislfyqr",
        "outputId": "216dda2a-7601-48db-ea30-8b99dbc4cbdc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE (Linear Regression): 1004.61%\n",
            "RMSE (ARIMA): 985.29%\n",
            "RMSE (Random Forest): 171.00%\n",
            "Accuracy (Linear Regression): -904.61%\n",
            "Accuracy (ARIMA): -885.29%\n",
            "Accuracy (Random Forest): -71.00%\n",
            "           Algorithm  Actual Sales  Predicted Sales     RMSE (%)  Accuracy (%)\n",
            "0  Linear Regression             1        11.046079  1004.607867   -904.607867\n",
            "1              ARIMA             1        10.852862   985.286206   -885.286206\n",
            "2      Random Forest             1         2.710000   171.000000    -71.000000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Filter data for NewYear events\n",
        "new_year_data = result_df_filtered[result_df_filtered['event_name_1'] == 'NewYear']\n",
        "\n",
        "# Create the plot\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(new_year_data.index, new_year_data[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"], label='Aggregate Sales on New Year')\n",
        "plt.xlabel('Date')\n",
        "plt.ylabel('Aggregate Department Sales')\n",
        "plt.title('Time Series of Aggregate Department Sales for HOUSEHOLD_1_118 on New Year')\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 500
        },
        "id": "wTsTKKpQgmHC",
        "outputId": "4dba3f58-dcef-41a7-e1fe-3208b1a83d24"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Ha6WGM8loqnb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Filter data for NewYear events\n",
        "new_year_data = result_df_filtered[result_df_filtered['event_name_1'] == 'NewYear']\n",
        "\n",
        "# Create the plot\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(new_year_data.index, new_year_data[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"], label='Actual Sales on New Year')\n",
        "\n",
        "# Plot predicted values\n",
        "plt.scatter(pd.to_datetime('2016-01-01'), predicted_sales_linear, color='red', label='Linear Regression Prediction')\n",
        "plt.scatter(pd.to_datetime('2016-01-01'), predicted_sales_arima, color='green', label='ARIMA Prediction')\n",
        "plt.scatter(pd.to_datetime('2016-01-01'), predicted_sales_rf, color='blue', label='Random Forest Prediction')\n",
        "\n",
        "plt.xlabel('Date')\n",
        "plt.ylabel('Aggregate Department Sales')\n",
        "plt.title('Time Series of Aggregate Department Sales for HOUSEHOLD_1_118 on New Year with Predictions')\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 584
        },
        "id": "w1u4rjD7ntd1",
        "outputId": "35d7e321-4689-4829-8cb2-f297089a95a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Filter data for NewYear events\n",
        "new_year_data = result_df_filtered[result_df_filtered['event_name_1'] == 'NewYear']\n",
        "\n",
        "# Extract relevant data for the table\n",
        "years = new_year_data.index.year.tolist() + [2016]  # Add 2016 for predictions\n",
        "sales = new_year_data[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].tolist() + [actual_sales_new_year]\n",
        "predictions_linear = [None] * len(new_year_data) + [predicted_sales_linear]\n",
        "predictions_arima = [None] * len(new_year_data) + [predicted_sales_arima]\n",
        "predictions_rf = [None] * len(new_year_data) + [predicted_sales_rf]\n",
        "\n",
        "# Create the table DataFrame\n",
        "table_df = pd.DataFrame({\n",
        "    'Year': years,\n",
        "    'Actual Sales': sales,\n",
        "    'Linear Regression Prediction': predictions_linear,\n",
        "    'ARIMA Prediction': predictions_arima,\n",
        "    'Random Forest Prediction': predictions_rf\n",
        "})\n",
        "\n",
        "# Display the table\n",
        "print(table_df)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CY7e97y0orXK",
        "outputId": "cd92f7d5-54c5-4b40-87a5-99ae986958e5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Year  Actual Sales  Linear Regression Prediction  ARIMA Prediction  \\\n",
            "0  2012            11                           NaN               NaN   \n",
            "1  2013             0                           NaN               NaN   \n",
            "2  2014            11                           NaN               NaN   \n",
            "3  2015             4                           NaN               NaN   \n",
            "4  2016             1                           NaN               NaN   \n",
            "5  2016             1                     11.046079         10.852862   \n",
            "\n",
            "   Random Forest Prediction  \n",
            "0                       NaN  \n",
            "1                       NaN  \n",
            "2                       NaN  \n",
            "3                       NaN  \n",
            "4                       NaN  \n",
            "5                      2.71  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "result_df_filtered[(result_df_filtered['event_name_1'] == \"Mother's day\")]\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 492
        },
        "id": "dhf1lKBb12my",
        "outputId": "14e75ea3-b657-4bc5-9b5f-f844e4130fc6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            wm_yr_wk weekday  wday  month  year       d  event_name_1  \\\n",
              "date                                                                    \n",
              "2011-05-08     11115  Sunday     2      5  2011   d_100  Mother's day   \n",
              "2012-05-13     11216  Sunday     2      5  2012   d_471  Mother's day   \n",
              "2013-05-12     11316  Sunday     2      5  2013   d_835  Mother's day   \n",
              "2014-05-11     11415  Sunday     2      5  2014  d_1199  Mother's day   \n",
              "2015-05-10     11515  Sunday     2      5  2015  d_1563  Mother's day   \n",
              "2016-05-08     11615  Sunday     2      5  2016  d_1927  Mother's day   \n",
              "\n",
              "           event_type_1 event_name_2 event_type_2  ...  d_1934  d_1935  \\\n",
              "date                                               ...                   \n",
              "2011-05-08     Cultural          NaN          NaN  ...       0       0   \n",
              "2012-05-13     Cultural          NaN          NaN  ...       0       0   \n",
              "2013-05-12     Cultural          NaN          NaN  ...       0       0   \n",
              "2014-05-11     Cultural          NaN          NaN  ...       0       0   \n",
              "2015-05-10     Cultural          NaN          NaN  ...       0       0   \n",
              "2016-05-08     Cultural          NaN          NaN  ...       0       0   \n",
              "\n",
              "            d_1936  d_1937  d_1938  d_1939  d_1940  d_1941  \\\n",
              "date                                                         \n",
              "2011-05-08       0       0       0       0       0       0   \n",
              "2012-05-13       0       0       0       0       0       0   \n",
              "2013-05-12       0       0       0       0       0       0   \n",
              "2014-05-11       0       0       0       0       0       0   \n",
              "2015-05-10       0       0       0       0       0       0   \n",
              "2016-05-08       0       0       0       0       0       0   \n",
              "\n",
              "            aggregate department sales countrywide for HOUSEHOLD_1_118  \\\n",
              "date                                                                     \n",
              "2011-05-08                                                  0            \n",
              "2012-05-13                                                 14            \n",
              "2013-05-12                                                 10            \n",
              "2014-05-11                                                  5            \n",
              "2015-05-10                                                 14            \n",
              "2016-05-08                                                  3            \n",
              "\n",
              "            date_ordinal  \n",
              "date                      \n",
              "2011-05-08     2455689.5  \n",
              "2012-05-13     2456060.5  \n",
              "2013-05-12     2456424.5  \n",
              "2014-05-11     2456788.5  \n",
              "2015-05-10     2457152.5  \n",
              "2016-05-08     2457516.5  \n",
              "\n",
              "[6 rows x 1956 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7d4a023e-e4f5-47c3-848f-f0782047cd0b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>wm_yr_wk</th>\n",
              "      <th>weekday</th>\n",
              "      <th>wday</th>\n",
              "      <th>month</th>\n",
              "      <th>year</th>\n",
              "      <th>d</th>\n",
              "      <th>event_name_1</th>\n",
              "      <th>event_type_1</th>\n",
              "      <th>event_name_2</th>\n",
              "      <th>event_type_2</th>\n",
              "      <th>...</th>\n",
              "      <th>d_1934</th>\n",
              "      <th>d_1935</th>\n",
              "      <th>d_1936</th>\n",
              "      <th>d_1937</th>\n",
              "      <th>d_1938</th>\n",
              "      <th>d_1939</th>\n",
              "      <th>d_1940</th>\n",
              "      <th>d_1941</th>\n",
              "      <th>aggregate department sales countrywide for HOUSEHOLD_1_118</th>\n",
              "      <th>date_ordinal</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2011-05-08</th>\n",
              "      <td>11115</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2011</td>\n",
              "      <td>d_100</td>\n",
              "      <td>Mother's day</td>\n",
              "      <td>Cultural</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2455689.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-05-13</th>\n",
              "      <td>11216</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2012</td>\n",
              "      <td>d_471</td>\n",
              "      <td>Mother's day</td>\n",
              "      <td>Cultural</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>14</td>\n",
              "      <td>2456060.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2013-05-12</th>\n",
              "      <td>11316</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2013</td>\n",
              "      <td>d_835</td>\n",
              "      <td>Mother's day</td>\n",
              "      <td>Cultural</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>2456424.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014-05-11</th>\n",
              "      <td>11415</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2014</td>\n",
              "      <td>d_1199</td>\n",
              "      <td>Mother's day</td>\n",
              "      <td>Cultural</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>2456788.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-05-10</th>\n",
              "      <td>11515</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2015</td>\n",
              "      <td>d_1563</td>\n",
              "      <td>Mother's day</td>\n",
              "      <td>Cultural</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>14</td>\n",
              "      <td>2457152.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-05-08</th>\n",
              "      <td>11615</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2016</td>\n",
              "      <td>d_1927</td>\n",
              "      <td>Mother's day</td>\n",
              "      <td>Cultural</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2457516.5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6 rows × 1956 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7d4a023e-e4f5-47c3-848f-f0782047cd0b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7d4a023e-e4f5-47c3-848f-f0782047cd0b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7d4a023e-e4f5-47c3-848f-f0782047cd0b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-334102be-9c6b-49a8-ae50-b5ac591b6c8b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-334102be-9c6b-49a8-ae50-b5ac591b6c8b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-334102be-9c6b-49a8-ae50-b5ac591b6c8b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 162
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Prepare data for 2011-2015\n",
        "result_df_filtered['date_ordinal'] = result_df_filtered.index.to_julian_date()\n",
        "X = result_df_filtered[['date_ordinal']]\n",
        "y = result_df_filtered['aggregate department sales countrywide for HOUSEHOLD_1_118']\n",
        "\n",
        "# Split data\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Train model\n",
        "model = LinearRegression()\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Predict sales on New Year 2016\n",
        "new_year_2016_date = pd.to_datetime('2016-01-01').to_julian_date()\n",
        "predicted_sales_new_year_2016 = model.predict([[new_year_2016_date]])\n",
        "\n",
        "print(\"Predicted sales for New Year 2016:\", predicted_sales_new_year_2016[0])"
      ],
      "metadata": {
        "id": "617U_-qa1mTq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "3QeXUCbD3dHa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "ptCzwMirdzZG"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "a8k0lWxody7U"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Now compre the predicted sales with actual sales in"
      ],
      "metadata": {
        "id": "t5mmuCmsdqUy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Assuming 'y_test' contains true labels and 'y_pred' contains predicted labels\n",
        "# Convert predictions to binary values (0 or 1) based on a threshold\n",
        "threshold = 0.5  # Adjust this threshold as needed\n",
        "y_pred_binary = (y_pred > threshold).astype(int)\n",
        "\n",
        "# Calculate accuracy score\n",
        "accuracy = accuracy_score(y_test, y_pred_binary)\n",
        "print('Accuracy Score:', accuracy)\n"
      ],
      "metadata": {
        "id": "EhaNGNjiFNwZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **increase dataset from 2014-2015 to 2011-2015**"
      ],
      "metadata": {
        "id": "C9IRII-F_5jo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "result_df_Accuracy_copy"
      ],
      "metadata": {
        "id": "uTS3Y6NHcFpv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "result_df_filtered = result_df_Accuracy_copy[(result_df_Accuracy_copy['year'] >= 2011) & (result_df_Accuracy_copy['year'] <= 2015)]\n",
        "\n",
        "# Convert 'date' to datetime objects\n",
        "result_df_filtered['date'] = pd.to_datetime(result_df_filtered['date'])\n",
        "\n",
        "# Set 'date' as index\n",
        "result_df_filtered.set_index('date', inplace=True)\n",
        "\n",
        "# Fit ARIMA model\n",
        "\n",
        "model = ARIMA(result_df_filtered[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"], order=(5, 1, 0))\n",
        "model_fit = model.fit()\n",
        "\n",
        "# Forecast next 10 days\n",
        "forecast = model_fit.forecast(steps=10)\n",
        "\n",
        "result_df_2016 = result_df_Accuracy_copy[result_df_Accuracy_copy['year'] == 2016]\n",
        "\n",
        "# Extract the actual values for the first 10 days of 2016\n",
        "actual_values = result_df_2016[\"aggregate department sales countrywide for HOUSEHOLD_1_118\"].iloc[:10]\n",
        "\n",
        "# Calculate the Mean Squared Error (MSE)\n",
        "mse = mean_squared_error(actual_values, forecast)\n",
        "\n",
        "print('Mean Squared Error:', mse)\n"
      ],
      "metadata": {
        "id": "s686o4FuAsKe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "K3qagO5bCMWw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Change in prices in 2015-2016**"
      ],
      "metadata": {
        "id": "o7IdOe5hRigl"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ds_CfKGgQtfd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "O7fIjHtePO-n"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "cC9x22PuJwWk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "KeeH5y-gJwcU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "cs_Y-BERJwfT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "dZFqz62zJwjd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "njpTCs1ZJwls"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "gFV8f6MMJwp0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "aVwIUX_bJwsV"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}